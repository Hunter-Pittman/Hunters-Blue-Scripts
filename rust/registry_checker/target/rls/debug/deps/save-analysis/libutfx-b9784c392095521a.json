{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0","program":"C:\\Users\\hunte\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","utfx","--edition=2018","C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=b9784c392095521a","-C","extra-filename=-b9784c392095521a","--out-dir","c:\\Users\\hunte\\Documents\\ps_reg_compare_git\\rust\\registry_checker\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\hunte\\Documents\\ps_reg_compare_git\\rust\\registry_checker\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\hunte\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\hunte\\Documents\\ps_reg_compare_git\\rust\\registry_checker\\target\\rls\\debug\\deps\\libutfx-b9784c392095521a.rmeta"},"prelude":{"crate_id":{"name":"utfx","disambiguator":[365776743961486836,0]},"crate_root":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src","external_crates":[{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[7379719041391505039,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5226548339696486402,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15782588708828798436,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11258588358156983047,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6811839233127289238,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[6798478037195512723,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12572258325454906649,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[598470195457823820,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7285820039251336650,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15004074270013699283,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[6568562326383462027,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[7532148157145861684,0]}},{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[15660406440960571571,0]}}],"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":0,"byte_end":11243,"line_start":1,"line_end":236,"column_start":1,"column_end":25}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10498,"byte_end":10499,"line_start":208,"line_end":208,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"MissingNulError, UCStr","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10552,"byte_end":10553,"line_start":210,"line_end":210,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"UCString","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10576,"byte_end":10577,"line_start":211,"line_end":211,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"UStr, FromUtf32Error","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10629,"byte_end":10630,"line_start":213,"line_end":213,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"UString","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":0,"byte_end":11243,"line_start":1,"line_end":236,"column_start":1,"column_end":25},"name":"","qualname":"::","value":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":25},{"krate":0,"index":100},{"krate":0,"index":362},{"krate":0,"index":429},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654}],"decl_id":null,"docs":" A wide string FFI module for converting to and from wide string variants.","sig":null,"attributes":[{"value":"/ A wide string FFI module for converting to and from wide string variants.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":0,"byte_end":77,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":78,"byte_end":81,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides multiple types of wide strings: `U16String`, `U16CString`, `U32String`,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":82,"byte_end":178,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ and `U32CString`. These types are backed by two generic implementations parameterized by","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":179,"byte_end":271,"line_start":4,"line_end":4,"column_start":1,"column_end":93}},{"value":"/ element size: `UString<C>` and `UCString<C>`. The `UCString` types are analogous to the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":272,"byte_end":363,"line_start":5,"line_end":5,"column_start":1,"column_end":92}},{"value":"/ standard `CString` FFI type, while the `UString` types are analogous to `OsString`. Otherwise,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":364,"byte_end":462,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"/ `U16` and `U32` types differ only in character width and encoding methods.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":463,"byte_end":541,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":542,"byte_end":545,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ For `U16String` and `U32String`, no guarantees are made about the underlying string data; they","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":546,"byte_end":644,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"/ are simply a sequence of UTF-16 *code units* or UTF-32 code points, both of which may be","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":645,"byte_end":737,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/ ill-formed or contain nul values. `U16CString` and `U32CString`, on the other hand, are aware","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":738,"byte_end":835,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ of nul values and are guaranteed to be terminated with a nul value (unless unchecked methods","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":836,"byte_end":932,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ are used to construct the strings). Because `U16CString` and `U32CString` are C-style,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":933,"byte_end":1023,"line_start":13,"line_end":13,"column_start":1,"column_end":91}},{"value":"/ nul-terminated strings, they will have no interior nul values. All four string types may still","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1024,"byte_end":1122,"line_start":14,"line_end":14,"column_start":1,"column_end":99}},{"value":"/ have unpaired UTF-16 surrogates or invalid UTF-32 code points; ill-formed data is preserved","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1123,"byte_end":1218,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ until conversion to a basic Rust `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1219,"byte_end":1265,"line_start":16,"line_end":16,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1266,"byte_end":1269,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Use `U16String` or `U32String` when you simply need to pass-through strings, or when you know","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1270,"byte_end":1367,"line_start":18,"line_end":18,"column_start":1,"column_end":98}},{"value":"/ or don't care if you're not dealing with a nul-terminated string, such as when string lengths","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1368,"byte_end":1465,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ are provided and you are only reading strings from FFI, not writing them out to a FFI.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1466,"byte_end":1556,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1557,"byte_end":1560,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Use `U16CString` or `U32CString` when you must properly handle nul values, and must deal with","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1561,"byte_end":1658,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ nul-terminated C-style wide strings, such as when you pass strings into FFI functions.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1659,"byte_end":1749,"line_start":23,"line_end":23,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1750,"byte_end":1753,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Relationship to other Rust Strings","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1754,"byte_end":1794,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1795,"byte_end":1798,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Standard Rust strings `String` and `str` are well-formed Unicode data encoded as UTF-8. The","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1799,"byte_end":1894,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ standard strings provide proper handling of Unicode and ensure strong safety guarantees.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1895,"byte_end":1987,"line_start":28,"line_end":28,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1988,"byte_end":1991,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `CString` and `CStr` are strings used for C FFI. They handle nul-terminated C-style strings.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":1992,"byte_end":2088,"line_start":30,"line_end":30,"column_start":1,"column_end":97}},{"value":"/ However, they do not have a builtin encoding, and conversions between C-style and other Rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2089,"byte_end":2185,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ strings must specifically encode and decode the strings, and handle possibly invalid encoding","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2186,"byte_end":2283,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ data. They are safe to use only in passing string-like data back and forth from C APIs but do","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2284,"byte_end":2381,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ not provide any other guarantees, so may not be well-formed.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2382,"byte_end":2446,"line_start":34,"line_end":34,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2447,"byte_end":2450,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ `OsString` and `OsStr` are also strings for use with FFI. Unlike `CString`, they do no special","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2451,"byte_end":2549,"line_start":36,"line_end":36,"column_start":1,"column_end":99}},{"value":"/ handling of nul values, but instead have an OS-specified encoding. While, for example, on Linux","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2550,"byte_end":2649,"line_start":37,"line_end":37,"column_start":1,"column_end":100}},{"value":"/ systems this is usually the UTF-8 encoding, this is not the case for every platform. The","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2650,"byte_end":2742,"line_start":38,"line_end":38,"column_start":1,"column_end":93}},{"value":"/ encoding may not even be 8-bit: on Windows, `OsString` uses a malformed encoding sometimes","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2743,"byte_end":2837,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ referred to as \"WTF-8\". In any case, like `CString`, `OsString` has no additional guarantees","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2838,"byte_end":2934,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/ and may not be well-formed.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2935,"byte_end":2966,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2967,"byte_end":2970,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Due to the loss of safety of these other string types, conversion to standard Rust `String` is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":2971,"byte_end":3069,"line_start":43,"line_end":43,"column_start":1,"column_end":99}},{"value":"/ lossy, and may require knowledge of the underlying encoding, including platform-specific","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3070,"byte_end":3162,"line_start":44,"line_end":44,"column_start":1,"column_end":93}},{"value":"/ quirks.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3163,"byte_end":3174,"line_start":45,"line_end":45,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3175,"byte_end":3178,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The wide strings in this crate are roughly based on the principles of the string types in","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3179,"byte_end":3272,"line_start":47,"line_end":47,"column_start":1,"column_end":94}},{"value":"/ `std::ffi`, though there are differences. `U16String`, `U32String`, `U16Str`, and `U32Str` are","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3273,"byte_end":3371,"line_start":48,"line_end":48,"column_start":1,"column_end":99}},{"value":"/ roughly similar in role to `OsString` and `OsStr`, while `U16CString`, `U32CString`, `U16CStr`,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3372,"byte_end":3471,"line_start":49,"line_end":49,"column_start":1,"column_end":100}},{"value":"/ and `U32CStr` are roughly similar in role to `CString` and `CStr`. Conversion to FFI string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3472,"byte_end":3567,"line_start":50,"line_end":50,"column_start":1,"column_end":96}},{"value":"/ types is generally very straight forward and safe, while conversion directly between standard","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3568,"byte_end":3665,"line_start":51,"line_end":51,"column_start":1,"column_end":98}},{"value":"/ Rust `String` is a lossy conversion just as `OsString` is.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3666,"byte_end":3728,"line_start":52,"line_end":52,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3729,"byte_end":3732,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ `U16String` and `U16CString` are treated as though they use UTF-16 encoding, even if they may","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3733,"byte_end":3830,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/ contain unpaired surrogates. `U32String` and `U32CString` are treated as though they use UTF-32","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3831,"byte_end":3930,"line_start":55,"line_end":55,"column_start":1,"column_end":100}},{"value":"/ encoding, even if they may contain values outside the valid Unicode character range.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":3931,"byte_end":4019,"line_start":56,"line_end":56,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4020,"byte_end":4023,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Remarks on UTF-16 Code Units","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4024,"byte_end":4058,"line_start":58,"line_end":58,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4059,"byte_end":4062,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ *Code units* are the 16-bit units that comprise UTF-16 sequences. Code units","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4063,"byte_end":4143,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ can specify Unicode code points either as single units or in *surrogate pairs*. Because every","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4144,"byte_end":4241,"line_start":61,"line_end":61,"column_start":1,"column_end":98}},{"value":"/ code unit might be part of a surrogate pair, many regular string operations, including","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4242,"byte_end":4332,"line_start":62,"line_end":62,"column_start":1,"column_end":91}},{"value":"/ indexing into a wide string, writing to a wide string, or even iterating a wide string should","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4333,"byte_end":4430,"line_start":63,"line_end":63,"column_start":1,"column_end":98}},{"value":"/ be handled with care and are greatly discouraged. Some operations have safer alternatives","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4431,"byte_end":4524,"line_start":64,"line_end":64,"column_start":1,"column_end":94}},{"value":"/ provided, such as Unicode code point iteration instead of code unit iteration. Always keep in","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4525,"byte_end":4622,"line_start":65,"line_end":65,"column_start":1,"column_end":98}},{"value":"/ mind that the number of code units (`len()`) of a wide string is **not** equivalent to the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4623,"byte_end":4717,"line_start":66,"line_end":66,"column_start":1,"column_end":95}},{"value":"/ number of Unicode characters in the string, merely the length of the UTF-16 encoding sequence.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4718,"byte_end":4816,"line_start":67,"line_end":67,"column_start":1,"column_end":99}},{"value":"/ In fact, Unicode code points do not even have a one-to-one mapping with characters!","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4817,"byte_end":4904,"line_start":68,"line_end":68,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4905,"byte_end":4908,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ UTF-32 simply encodes Unicode code points as-is in 32-bit values, but Unicode character code","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":4909,"byte_end":5005,"line_start":70,"line_end":70,"column_start":1,"column_end":97}},{"value":"/ points are reserved only for 21-bits. Again, Unicode code points do not have a one-to-one","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5006,"byte_end":5099,"line_start":71,"line_end":71,"column_start":1,"column_end":94}},{"value":"/ mapping with the concept of a visual character glyph.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5100,"byte_end":5157,"line_start":72,"line_end":72,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5158,"byte_end":5161,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # FFI with C/C++ `wchar_t`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5162,"byte_end":5192,"line_start":74,"line_end":74,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5193,"byte_end":5196,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ C/C++'s `wchar_t` (and C++'s corresponding `widestring`) varies in size depending on compiler","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5197,"byte_end":5294,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ and platform. Typically, `wchar_t` is 16-bits on Windows and 32-bits on most Unix-based","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5295,"byte_end":5386,"line_start":77,"line_end":77,"column_start":1,"column_end":92}},{"value":"/ platforms. For convenience when using `wchar_t`-based FFI's, type aliases for the corresponding","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5387,"byte_end":5486,"line_start":78,"line_end":78,"column_start":1,"column_end":100}},{"value":"/ string types are provided: `WideString` aliases `U16String` on Windows or `U32String`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5487,"byte_end":5576,"line_start":79,"line_end":79,"column_start":1,"column_end":90}},{"value":"/ elsewhere, `WideCString` aliases `U16CString` or `U32CString`, etc. The `WideChar` alias","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5577,"byte_end":5669,"line_start":80,"line_end":80,"column_start":1,"column_end":93}},{"value":"/ is also provided, aliasing `u16` or `u32`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5670,"byte_end":5716,"line_start":81,"line_end":81,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5717,"byte_end":5720,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ When not interacting with a FFI using `wchar_t`, it is recommended to use the string types","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5721,"byte_end":5815,"line_start":83,"line_end":83,"column_start":1,"column_end":95}},{"value":"/ directly rather than via the wide alias.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5816,"byte_end":5860,"line_start":84,"line_end":84,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5861,"byte_end":5864,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This crate supports `no_std` when default features are disabled. The `std` and `alloc` features","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5865,"byte_end":5964,"line_start":86,"line_end":86,"column_start":1,"column_end":100}},{"value":"/ (enabled by default) enable the `U16String`, `U32String`, `U16CString`, and `U32CString` types","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":5965,"byte_end":6063,"line_start":87,"line_end":87,"column_start":1,"column_end":99}},{"value":"/ and aliases. Other types do not require allocation and can be used in a `no_std` environment.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6064,"byte_end":6161,"line_start":88,"line_end":88,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6162,"byte_end":6165,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6166,"byte_end":6180,"line_start":90,"line_end":90,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6181,"byte_end":6184,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ The following example uses `U16String` to get Windows error messages, since `FormatMessageW`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6185,"byte_end":6281,"line_start":92,"line_end":92,"column_start":1,"column_end":97}},{"value":"/ returns a string length for us and we don't need to pass error messages into other FFI","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6282,"byte_end":6372,"line_start":93,"line_end":93,"column_start":1,"column_end":91}},{"value":"/ functions so we don't need to worry about nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6373,"byte_end":6430,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6431,"byte_end":6434,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6435,"byte_end":6446,"line_start":96,"line_end":96,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(not(windows))]","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6447,"byte_end":6473,"line_start":97,"line_end":97,"column_start":1,"column_end":27}},{"value":"/ # fn main() {}","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6474,"byte_end":6492,"line_start":98,"line_end":98,"column_start":1,"column_end":19}},{"value":"/ # extern crate winapi;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6493,"byte_end":6519,"line_start":99,"line_end":99,"column_start":1,"column_end":27}},{"value":"/ # extern crate widestring;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6520,"byte_end":6550,"line_start":100,"line_end":100,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(windows)]","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6551,"byte_end":6572,"line_start":101,"line_end":101,"column_start":1,"column_end":22}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6573,"byte_end":6590,"line_start":102,"line_end":102,"column_start":1,"column_end":18}},{"value":"/ use winapi::um::winbase::{FormatMessageW, LocalFree, FORMAT_MESSAGE_FROM_SYSTEM,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6591,"byte_end":6675,"line_start":103,"line_end":103,"column_start":1,"column_end":85}},{"value":"/                           FORMAT_MESSAGE_ALLOCATE_BUFFER, FORMAT_MESSAGE_IGNORE_INSERTS};","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6676,"byte_end":6769,"line_start":104,"line_end":104,"column_start":1,"column_end":94}},{"value":"/ use winapi::shared::ntdef::LPWSTR;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6770,"byte_end":6808,"line_start":105,"line_end":105,"column_start":1,"column_end":39}},{"value":"/ use winapi::shared::minwindef::HLOCAL;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6809,"byte_end":6851,"line_start":106,"line_end":106,"column_start":1,"column_end":43}},{"value":"/ use std::ptr;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6852,"byte_end":6869,"line_start":107,"line_end":107,"column_start":1,"column_end":18}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6870,"byte_end":6900,"line_start":108,"line_end":108,"column_start":1,"column_end":31}},{"value":"/ # use winapi::shared::minwindef::DWORD;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6901,"byte_end":6944,"line_start":109,"line_end":109,"column_start":1,"column_end":44}},{"value":"/ # let error_code: DWORD = 0;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6945,"byte_end":6977,"line_start":110,"line_end":110,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6978,"byte_end":6981,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ let U16Str: U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":6982,"byte_end":7008,"line_start":112,"line_end":112,"column_start":1,"column_end":27}},{"value":"/ unsafe {","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7009,"byte_end":7021,"line_start":113,"line_end":113,"column_start":1,"column_end":13}},{"value":"/     // First, get a string buffer from some windows api such as FormatMessageW...","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7022,"byte_end":7107,"line_start":114,"line_end":114,"column_start":1,"column_end":86}},{"value":"/     let mut buffer: LPWSTR = ptr::null_mut();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7108,"byte_end":7157,"line_start":115,"line_end":115,"column_start":1,"column_end":50}},{"value":"/     let strlen = FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM |","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7158,"byte_end":7222,"line_start":116,"line_end":116,"column_start":1,"column_end":65}},{"value":"/                                 FORMAT_MESSAGE_ALLOCATE_BUFFER |","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7223,"byte_end":7291,"line_start":117,"line_end":117,"column_start":1,"column_end":69}},{"value":"/                                 FORMAT_MESSAGE_IGNORE_INSERTS,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7292,"byte_end":7358,"line_start":118,"line_end":118,"column_start":1,"column_end":67}},{"value":"/                                 ptr::null(),","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7359,"byte_end":7407,"line_start":119,"line_end":119,"column_start":1,"column_end":49}},{"value":"/                                 error_code, // error code from GetLastError()","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7408,"byte_end":7489,"line_start":120,"line_end":120,"column_start":1,"column_end":82}},{"value":"/                                 0,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7490,"byte_end":7528,"line_start":121,"line_end":121,"column_start":1,"column_end":39}},{"value":"/                                 (&mut buffer as *mut LPWSTR) as LPWSTR,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7529,"byte_end":7604,"line_start":122,"line_end":122,"column_start":1,"column_end":76}},{"value":"/                                 0,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7605,"byte_end":7643,"line_start":123,"line_end":123,"column_start":1,"column_end":39}},{"value":"/                                 ptr::null_mut());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7644,"byte_end":7697,"line_start":124,"line_end":124,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7698,"byte_end":7701,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/     // Get the buffer as a wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7702,"byte_end":7744,"line_start":126,"line_end":126,"column_start":1,"column_end":43}},{"value":"/     U16Str = U16String::from_ptr(buffer, strlen as usize);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7745,"byte_end":7807,"line_start":127,"line_end":127,"column_start":1,"column_end":63}},{"value":"/     // Since U16String creates an owned copy, it's safe to free original buffer now","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7808,"byte_end":7895,"line_start":128,"line_end":128,"column_start":1,"column_end":88}},{"value":"/     // If you didn't want an owned copy, you could use &U16Str.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7896,"byte_end":7963,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/     LocalFree(buffer as HLOCAL);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":7964,"byte_end":8000,"line_start":130,"line_end":130,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8001,"byte_end":8006,"line_start":131,"line_end":131,"column_start":1,"column_end":6}},{"value":"/ // Convert to a regular Rust String and use it to your heart's desire!","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8007,"byte_end":8081,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ let message = U16Str.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8082,"byte_end":8125,"line_start":133,"line_end":133,"column_start":1,"column_end":44}},{"value":"/ # assert_eq!(message, \"The operation completed successfully.\\r\\n\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8126,"byte_end":8197,"line_start":134,"line_end":134,"column_start":1,"column_end":72}},{"value":"/ # }","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8198,"byte_end":8205,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8206,"byte_end":8213,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8214,"byte_end":8217,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ The following example is the functionally the same, only using `U16CString` instead.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8218,"byte_end":8306,"line_start":138,"line_end":138,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8307,"byte_end":8310,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8311,"byte_end":8322,"line_start":140,"line_end":140,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(not(windows))]","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8323,"byte_end":8349,"line_start":141,"line_end":141,"column_start":1,"column_end":27}},{"value":"/ # fn main() {}","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8350,"byte_end":8368,"line_start":142,"line_end":142,"column_start":1,"column_end":19}},{"value":"/ # extern crate winapi;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8369,"byte_end":8395,"line_start":143,"line_end":143,"column_start":1,"column_end":27}},{"value":"/ # extern crate widestring;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8396,"byte_end":8426,"line_start":144,"line_end":144,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(windows)]","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8427,"byte_end":8448,"line_start":145,"line_end":145,"column_start":1,"column_end":22}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8449,"byte_end":8466,"line_start":146,"line_end":146,"column_start":1,"column_end":18}},{"value":"/ use winapi::um::winbase::{FormatMessageW, LocalFree, FORMAT_MESSAGE_FROM_SYSTEM,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8467,"byte_end":8551,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"/                           FORMAT_MESSAGE_ALLOCATE_BUFFER, FORMAT_MESSAGE_IGNORE_INSERTS};","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8552,"byte_end":8645,"line_start":148,"line_end":148,"column_start":1,"column_end":94}},{"value":"/ use winapi::shared::ntdef::LPWSTR;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8646,"byte_end":8684,"line_start":149,"line_end":149,"column_start":1,"column_end":39}},{"value":"/ use winapi::shared::minwindef::HLOCAL;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8685,"byte_end":8727,"line_start":150,"line_end":150,"column_start":1,"column_end":43}},{"value":"/ use std::ptr;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8728,"byte_end":8745,"line_start":151,"line_end":151,"column_start":1,"column_end":18}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8746,"byte_end":8777,"line_start":152,"line_end":152,"column_start":1,"column_end":32}},{"value":"/ # use winapi::shared::minwindef::DWORD;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8778,"byte_end":8821,"line_start":153,"line_end":153,"column_start":1,"column_end":44}},{"value":"/ # let error_code: DWORD = 0;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8822,"byte_end":8854,"line_start":154,"line_end":154,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8855,"byte_end":8858,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ let U16Str: U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8859,"byte_end":8886,"line_start":156,"line_end":156,"column_start":1,"column_end":28}},{"value":"/ unsafe {","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8887,"byte_end":8899,"line_start":157,"line_end":157,"column_start":1,"column_end":13}},{"value":"/     // First, get a string buffer from some windows api such as FormatMessageW...","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8900,"byte_end":8985,"line_start":158,"line_end":158,"column_start":1,"column_end":86}},{"value":"/     let mut buffer: LPWSTR = ptr::null_mut();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":8986,"byte_end":9035,"line_start":159,"line_end":159,"column_start":1,"column_end":50}},{"value":"/     FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM |","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9036,"byte_end":9087,"line_start":160,"line_end":160,"column_start":1,"column_end":52}},{"value":"/                    FORMAT_MESSAGE_ALLOCATE_BUFFER |","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9088,"byte_end":9143,"line_start":161,"line_end":161,"column_start":1,"column_end":56}},{"value":"/                    FORMAT_MESSAGE_IGNORE_INSERTS,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9144,"byte_end":9197,"line_start":162,"line_end":162,"column_start":1,"column_end":54}},{"value":"/                    ptr::null(),","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9198,"byte_end":9233,"line_start":163,"line_end":163,"column_start":1,"column_end":36}},{"value":"/                    error_code, // error code from GetLastError()","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9234,"byte_end":9302,"line_start":164,"line_end":164,"column_start":1,"column_end":69}},{"value":"/                    0,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9303,"byte_end":9328,"line_start":165,"line_end":165,"column_start":1,"column_end":26}},{"value":"/                    (&mut buffer as *mut LPWSTR) as LPWSTR,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9329,"byte_end":9391,"line_start":166,"line_end":166,"column_start":1,"column_end":63}},{"value":"/                    0,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9392,"byte_end":9417,"line_start":167,"line_end":167,"column_start":1,"column_end":26}},{"value":"/                    ptr::null_mut());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9418,"byte_end":9458,"line_start":168,"line_end":168,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9459,"byte_end":9462,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/     // Get the buffer as a wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9463,"byte_end":9505,"line_start":170,"line_end":170,"column_start":1,"column_end":43}},{"value":"/     U16Str = U16CString::from_ptr_str(buffer);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9506,"byte_end":9556,"line_start":171,"line_end":171,"column_start":1,"column_end":51}},{"value":"/     // Since U16CString creates an owned copy, it's safe to free original buffer now","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9557,"byte_end":9645,"line_start":172,"line_end":172,"column_start":1,"column_end":89}},{"value":"/     // If you didn't want an owned copy, you could use &U16CStr.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9646,"byte_end":9714,"line_start":173,"line_end":173,"column_start":1,"column_end":69}},{"value":"/     LocalFree(buffer as HLOCAL);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9715,"byte_end":9751,"line_start":174,"line_end":174,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9752,"byte_end":9757,"line_start":175,"line_end":175,"column_start":1,"column_end":6}},{"value":"/ // Convert to a regular Rust String and use it to your heart's desire!","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9758,"byte_end":9832,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"/ let message = U16Str.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9833,"byte_end":9876,"line_start":177,"line_end":177,"column_start":1,"column_end":44}},{"value":"/ # assert_eq!(message, \"The operation completed successfully.\\r\\n\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9877,"byte_end":9948,"line_start":178,"line_end":178,"column_start":1,"column_end":72}},{"value":"/ # }","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9949,"byte_end":9956,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9957,"byte_end":9964,"line_start":180,"line_end":180,"column_start":1,"column_end":8}},{"value":"deny(future_incompatible, rust_2018_idioms)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":9966,"byte_end":10013,"line_start":182,"line_end":182,"column_start":1,"column_end":48}},{"value":"warn(unused, anonymous_parameters, missing_docs,\nmissing_copy_implementations, missing_debug_implementations, trivial_casts,\ntrivial_numeric_casts)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10014,"byte_end":10195,"line_start":183,"line_end":191,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12271,"byte_end":12286,"line_start":24,"line_end":24,"column_start":12,"column_end":27},"name":"MissingNulError","qualname":"::ucstr::MissingNulError","value":"MissingNulError {  }","parent":null,"children":[{"krate":0,"index":657}],"decl_id":null,"docs":" An error returned from `UCString` and `UCStr` to indicate that a terminating nul value\n was missing.","sig":null,"attributes":[{"value":"/ An error returned from `UCString` and `UCStr` to indicate that a terminating nul value","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12011,"byte_end":12101,"line_start":19,"line_end":19,"column_start":1,"column_end":91}},{"value":"/ was missing.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12102,"byte_end":12118,"line_start":20,"line_end":20,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12119,"byte_end":12122,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The error optionally returns the ownership of the invalid vector whenever a vector was owned.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12123,"byte_end":12220,"line_start":22,"line_end":22,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12870,"byte_end":12878,"line_start":47,"line_end":47,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<MissingNulError<C>>::into_vec","value":"pub fn into_vec(Self) -> Option<Vec<C>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this error, returning the underlying vector of `u16` values which generated the\n error in the first place.\n","sig":null,"attributes":[{"value":"/ Consumes this error, returning the underlying vector of `u16` values which generated the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12702,"byte_end":12794,"line_start":44,"line_end":44,"column_start":5,"column_end":97}},{"value":"/ error in the first place.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12799,"byte_end":12828,"line_start":45,"line_end":45,"column_start":5,"column_end":34}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12833,"byte_end":12858,"line_start":46,"line_end":46,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14082,"byte_end":14087,"line_start":79,"line_end":79,"column_start":12,"column_end":17},"name":"UCStr","qualname":"::ucstr::UCStr","value":"UCStr {  }","parent":null,"children":[{"krate":0,"index":677}],"decl_id":null,"docs":" C-style wide string reference for `UCString`.","sig":null,"attributes":[{"value":"/ C-style wide string reference for `UCString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13294,"byte_end":13343,"line_start":65,"line_end":65,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13344,"byte_end":13347,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ `UCStr` is aware of nul values. Unless unchecked conversions are used, all `UCStr`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13348,"byte_end":13434,"line_start":67,"line_end":67,"column_start":1,"column_end":87}},{"value":"/ strings end with a nul-terminator in the underlying buffer and contain no internal nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13435,"byte_end":13533,"line_start":68,"line_end":68,"column_start":1,"column_end":99}},{"value":"/ The strings may still contain invalid or ill-formed UTF-16 or UTF-32 data. These strings are","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13534,"byte_end":13630,"line_start":69,"line_end":69,"column_start":1,"column_end":97}},{"value":"/ intended to be used with FFI functions such as Windows API that may require nul-terminated","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13631,"byte_end":13725,"line_start":70,"line_end":70,"column_start":1,"column_end":95}},{"value":"/ strings.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13726,"byte_end":13738,"line_start":71,"line_end":71,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13739,"byte_end":13742,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ `UCStr` can be converted to and from many other string types, including `UString`,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13743,"byte_end":13829,"line_start":73,"line_end":73,"column_start":1,"column_end":87}},{"value":"/ `OsString`, and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13830,"byte_end":13900,"line_start":74,"line_end":74,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13901,"byte_end":13904,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Please prefer using the type aliases `U16CStr` or `U32CStr` or `WideCStr` to using","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13905,"byte_end":13991,"line_start":76,"line_end":76,"column_start":1,"column_end":87}},{"value":"/ this type directly.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13992,"byte_end":14015,"line_start":77,"line_end":77,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14196,"byte_end":14199,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"new","qualname":"<UCStr<C>>::new","value":"pub fn new<S: AsRef<UCStr<C>> + ?Sized>(&S) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Coerces a value into a `UCStr`.\n","sig":null,"attributes":[{"value":"/ Coerces a value into a `UCStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14149,"byte_end":14184,"line_start":84,"line_end":84,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15255,"byte_end":15267,"line_start":111,"line_end":111,"column_start":19,"column_end":31},"name":"from_ptr_str","qualname":"<UCStr<C>>::from_ptr_str","value":"pub unsafe fn from_ptr_str<'a>(*const C) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UStr` from a nul-terminated string pointer.","sig":null,"attributes":[{"value":"/ Constructs a `UStr` from a nul-terminated string pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14277,"byte_end":14338,"line_start":89,"line_end":89,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14343,"byte_end":14346,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ This will scan for nul values beginning with `p`. The first nul value will be used as the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14351,"byte_end":14444,"line_start":91,"line_end":91,"column_start":5,"column_end":98}},{"value":"/ nul terminator for the string, similar to how libc string functions such as `strlen` work.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14449,"byte_end":14543,"line_start":92,"line_end":92,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14548,"byte_end":14551,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14556,"byte_end":14568,"line_start":94,"line_end":94,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14573,"byte_end":14576,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid or has a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14581,"byte_end":14674,"line_start":96,"line_end":96,"column_start":5,"column_end":98}},{"value":"/ nul terminator, and the function could scan past the underlying buffer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14679,"byte_end":14754,"line_start":97,"line_end":97,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14759,"byte_end":14762,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ `p` must be non-null.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14767,"byte_end":14792,"line_start":99,"line_end":99,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14797,"byte_end":14800,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14805,"byte_end":14817,"line_start":101,"line_end":101,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14822,"byte_end":14825,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This function panics if `p` is null.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14830,"byte_end":14870,"line_start":103,"line_end":103,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14875,"byte_end":14878,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Caveat","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14883,"byte_end":14895,"line_start":105,"line_end":105,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14900,"byte_end":14903,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ The lifetime for the returned string is inferred from its usage. To prevent accidental","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14908,"byte_end":14998,"line_start":107,"line_end":107,"column_start":5,"column_end":95}},{"value":"/ misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15003,"byte_end":15093,"line_start":108,"line_end":108,"column_start":5,"column_end":95}},{"value":"/ context, such as by providing a helper function taking the lifetime of a host value for the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15098,"byte_end":15193,"line_start":109,"line_end":109,"column_start":5,"column_end":100}},{"value":"/ string, or by explicit annotation.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15198,"byte_end":15236,"line_start":110,"line_end":110,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16803,"byte_end":16820,"line_start":148,"line_end":148,"column_start":19,"column_end":36},"name":"from_ptr_with_nul","qualname":"<UCStr<C>>::from_ptr_with_nul","value":"pub unsafe fn from_ptr_with_nul<'a>(*const C, usize) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UStr` from a pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a `UStr` from a pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15555,"byte_end":15607,"line_start":121,"line_end":121,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15612,"byte_end":15615,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of elements, **not** the number of bytes, and does","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15620,"byte_end":15707,"line_start":123,"line_end":123,"column_start":5,"column_end":92}},{"value":"/ **not** include the nul terminator of the string. Thus, a `len` of 0 is valid and means that","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15712,"byte_end":15808,"line_start":124,"line_end":124,"column_start":5,"column_end":101}},{"value":"/ `p` is a pointer directly to the nul terminator of the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15813,"byte_end":15879,"line_start":125,"line_end":125,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15884,"byte_end":15887,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15892,"byte_end":15904,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15909,"byte_end":15912,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":15917,"byte_end":16011,"line_start":129,"line_end":129,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16016,"byte_end":16029,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16034,"byte_end":16037,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ `p` must be non-null, even for zero `len`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16042,"byte_end":16088,"line_start":132,"line_end":132,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16093,"byte_end":16096,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ The interior values of the pointer are not scanned for nul. Any interior nul values will","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16101,"byte_end":16193,"line_start":134,"line_end":134,"column_start":5,"column_end":97}},{"value":"/ result in an invalid `UCStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16198,"byte_end":16231,"line_start":135,"line_end":135,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16236,"byte_end":16239,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16244,"byte_end":16256,"line_start":137,"line_end":137,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16261,"byte_end":16264,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ This function panics if `p` is null or if a nul value is not found at offset `len` of `p`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16269,"byte_end":16363,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ Only pointers with a nul terminator are valid.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16368,"byte_end":16418,"line_start":140,"line_end":140,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16423,"byte_end":16426,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Caveat","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16431,"byte_end":16443,"line_start":142,"line_end":142,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16448,"byte_end":16451,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ The lifetime for the returned string is inferred from its usage. To prevent accidental","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16456,"byte_end":16546,"line_start":144,"line_end":144,"column_start":5,"column_end":95}},{"value":"/ misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16551,"byte_end":16641,"line_start":145,"line_end":145,"column_start":5,"column_end":95}},{"value":"/ context, such as by providing a helper function taking the lifetime of a host value for the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16646,"byte_end":16741,"line_start":146,"line_end":146,"column_start":5,"column_end":100}},{"value":"/ string, or by explicit annotation.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":16746,"byte_end":16784,"line_start":147,"line_end":147,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17411,"byte_end":17430,"line_start":162,"line_end":162,"column_start":12,"column_end":31},"name":"from_slice_with_nul","qualname":"<UCStr<C>>::from_slice_with_nul","value":"pub fn from_slice_with_nul(&[C]) -> Result<&Self, MissingNulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCStr` from a slice of values that has a nul terminator.","sig":null,"attributes":[{"value":"/ Constructs a `UCStr` from a slice of values that has a nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17023,"byte_end":17097,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17102,"byte_end":17105,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The slice will be scanned for nul values. When a nul value is found, it is treated as the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17110,"byte_end":17203,"line_start":156,"line_end":156,"column_start":5,"column_end":98}},{"value":"/ terminator for the string, and the `UCStr` slice will be truncated to that nul.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17208,"byte_end":17291,"line_start":157,"line_end":157,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17296,"byte_end":17299,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Failure","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17304,"byte_end":17317,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17322,"byte_end":17325,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ If there are no no nul values in the slice, an error is returned.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17330,"byte_end":17399,"line_start":161,"line_end":161,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18090,"byte_end":18119,"line_start":177,"line_end":177,"column_start":19,"column_end":48},"name":"from_slice_with_nul_unchecked","qualname":"<UCStr<C>>::from_slice_with_nul_unchecked","value":"pub unsafe fn from_slice_with_nul_unchecked(&[C]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCStr` from a slice of values that has a nul terminator. No\n checking for nul values is performed.","sig":null,"attributes":[{"value":"/ Constructs a `UCStr` from a slice of values that has a nul terminator. No","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17708,"byte_end":17785,"line_start":169,"line_end":169,"column_start":5,"column_end":82}},{"value":"/ checking for nul values is performed.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17790,"byte_end":17831,"line_start":170,"line_end":170,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17836,"byte_end":17839,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17844,"byte_end":17856,"line_start":172,"line_end":172,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17861,"byte_end":17864,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it can lead to invalid `UCStr` values when the slice","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17869,"byte_end":17957,"line_start":174,"line_end":174,"column_start":5,"column_end":93}},{"value":"/ is missing a terminating nul value or there are non-terminating interior nul values","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":17962,"byte_end":18049,"line_start":175,"line_end":175,"column_start":5,"column_end":92}},{"value":"/ in the slice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18054,"byte_end":18071,"line_start":176,"line_end":176,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18326,"byte_end":18337,"line_start":184,"line_end":184,"column_start":12,"column_end":23},"name":"to_ucstring","qualname":"<UCStr<C>>::to_ucstring","value":"pub fn to_ucstring(&Self) -> crate::UCString<C>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to an new owned `UString`.\n","sig":null,"attributes":[{"value":"/ Copies the wide string to an new owned `UString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18231,"byte_end":18284,"line_start":182,"line_end":182,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18289,"byte_end":18314,"line_start":183,"line_end":183,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19688,"byte_end":19698,"line_start":222,"line_end":222,"column_start":12,"column_end":22},"name":"to_ustring","qualname":"<UCStr<C>>::to_ustring","value":"pub fn to_ustring(&Self) -> crate::UString<C>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a new owned `UString`.","sig":null,"attributes":[{"value":"/ Copies the wide string to a new owned `UString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18467,"byte_end":18519,"line_start":188,"line_end":188,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18524,"byte_end":18527,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ The `UString` will **not** have a nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18532,"byte_end":18585,"line_start":190,"line_end":190,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18590,"byte_end":18593,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18598,"byte_end":18612,"line_start":192,"line_end":192,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18617,"byte_end":18620,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18625,"byte_end":18636,"line_start":194,"line_end":194,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18641,"byte_end":18672,"line_start":195,"line_end":195,"column_start":5,"column_end":36}},{"value":"/ let wcstr = U16CString::from_str(\"MyString\").unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18677,"byte_end":18735,"line_start":196,"line_end":196,"column_start":5,"column_end":63}},{"value":"/ // Convert U16CString to a U16String","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18740,"byte_end":18780,"line_start":197,"line_end":197,"column_start":5,"column_end":45}},{"value":"/ let wstr = wcstr.to_ustring();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18785,"byte_end":18819,"line_start":198,"line_end":198,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18824,"byte_end":18827,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ // U16CString will have a terminating nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18832,"byte_end":18877,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/ let wcvec = wcstr.into_vec_with_nul();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18882,"byte_end":18924,"line_start":201,"line_end":201,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(wcvec[wcvec.len()-1], 0);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18929,"byte_end":18969,"line_start":202,"line_end":202,"column_start":5,"column_end":45}},{"value":"/ // The resulting U16String will not have the terminating nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":18974,"byte_end":19038,"line_start":203,"line_end":203,"column_start":5,"column_end":69}},{"value":"/ let wvec = wstr.into_vec();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19043,"byte_end":19074,"line_start":204,"line_end":204,"column_start":5,"column_end":36}},{"value":"/ assert_ne!(wvec[wvec.len()-1], 0);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19079,"byte_end":19117,"line_start":205,"line_end":205,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19122,"byte_end":19129,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19134,"byte_end":19137,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19142,"byte_end":19153,"line_start":208,"line_end":208,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19158,"byte_end":19189,"line_start":209,"line_end":209,"column_start":5,"column_end":36}},{"value":"/ let wcstr = U32CString::from_str(\"MyString\").unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19194,"byte_end":19252,"line_start":210,"line_end":210,"column_start":5,"column_end":63}},{"value":"/ // Convert U32CString to a U32String","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19257,"byte_end":19297,"line_start":211,"line_end":211,"column_start":5,"column_end":45}},{"value":"/ let wstr = wcstr.to_ustring();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19302,"byte_end":19336,"line_start":212,"line_end":212,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19341,"byte_end":19344,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ // U32CString will have a terminating nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19349,"byte_end":19394,"line_start":214,"line_end":214,"column_start":5,"column_end":50}},{"value":"/ let wcvec = wcstr.into_vec_with_nul();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19399,"byte_end":19441,"line_start":215,"line_end":215,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(wcvec[wcvec.len()-1], 0);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19446,"byte_end":19486,"line_start":216,"line_end":216,"column_start":5,"column_end":45}},{"value":"/ // The resulting U32String will not have the terminating nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19491,"byte_end":19555,"line_start":217,"line_end":217,"column_start":5,"column_end":69}},{"value":"/ let wvec = wstr.into_vec();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19560,"byte_end":19591,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/ assert_ne!(wvec[wvec.len()-1], 0);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19596,"byte_end":19634,"line_start":219,"line_end":219,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19639,"byte_end":19646,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19651,"byte_end":19676,"line_start":221,"line_end":221,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19912,"byte_end":19920,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<UCStr<C>>::as_slice","value":"pub fn as_slice(&Self) -> &[C]","parent":null,"children":[],"decl_id":null,"docs":" Converts to a slice of the wide string.","sig":null,"attributes":[{"value":"/ Converts to a slice of the wide string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19790,"byte_end":19833,"line_start":226,"line_end":226,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19838,"byte_end":19841,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ The slice will **not** include the nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19846,"byte_end":19900,"line_start":228,"line_end":228,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20068,"byte_end":20085,"line_start":234,"line_end":234,"column_start":12,"column_end":29},"name":"as_slice_with_nul","qualname":"<UCStr<C>>::as_slice_with_nul","value":"pub fn as_slice_with_nul(&Self) -> &[C]","parent":null,"children":[],"decl_id":null,"docs":" Converts to a slice of the wide string, including the nul terminator.\n","sig":null,"attributes":[{"value":"/ Converts to a slice of the wide string, including the nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":19983,"byte_end":20056,"line_start":233,"line_end":233,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20276,"byte_end":20282,"line_start":241,"line_end":241,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<UCStr<C>>::as_ptr","value":"pub fn as_ptr(&Self) -> *const C","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the wide string.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the wide string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20134,"byte_end":20179,"line_start":238,"line_end":238,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20184,"byte_end":20187,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ The pointer is valid only as long as the lifetime of this reference.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20192,"byte_end":20264,"line_start":240,"line_end":240,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20486,"byte_end":20489,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"len","qualname":"<UCStr<C>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the wide string as number of elements (**not** number of bytes)\n **not** including nul terminator.\n","sig":null,"attributes":[{"value":"/ Returns the length of the wide string as number of elements (**not** number of bytes)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20343,"byte_end":20432,"line_start":245,"line_end":245,"column_start":5,"column_end":94}},{"value":"/ **not** including nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20437,"byte_end":20474,"line_start":246,"line_end":246,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20648,"byte_end":20656,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<UCStr<C>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this wide string contains no data (i.e. is only the nul terminator).\n","sig":null,"attributes":[{"value":"/ Returns whether this wide string contains no data (i.e. is only the nul terminator).","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20548,"byte_end":20636,"line_start":251,"line_end":251,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21478,"byte_end":21491,"line_start":278,"line_end":278,"column_start":12,"column_end":25},"name":"into_ucstring","qualname":"<UCStr<C>>::into_ucstring","value":"pub fn into_ucstring(Box<Self>) -> crate::UCString<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<UCStr>` into a `UCString` without copying or allocating.","sig":null,"attributes":[{"value":"/ Converts a `Box<UCStr>` into a `UCString` without copying or allocating.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20709,"byte_end":20785,"line_start":256,"line_end":256,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20790,"byte_end":20793,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20798,"byte_end":20812,"line_start":258,"line_end":258,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20817,"byte_end":20820,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20825,"byte_end":20832,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20837,"byte_end":20868,"line_start":261,"line_end":261,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20873,"byte_end":20876,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let v = vec![102u16, 111u16, 111u16]; // \"foo\"","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20881,"byte_end":20931,"line_start":263,"line_end":263,"column_start":5,"column_end":55}},{"value":"/ let c_string = U16CString::new(v.clone()).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20936,"byte_end":20991,"line_start":264,"line_end":264,"column_start":5,"column_end":60}},{"value":"/ let boxed = c_string.into_boxed_ucstr();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":20996,"byte_end":21040,"line_start":265,"line_end":265,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(boxed.into_ucstring(), U16CString::new(v).unwrap());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21045,"byte_end":21112,"line_start":266,"line_end":266,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21117,"byte_end":21124,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21129,"byte_end":21132,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21137,"byte_end":21144,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21149,"byte_end":21180,"line_start":270,"line_end":270,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21185,"byte_end":21188,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ let v = vec![102u32, 111u32, 111u32]; // \"foo\"","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21193,"byte_end":21243,"line_start":272,"line_end":272,"column_start":5,"column_end":55}},{"value":"/ let c_string = U32CString::new(v.clone()).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21248,"byte_end":21303,"line_start":273,"line_end":273,"column_start":5,"column_end":60}},{"value":"/ let boxed = c_string.into_boxed_ucstr();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21308,"byte_end":21352,"line_start":274,"line_end":274,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(boxed.into_ucstring(), U32CString::new(v).unwrap());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21357,"byte_end":21424,"line_start":275,"line_end":275,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21429,"byte_end":21436,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21441,"byte_end":21466,"line_start":277,"line_end":277,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22636,"byte_end":22648,"line_start":313,"line_end":313,"column_start":12,"column_end":24},"name":"to_os_string","qualname":"<UCStr<u16>>::to_os_string","value":"pub fn to_os_string(&Self) -> std::ffi::OsString","parent":null,"children":[],"decl_id":null,"docs":" Decodes a wide string to an owned `OsString`.","sig":null,"attributes":[{"value":"/ Decodes a wide string to an owned `OsString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21882,"byte_end":21931,"line_start":293,"line_end":293,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21936,"byte_end":21939,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This makes a string copy of the `U16CStr`. Since `U16CStr` makes no guarantees that it is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21944,"byte_end":22037,"line_start":295,"line_end":295,"column_start":5,"column_end":98}},{"value":"/ valid UTF-16, there is no guarantee that the resulting `OsString` will be valid data. The","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22042,"byte_end":22135,"line_start":296,"line_end":296,"column_start":5,"column_end":98}},{"value":"/ `OsString` will **not** have a nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22140,"byte_end":22190,"line_start":297,"line_end":297,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22195,"byte_end":22198,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22203,"byte_end":22217,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22222,"byte_end":22225,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22230,"byte_end":22241,"line_start":301,"line_end":301,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22246,"byte_end":22277,"line_start":302,"line_end":302,"column_start":5,"column_end":36}},{"value":"/ use std::ffi::OsString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22282,"byte_end":22309,"line_start":303,"line_end":303,"column_start":5,"column_end":32}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22314,"byte_end":22337,"line_start":304,"line_end":304,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22342,"byte_end":22385,"line_start":305,"line_end":305,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22390,"byte_end":22438,"line_start":306,"line_end":306,"column_start":5,"column_end":53}},{"value":"/ // Create an OsString from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22443,"byte_end":22489,"line_start":307,"line_end":307,"column_start":5,"column_end":51}},{"value":"/ let osstr = wstr.to_os_string();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22494,"byte_end":22530,"line_start":308,"line_end":308,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22535,"byte_end":22538,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(osstr, OsString::from(s));","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22543,"byte_end":22584,"line_start":310,"line_end":310,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22589,"byte_end":22596,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22601,"byte_end":22624,"line_start":312,"line_end":312,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23333,"byte_end":23342,"line_start":336,"line_end":336,"column_start":12,"column_end":21},"name":"to_string","qualname":"<UCStr<u16>>::to_string","value":"pub fn to_string(&Self) -> Result<String, FromUtf16Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String` if it contains valid UTF-16 data.","sig":null,"attributes":[{"value":"/ Copies the wide string to a `String` if it contains valid UTF-16 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22746,"byte_end":22820,"line_start":317,"line_end":317,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22825,"byte_end":22828,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22833,"byte_end":22847,"line_start":319,"line_end":319,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22852,"byte_end":22855,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the string contains any invalid UTF-16 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22860,"byte_end":22928,"line_start":321,"line_end":321,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22933,"byte_end":22936,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22941,"byte_end":22955,"line_start":323,"line_end":323,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22960,"byte_end":22963,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22968,"byte_end":22979,"line_start":325,"line_end":325,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":22984,"byte_end":23015,"line_start":326,"line_end":326,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23020,"byte_end":23043,"line_start":327,"line_end":327,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23048,"byte_end":23091,"line_start":328,"line_end":328,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23096,"byte_end":23144,"line_start":329,"line_end":329,"column_start":5,"column_end":53}},{"value":"/ // Create a regular string from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23149,"byte_end":23200,"line_start":330,"line_end":330,"column_start":5,"column_end":56}},{"value":"/ let s2 = wstr.to_string().unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23205,"byte_end":23244,"line_start":331,"line_end":331,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23249,"byte_end":23252,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s2, s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23257,"byte_end":23279,"line_start":333,"line_end":333,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23284,"byte_end":23291,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23296,"byte_end":23321,"line_start":335,"line_end":335,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23974,"byte_end":23989,"line_start":357,"line_end":357,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<UCStr<u16>>::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String`.","sig":null,"attributes":[{"value":"/ Copies the wide string to a `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23441,"byte_end":23482,"line_start":340,"line_end":340,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23487,"byte_end":23490,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23495,"byte_end":23572,"line_start":342,"line_end":342,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23577,"byte_end":23580,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23585,"byte_end":23599,"line_start":344,"line_end":344,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23604,"byte_end":23607,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23612,"byte_end":23623,"line_start":346,"line_end":346,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23628,"byte_end":23659,"line_start":347,"line_end":347,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23664,"byte_end":23687,"line_start":348,"line_end":348,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23692,"byte_end":23735,"line_start":349,"line_end":349,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23740,"byte_end":23788,"line_start":350,"line_end":350,"column_start":5,"column_end":53}},{"value":"/ // Create a regular string from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23793,"byte_end":23844,"line_start":351,"line_end":351,"column_start":5,"column_end":56}},{"value":"/ let s2 = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23849,"byte_end":23885,"line_start":352,"line_end":352,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23890,"byte_end":23893,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s2, s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23898,"byte_end":23920,"line_start":354,"line_end":354,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23925,"byte_end":23932,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":23937,"byte_end":23962,"line_start":356,"line_end":356,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25077,"byte_end":25094,"line_start":385,"line_end":385,"column_start":19,"column_end":36},"name":"from_char_ptr_str","qualname":"<UCStr<u32>>::from_char_ptr_str","value":"pub unsafe fn from_char_ptr_str<'a>(*const char) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32Str` from a `char` nul-terminated string pointer.","sig":null,"attributes":[{"value":"/ Constructs a `U32Str` from a `char` nul-terminated string pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24090,"byte_end":24160,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24165,"byte_end":24168,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ This will scan for nul values beginning with `p`. The first nul value will be used as the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24173,"byte_end":24266,"line_start":365,"line_end":365,"column_start":5,"column_end":98}},{"value":"/ nul terminator for the string, similar to how libc string functions such as `strlen` work.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24271,"byte_end":24365,"line_start":366,"line_end":366,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24370,"byte_end":24373,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24378,"byte_end":24390,"line_start":368,"line_end":368,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24395,"byte_end":24398,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid or has a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24403,"byte_end":24496,"line_start":370,"line_end":370,"column_start":5,"column_end":98}},{"value":"/ nul terminator, and the function could scan past the underlying buffer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24501,"byte_end":24576,"line_start":371,"line_end":371,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24581,"byte_end":24584,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ `p` must be non-null.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24589,"byte_end":24614,"line_start":373,"line_end":373,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24619,"byte_end":24622,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24627,"byte_end":24639,"line_start":375,"line_end":375,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24644,"byte_end":24647,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ This function panics if `p` is null.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24652,"byte_end":24692,"line_start":377,"line_end":377,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24697,"byte_end":24700,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ # Caveat","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24705,"byte_end":24717,"line_start":379,"line_end":379,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24722,"byte_end":24725,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ The lifetime for the returned string is inferred from its usage. To prevent accidental","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24730,"byte_end":24820,"line_start":381,"line_end":381,"column_start":5,"column_end":95}},{"value":"/ misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24825,"byte_end":24915,"line_start":382,"line_end":382,"column_start":5,"column_end":95}},{"value":"/ context, such as by providing a helper function taking the lifetime of a host value for the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24920,"byte_end":25015,"line_start":383,"line_end":383,"column_start":5,"column_end":100}},{"value":"/ string, or by explicit annotation.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25020,"byte_end":25058,"line_start":384,"line_end":384,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26451,"byte_end":26473,"line_start":416,"line_end":416,"column_start":19,"column_end":41},"name":"from_char_ptr_with_nul","qualname":"<UCStr<u32>>::from_char_ptr_with_nul","value":"pub unsafe fn from_char_ptr_with_nul<'a>(*const char, usize) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32Str` from a `char` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a `U32Str` from a `char` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25185,"byte_end":25246,"line_start":389,"line_end":389,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25251,"byte_end":25254,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `char` elements, **not** the number of bytes, and does","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25259,"byte_end":25353,"line_start":391,"line_end":391,"column_start":5,"column_end":99}},{"value":"/ **not** include the nul terminator of the string. Thus, a `len` of 0 is valid and means that","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25358,"byte_end":25454,"line_start":392,"line_end":392,"column_start":5,"column_end":101}},{"value":"/ `p` is a pointer directly to the nul terminator of the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25459,"byte_end":25525,"line_start":393,"line_end":393,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25530,"byte_end":25533,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25538,"byte_end":25550,"line_start":395,"line_end":395,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25555,"byte_end":25558,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25563,"byte_end":25657,"line_start":397,"line_end":397,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25662,"byte_end":25675,"line_start":398,"line_end":398,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25680,"byte_end":25683,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ `p` must be non-null, even for zero `len`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25688,"byte_end":25734,"line_start":400,"line_end":400,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25739,"byte_end":25742,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ The interior values of the pointer are not scanned for nul. Any interior nul values will","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25747,"byte_end":25839,"line_start":402,"line_end":402,"column_start":5,"column_end":97}},{"value":"/ result in an invalid `U32CStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25844,"byte_end":25879,"line_start":403,"line_end":403,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25884,"byte_end":25887,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25892,"byte_end":25904,"line_start":405,"line_end":405,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25909,"byte_end":25912,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This function panics if `p` is null or if a nul value is not found at offset `len` of `p`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":25917,"byte_end":26011,"line_start":407,"line_end":407,"column_start":5,"column_end":99}},{"value":"/ Only pointers with a nul terminator are valid.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26016,"byte_end":26066,"line_start":408,"line_end":408,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26071,"byte_end":26074,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Caveat","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26079,"byte_end":26091,"line_start":410,"line_end":410,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26096,"byte_end":26099,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ The lifetime for the returned string is inferred from its usage. To prevent accidental","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26104,"byte_end":26194,"line_start":412,"line_end":412,"column_start":5,"column_end":95}},{"value":"/ misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26199,"byte_end":26289,"line_start":413,"line_end":413,"column_start":5,"column_end":95}},{"value":"/ context, such as by providing a helper function taking the lifetime of a host value for the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26294,"byte_end":26389,"line_start":414,"line_end":414,"column_start":5,"column_end":100}},{"value":"/ string, or by explicit annotation.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26394,"byte_end":26432,"line_start":415,"line_end":415,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26983,"byte_end":27007,"line_start":428,"line_end":428,"column_start":12,"column_end":36},"name":"from_char_slice_with_nul","qualname":"<UCStr<u32>>::from_char_slice_with_nul","value":"pub fn from_char_slice_with_nul(&[char])\n-> Result<&Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CStr` from a slice of `char` values that has a nul terminator.","sig":null,"attributes":[{"value":"/ Constructs a `U32CStr` from a slice of `char` values that has a nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26586,"byte_end":26669,"line_start":420,"line_end":420,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26674,"byte_end":26677,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ The slice will be scanned for nul values. When a nul value is found, it is treated as the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26682,"byte_end":26775,"line_start":422,"line_end":422,"column_start":5,"column_end":98}},{"value":"/ terminator for the string, and the `U32CStr` slice will be truncated to that nul.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26780,"byte_end":26865,"line_start":423,"line_end":423,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26870,"byte_end":26873,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Failure","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26878,"byte_end":26891,"line_start":425,"line_end":425,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26896,"byte_end":26899,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ If there are no no nul values in `slice`, an error is returned.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":26904,"byte_end":26971,"line_start":427,"line_end":427,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27582,"byte_end":27616,"line_start":441,"line_end":441,"column_start":19,"column_end":53},"name":"from_char_slice_with_nul_unchecked","qualname":"<UCStr<u32>>::from_char_slice_with_nul_unchecked","value":"pub unsafe fn from_char_slice_with_nul_unchecked(&[char]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CStr` from a slice of `char` values that has a nul terminator. No\n checking for nul values is performed.","sig":null,"attributes":[{"value":"/ Constructs a `U32CStr` from a slice of `char` values that has a nul terminator. No","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27191,"byte_end":27277,"line_start":433,"line_end":433,"column_start":5,"column_end":91}},{"value":"/ checking for nul values is performed.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27282,"byte_end":27323,"line_start":434,"line_end":434,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27328,"byte_end":27331,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27336,"byte_end":27348,"line_start":436,"line_end":436,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27353,"byte_end":27356,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it can lead to invalid `U32CStr` values when `slice`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27361,"byte_end":27449,"line_start":438,"line_end":438,"column_start":5,"column_end":93}},{"value":"/ is missing a terminating nul value or there are non-terminating interior nul values","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27454,"byte_end":27541,"line_start":439,"line_end":439,"column_start":5,"column_end":92}},{"value":"/ in the slice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27546,"byte_end":27563,"line_start":440,"line_end":440,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28523,"byte_end":28535,"line_start":466,"line_end":466,"column_start":12,"column_end":24},"name":"to_os_string","qualname":"<UCStr<u32>>::to_os_string","value":"pub fn to_os_string(&Self) -> std::ffi::OsString","parent":null,"children":[],"decl_id":null,"docs":" Decodes a wide string to an owned `OsString`.","sig":null,"attributes":[{"value":"/ Decodes a wide string to an owned `OsString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27769,"byte_end":27818,"line_start":446,"line_end":446,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27823,"byte_end":27826,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ This makes a string copy of the `U32CStr`. Since `U32CStr` makes no guarantees that it is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27831,"byte_end":27924,"line_start":448,"line_end":448,"column_start":5,"column_end":98}},{"value":"/ valid UTF-32, there is no guarantee that the resulting `OsString` will be valid data. The","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":27929,"byte_end":28022,"line_start":449,"line_end":449,"column_start":5,"column_end":98}},{"value":"/ `OsString` will **not** have a nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28027,"byte_end":28077,"line_start":450,"line_end":450,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28082,"byte_end":28085,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28090,"byte_end":28104,"line_start":452,"line_end":452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28109,"byte_end":28112,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28117,"byte_end":28128,"line_start":454,"line_end":454,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28133,"byte_end":28164,"line_start":455,"line_end":455,"column_start":5,"column_end":36}},{"value":"/ use std::ffi::OsString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28169,"byte_end":28196,"line_start":456,"line_end":456,"column_start":5,"column_end":32}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28201,"byte_end":28224,"line_start":457,"line_end":457,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28229,"byte_end":28272,"line_start":458,"line_end":458,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28277,"byte_end":28325,"line_start":459,"line_end":459,"column_start":5,"column_end":53}},{"value":"/ // Create an OsString from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28330,"byte_end":28376,"line_start":460,"line_end":460,"column_start":5,"column_end":51}},{"value":"/ let osstr = wstr.to_os_string();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28381,"byte_end":28417,"line_start":461,"line_end":461,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28422,"byte_end":28425,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(osstr, OsString::from(s));","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28430,"byte_end":28471,"line_start":463,"line_end":463,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28476,"byte_end":28483,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28488,"byte_end":28511,"line_start":465,"line_end":465,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29206,"byte_end":29215,"line_start":489,"line_end":489,"column_start":12,"column_end":21},"name":"to_string","qualname":"<UCStr<u32>>::to_string","value":"pub fn to_string(&Self) -> Result<String, crate::FromUtf32Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String` if it contains valid UTF-32 data.","sig":null,"attributes":[{"value":"/ Copies the wide string to a `String` if it contains valid UTF-32 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28619,"byte_end":28693,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28698,"byte_end":28701,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28706,"byte_end":28720,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28725,"byte_end":28728,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the string contains any invalid UTF-32 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28733,"byte_end":28801,"line_start":474,"line_end":474,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28806,"byte_end":28809,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28814,"byte_end":28828,"line_start":476,"line_end":476,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28833,"byte_end":28836,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28841,"byte_end":28852,"line_start":478,"line_end":478,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28857,"byte_end":28888,"line_start":479,"line_end":479,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28893,"byte_end":28916,"line_start":480,"line_end":480,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28921,"byte_end":28964,"line_start":481,"line_end":481,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":28969,"byte_end":29017,"line_start":482,"line_end":482,"column_start":5,"column_end":53}},{"value":"/ // Create a regular string from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29022,"byte_end":29073,"line_start":483,"line_end":483,"column_start":5,"column_end":56}},{"value":"/ let s2 = wstr.to_string().unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29078,"byte_end":29117,"line_start":484,"line_end":484,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29122,"byte_end":29125,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s2, s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29130,"byte_end":29152,"line_start":486,"line_end":486,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29157,"byte_end":29164,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29169,"byte_end":29194,"line_start":488,"line_end":488,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29848,"byte_end":29863,"line_start":510,"line_end":510,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<UCStr<u32>>::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String`.","sig":null,"attributes":[{"value":"/ Copies the wide string to a `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29315,"byte_end":29356,"line_start":493,"line_end":493,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29361,"byte_end":29364,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29369,"byte_end":29446,"line_start":495,"line_end":495,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29451,"byte_end":29454,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29459,"byte_end":29473,"line_start":497,"line_end":497,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29478,"byte_end":29481,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29486,"byte_end":29497,"line_start":499,"line_end":499,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29502,"byte_end":29533,"line_start":500,"line_end":500,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29538,"byte_end":29561,"line_start":501,"line_end":501,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29566,"byte_end":29609,"line_start":502,"line_end":502,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29614,"byte_end":29662,"line_start":503,"line_end":503,"column_start":5,"column_end":53}},{"value":"/ // Create a regular string from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29667,"byte_end":29718,"line_start":504,"line_end":504,"column_start":5,"column_end":56}},{"value":"/ let s2 = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29723,"byte_end":29759,"line_start":505,"line_end":505,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29764,"byte_end":29767,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s2, s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29772,"byte_end":29794,"line_start":507,"line_end":507,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29799,"byte_end":29806,"line_start":508,"line_end":508,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29811,"byte_end":29836,"line_start":509,"line_end":509,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30548,"byte_end":30555,"line_start":524,"line_end":524,"column_start":10,"column_end":17},"name":"U16CStr","qualname":"::ucstr::U16CStr","value":"UCStr<u16>","parent":null,"children":[],"decl_id":null,"docs":" C-style wide string reference for `U16CString`.","sig":null,"attributes":[{"value":"/ C-style wide string reference for `U16CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29936,"byte_end":29987,"line_start":515,"line_end":515,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29988,"byte_end":29991,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ `U16CStr` is aware of nul values. Unless unchecked conversions are used, all `U16CStr`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":29992,"byte_end":30082,"line_start":517,"line_end":517,"column_start":1,"column_end":91}},{"value":"/ strings end with a nul-terminator in the underlying buffer and contain no internal nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30083,"byte_end":30181,"line_start":518,"line_end":518,"column_start":1,"column_end":99}},{"value":"/ The strings may still contain invalid or ill-formed UTF-16 data. These strings are intended to","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30182,"byte_end":30280,"line_start":519,"line_end":519,"column_start":1,"column_end":99}},{"value":"/ be used with FFI functions such as Windows API that may require nul-terminated strings.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30281,"byte_end":30372,"line_start":520,"line_end":520,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30373,"byte_end":30376,"line_start":521,"line_end":521,"column_start":1,"column_end":4}},{"value":"/ `U16CStr` can be converted to and from many other string types, including `U16String`,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30377,"byte_end":30467,"line_start":522,"line_end":522,"column_start":1,"column_end":91}},{"value":"/ `OsString`, and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30468,"byte_end":30538,"line_start":523,"line_end":523,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":31183,"byte_end":31190,"line_start":535,"line_end":535,"column_start":10,"column_end":17},"name":"U32CStr","qualname":"::ucstr::U32CStr","value":"UCStr<u32>","parent":null,"children":[],"decl_id":null,"docs":" C-style wide string reference for `U32CString`.","sig":null,"attributes":[{"value":"/ C-style wide string reference for `U32CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30571,"byte_end":30622,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30623,"byte_end":30626,"line_start":527,"line_end":527,"column_start":1,"column_end":4}},{"value":"/ `U32CStr` is aware of nul values. Unless unchecked conversions are used, all `U32CStr`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30627,"byte_end":30717,"line_start":528,"line_end":528,"column_start":1,"column_end":91}},{"value":"/ strings end with a nul-terminator in the underlying buffer and contain no internal nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30718,"byte_end":30816,"line_start":529,"line_end":529,"column_start":1,"column_end":99}},{"value":"/ The strings may still contain invalid or ill-formed UTF-32 data. These strings are intended to","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30817,"byte_end":30915,"line_start":530,"line_end":530,"column_start":1,"column_end":99}},{"value":"/ be used with FFI functions such as Windows API that may require nul-terminated strings.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":30916,"byte_end":31007,"line_start":531,"line_end":531,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":31008,"byte_end":31011,"line_start":532,"line_end":532,"column_start":1,"column_end":4}},{"value":"/ `U32CStr` can be converted to and from many other string types, including `U32String`,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":31012,"byte_end":31102,"line_start":533,"line_end":533,"column_start":1,"column_end":91}},{"value":"/ `OsString`, and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":31103,"byte_end":31173,"line_start":534,"line_end":534,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":31331,"byte_end":31339,"line_start":538,"line_end":538,"column_start":10,"column_end":18},"name":"WideCStr","qualname":"::ucstr::WideCStr","value":"UCStr<WideChar>","parent":null,"children":[],"decl_id":null,"docs":" Alias for `U16CStr` or `U32CStr` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"/ Alias for `U16CStr` or `U32CStr` depending on platform. Intended to match typical C `wchar_t` size on platform.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":31206,"byte_end":31321,"line_start":537,"line_end":537,"column_start":1,"column_end":116}}]},{"kind":"Struct","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33412,"byte_end":33420,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"UCString","qualname":"::ucstring::UCString","value":"UCString {  }","parent":null,"children":[{"krate":0,"index":704}],"decl_id":null,"docs":" An owned, mutable C-style \"wide\" string for FFI that is nul-aware and nul-terminated.","sig":null,"attributes":[{"value":"/ An owned, mutable C-style \"wide\" string for FFI that is nul-aware and nul-terminated.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":31791,"byte_end":31880,"line_start":21,"line_end":21,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":31881,"byte_end":31884,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ `UCString` is aware of nul values. Unless unchecked conversions are used, all `UCString`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":31885,"byte_end":31977,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/ strings end with a nul-terminator in the underlying buffer and contain no internal nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":31978,"byte_end":32076,"line_start":24,"line_end":24,"column_start":1,"column_end":99}},{"value":"/ The strings may still contain invalid or ill-formed UTF-16 or UTF-32 data. These strings are","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32077,"byte_end":32173,"line_start":25,"line_end":25,"column_start":1,"column_end":97}},{"value":"/ intended to be used with FFI functions such as Windows API that may require nul-terminated","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32174,"byte_end":32268,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/ strings.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32269,"byte_end":32281,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32282,"byte_end":32285,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `UCString` can be converted to and from many other string types, including `UString`,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32286,"byte_end":32375,"line_start":29,"line_end":29,"column_start":1,"column_end":90}},{"value":"/ `OsString`, and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32376,"byte_end":32446,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32447,"byte_end":32450,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Please prefer using the type aliases `U16CString` or `U32CString` or `WideCString` to using","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32451,"byte_end":32546,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ this type directly.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32547,"byte_end":32570,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32571,"byte_end":32574,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32575,"byte_end":32589,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32590,"byte_end":32593,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The following example constructs a `U16CString` and shows how to convert a `U16CString` to a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32594,"byte_end":32690,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"/ regular Rust `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32691,"byte_end":32717,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32718,"byte_end":32721,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32722,"byte_end":32733,"line_start":40,"line_end":40,"column_start":1,"column_end":12}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32734,"byte_end":32765,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/ let s = \"Test\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32766,"byte_end":32785,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/ // Create a wide string from the rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32786,"byte_end":32834,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ let wstr = U16CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32835,"byte_end":32883,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/ // Convert back to a rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32884,"byte_end":32920,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ let rust_str = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32921,"byte_end":32963,"line_start":46,"line_end":46,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(rust_str, \"Test\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32964,"byte_end":32997,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":32998,"byte_end":33005,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33006,"byte_end":33009,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The same example using `U32CString`:","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33010,"byte_end":33050,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33051,"byte_end":33054,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33055,"byte_end":33066,"line_start":52,"line_end":52,"column_start":1,"column_end":12}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33067,"byte_end":33098,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/ let s = \"Test\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33099,"byte_end":33118,"line_start":54,"line_end":54,"column_start":1,"column_end":20}},{"value":"/ // Create a wide string from the rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33119,"byte_end":33167,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/ let wstr = U32CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33168,"byte_end":33216,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ // Convert back to a rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33217,"byte_end":33253,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ let rust_str = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33254,"byte_end":33296,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(rust_str, \"Test\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33297,"byte_end":33330,"line_start":59,"line_end":59,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33331,"byte_end":33338,"line_start":60,"line_end":60,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33753,"byte_end":33761,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"NulError","qualname":"::ucstring::NulError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error returned from `UCString` to indicate that an invalid nul value was found.","sig":null,"attributes":[{"value":"/ An error returned from `UCString` to indicate that an invalid nul value was found.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33468,"byte_end":33554,"line_start":66,"line_end":66,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33555,"byte_end":33558,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The error indicates the position in the vector where the nul value was found, as well as","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33559,"byte_end":33651,"line_start":68,"line_end":68,"column_start":1,"column_end":93}},{"value":"/ returning the ownership of the invalid vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33652,"byte_end":33702,"line_start":69,"line_end":69,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35651,"byte_end":35654,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<UCString<C>>::new","value":"pub fn new<impl Into<Vec<C>>: Into<Vec<C>>>(impl Into<Vec<C>>)\n-> Result<Self, NulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from a container of wide character data.","sig":null,"attributes":[{"value":"/ Constructs a `UCString` from a container of wide character data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33822,"byte_end":33890,"line_start":74,"line_end":74,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33895,"byte_end":33898,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This method will consume the provided data and use the underlying elements to construct a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33903,"byte_end":33996,"line_start":76,"line_end":76,"column_start":5,"column_end":98}},{"value":"/ new string. The data will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34001,"byte_end":34065,"line_start":77,"line_end":77,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34070,"byte_end":34073,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34078,"byte_end":34092,"line_start":79,"line_end":79,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34097,"byte_end":34100,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34105,"byte_end":34177,"line_start":81,"line_end":81,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain the `Vec` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34182,"byte_end":34269,"line_start":82,"line_end":82,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34274,"byte_end":34277,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34282,"byte_end":34296,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34301,"byte_end":34304,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34309,"byte_end":34320,"line_start":86,"line_end":86,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34325,"byte_end":34356,"line_start":87,"line_end":87,"column_start":5,"column_end":36}},{"value":"/ let v = vec![84u16, 104u16, 101u16]; // 'T' 'h' 'e'","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34361,"byte_end":34416,"line_start":88,"line_end":88,"column_start":5,"column_end":60}},{"value":"/ # let cloned = v.clone();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34421,"byte_end":34450,"line_start":89,"line_end":89,"column_start":5,"column_end":34}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34455,"byte_end":34498,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U16CString::new(v).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34503,"byte_end":34547,"line_start":91,"line_end":91,"column_start":5,"column_end":49}},{"value":"/ # assert_eq!(wcstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34552,"byte_end":34595,"line_start":92,"line_end":92,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34600,"byte_end":34607,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34612,"byte_end":34615,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34620,"byte_end":34631,"line_start":95,"line_end":95,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34636,"byte_end":34667,"line_start":96,"line_end":96,"column_start":5,"column_end":36}},{"value":"/ let v = vec![84u32, 104u32, 101u32]; // 'T' 'h' 'e'","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34672,"byte_end":34727,"line_start":97,"line_end":97,"column_start":5,"column_end":60}},{"value":"/ # let cloned = v.clone();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34732,"byte_end":34761,"line_start":98,"line_end":98,"column_start":5,"column_end":34}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34766,"byte_end":34809,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U32CString::new(v).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34814,"byte_end":34858,"line_start":100,"line_end":100,"column_start":5,"column_end":49}},{"value":"/ # assert_eq!(wcstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34863,"byte_end":34906,"line_start":101,"line_end":101,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34911,"byte_end":34918,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34923,"byte_end":34926,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":34931,"byte_end":35005,"line_start":104,"line_end":104,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35010,"byte_end":35013,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35018,"byte_end":35029,"line_start":106,"line_end":106,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35034,"byte_end":35065,"line_start":107,"line_end":107,"column_start":5,"column_end":36}},{"value":"/ let v = vec![84u16, 0u16, 104u16, 101u16]; // 'T' NUL 'h' 'e'","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35070,"byte_end":35135,"line_start":108,"line_end":108,"column_start":5,"column_end":70}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35140,"byte_end":35183,"line_start":109,"line_end":109,"column_start":5,"column_end":48}},{"value":"/ let res = U16CString::new(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35188,"byte_end":35221,"line_start":110,"line_end":110,"column_start":5,"column_end":38}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35226,"byte_end":35252,"line_start":111,"line_end":111,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(res.err().unwrap().nul_position(), 1);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35257,"byte_end":35310,"line_start":112,"line_end":112,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35315,"byte_end":35322,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35327,"byte_end":35330,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35335,"byte_end":35346,"line_start":115,"line_end":115,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35351,"byte_end":35382,"line_start":116,"line_end":116,"column_start":5,"column_end":36}},{"value":"/ let v = vec![84u32, 0u32, 104u32, 101u32]; // 'T' NUL 'h' 'e'","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35387,"byte_end":35452,"line_start":117,"line_end":117,"column_start":5,"column_end":70}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35457,"byte_end":35500,"line_start":118,"line_end":118,"column_start":5,"column_end":48}},{"value":"/ let res = U32CString::new(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35505,"byte_end":35538,"line_start":119,"line_end":119,"column_start":5,"column_end":38}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35543,"byte_end":35569,"line_start":120,"line_end":120,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(res.err().unwrap().nul_position(), 1);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35574,"byte_end":35627,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35632,"byte_end":35639,"line_start":122,"line_end":122,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37783,"byte_end":37800,"line_start":179,"line_end":179,"column_start":12,"column_end":29},"name":"from_vec_with_nul","qualname":"<UCString<C>>::from_vec_with_nul","value":"pub fn from_vec_with_nul<impl Into<Vec<C>>: Into<Vec<C>>>(impl Into<Vec<C>>)\n-> Result<Self, MissingNulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from a nul-terminated container of UTF-16 or UTF-32 data.","sig":null,"attributes":[{"value":"/ Constructs a `UCString` from a nul-terminated container of UTF-16 or UTF-32 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":35961,"byte_end":36046,"line_start":132,"line_end":132,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36051,"byte_end":36054,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This method will consume the provided data and use the underlying elements to construct a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36059,"byte_end":36152,"line_start":134,"line_end":134,"column_start":5,"column_end":98}},{"value":"/ new string. The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36157,"byte_end":36239,"line_start":135,"line_end":135,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36244,"byte_end":36247,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36252,"byte_end":36266,"line_start":137,"line_end":137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36271,"byte_end":36274,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36279,"byte_end":36369,"line_start":139,"line_end":139,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36374,"byte_end":36437,"line_start":140,"line_end":140,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36442,"byte_end":36445,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36450,"byte_end":36464,"line_start":142,"line_end":142,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36469,"byte_end":36472,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36477,"byte_end":36488,"line_start":144,"line_end":144,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36493,"byte_end":36524,"line_start":145,"line_end":145,"column_start":5,"column_end":36}},{"value":"/ let v = vec![84u16, 104u16, 101u16, 0u16]; // 'T' 'h' 'e' NUL","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36529,"byte_end":36594,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/ # let cloned = v[..3].to_owned();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36599,"byte_end":36636,"line_start":147,"line_end":147,"column_start":5,"column_end":42}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36641,"byte_end":36684,"line_start":148,"line_end":148,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U16CString::from_vec_with_nul(v).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36689,"byte_end":36747,"line_start":149,"line_end":149,"column_start":5,"column_end":63}},{"value":"/ # assert_eq!(wcstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36752,"byte_end":36795,"line_start":150,"line_end":150,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36800,"byte_end":36807,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36812,"byte_end":36815,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36820,"byte_end":36831,"line_start":153,"line_end":153,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36836,"byte_end":36867,"line_start":154,"line_end":154,"column_start":5,"column_end":36}},{"value":"/ let v = vec![84u32, 104u32, 101u32, 0u32]; // 'T' 'h' 'e' NUL","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36872,"byte_end":36937,"line_start":155,"line_end":155,"column_start":5,"column_end":70}},{"value":"/ # let cloned = v[..3].to_owned();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36942,"byte_end":36979,"line_start":156,"line_end":156,"column_start":5,"column_end":42}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":36984,"byte_end":37027,"line_start":157,"line_end":157,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U32CString::from_vec_with_nul(v).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37032,"byte_end":37090,"line_start":158,"line_end":158,"column_start":5,"column_end":63}},{"value":"/ # assert_eq!(wcstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37095,"byte_end":37138,"line_start":159,"line_end":159,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37143,"byte_end":37150,"line_start":160,"line_end":160,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37155,"byte_end":37158,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from missing nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37163,"byte_end":37245,"line_start":162,"line_end":162,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37250,"byte_end":37253,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37258,"byte_end":37269,"line_start":164,"line_end":164,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37274,"byte_end":37305,"line_start":165,"line_end":165,"column_start":5,"column_end":36}},{"value":"/ let v = vec![84u16, 104u16, 101u16]; // 'T' 'h' 'e'","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37310,"byte_end":37365,"line_start":166,"line_end":166,"column_start":5,"column_end":60}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37370,"byte_end":37413,"line_start":167,"line_end":167,"column_start":5,"column_end":48}},{"value":"/ let res = U16CString::from_vec_with_nul(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37418,"byte_end":37465,"line_start":168,"line_end":168,"column_start":5,"column_end":52}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37470,"byte_end":37496,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37501,"byte_end":37508,"line_start":170,"line_end":170,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37513,"byte_end":37516,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37521,"byte_end":37532,"line_start":172,"line_end":172,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37537,"byte_end":37568,"line_start":173,"line_end":173,"column_start":5,"column_end":36}},{"value":"/ let v = vec![84u32, 104u32, 101u32]; // 'T' 'h' 'e'","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37573,"byte_end":37628,"line_start":174,"line_end":174,"column_start":5,"column_end":60}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37633,"byte_end":37676,"line_start":175,"line_end":175,"column_start":5,"column_end":48}},{"value":"/ let res = U32CString::from_vec_with_nul(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37681,"byte_end":37728,"line_start":176,"line_end":176,"column_start":5,"column_end":52}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37733,"byte_end":37759,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":37764,"byte_end":37771,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38671,"byte_end":38689,"line_start":201,"line_end":201,"column_start":19,"column_end":37},"name":"from_vec_unchecked","qualname":"<UCString<C>>::from_vec_unchecked","value":"pub unsafe fn from_vec_unchecked<impl Into<Vec<C>>: Into<Vec<C>>>(impl Into<Vec<C>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `UCString` from a vector without checking for interior nul values.","sig":null,"attributes":[{"value":"/ Creates a `UCString` from a vector without checking for interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38213,"byte_end":38293,"line_start":191,"line_end":191,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38298,"byte_end":38301,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ A terminating nul value will be appended if the vector does not already have a terminating","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38306,"byte_end":38400,"line_start":193,"line_end":193,"column_start":5,"column_end":99}},{"value":"/ nul.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38405,"byte_end":38413,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38418,"byte_end":38421,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38426,"byte_end":38438,"line_start":196,"line_end":196,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38443,"byte_end":38446,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `new` except that no runtime assertion is made that `v`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38451,"byte_end":38539,"line_start":198,"line_end":198,"column_start":5,"column_end":93}},{"value":"/ contains no nul values. Providing a vector with nul values will result in an invalid","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38544,"byte_end":38632,"line_start":199,"line_end":199,"column_start":5,"column_end":93}},{"value":"/ `UCString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38637,"byte_end":38652,"line_start":200,"line_end":200,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39411,"byte_end":39438,"line_start":219,"line_end":219,"column_start":19,"column_end":46},"name":"from_vec_with_nul_unchecked","qualname":"<UCString<C>>::from_vec_with_nul_unchecked","value":"pub unsafe fn from_vec_with_nul_unchecked<impl Into<Vec<C>>: Into<Vec<C>>>(impl Into<Vec<C>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `UCString` from a vector that should have a nul terminator, without checking\n for any nul values.","sig":null,"attributes":[{"value":"/ Creates a `UCString` from a vector that should have a nul terminator, without checking","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":38977,"byte_end":39067,"line_start":211,"line_end":211,"column_start":5,"column_end":95}},{"value":"/ for any nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39072,"byte_end":39095,"line_start":212,"line_end":212,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39100,"byte_end":39103,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39108,"byte_end":39120,"line_start":214,"line_end":214,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39125,"byte_end":39128,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_vec_with_nul` except that no runtime assertion is made","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39133,"byte_end":39226,"line_start":216,"line_end":216,"column_start":5,"column_end":98}},{"value":"/ that `v` contains no nul values. Providing a vector with interior nul values or without a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39231,"byte_end":39324,"line_start":217,"line_end":217,"column_start":5,"column_end":98}},{"value":"/ terminating nul value will result in an invalid `UCString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39329,"byte_end":39392,"line_start":218,"line_end":218,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39916,"byte_end":39925,"line_start":233,"line_end":233,"column_start":12,"column_end":21},"name":"from_ustr","qualname":"<UCString<C>>::from_ustr","value":"pub fn from_ustr<impl AsRef<UStr<C>>: AsRef<UStr<C>>>(impl AsRef<UStr<C>>)\n-> Result<Self, NulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from anything that can be converted to a `UStr`.","sig":null,"attributes":[{"value":"/ Constructs a `UCString` from anything that can be converted to a `UStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39559,"byte_end":39635,"line_start":225,"line_end":225,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39640,"byte_end":39643,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ The string will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39648,"byte_end":39702,"line_start":227,"line_end":227,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39707,"byte_end":39710,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39715,"byte_end":39729,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39734,"byte_end":39737,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39742,"byte_end":39814,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain a `Vec` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":39819,"byte_end":39904,"line_start":232,"line_end":232,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40429,"byte_end":40448,"line_start":245,"line_end":245,"column_start":19,"column_end":38},"name":"from_ustr_unchecked","qualname":"<UCString<C>>::from_ustr_unchecked","value":"pub unsafe fn from_ustr_unchecked<impl AsRef<UStr<C>>: AsRef<UStr<C>>>(impl AsRef<UStr<C>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from anything that can be converted to a `UStr`, without\n scanning for invalid nul values.","sig":null,"attributes":[{"value":"/ Constructs a `UCString` from anything that can be converted to a `UStr`, without","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40037,"byte_end":40121,"line_start":237,"line_end":237,"column_start":5,"column_end":89}},{"value":"/ scanning for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40126,"byte_end":40162,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40167,"byte_end":40170,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40175,"byte_end":40187,"line_start":240,"line_end":240,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40192,"byte_end":40195,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_u16_str` except that no runtime assertion is made that","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40200,"byte_end":40293,"line_start":242,"line_end":242,"column_start":5,"column_end":98}},{"value":"/ `s` contains no nul values. Providing a string with nul values will result in an invalid","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40298,"byte_end":40390,"line_start":243,"line_end":243,"column_start":5,"column_end":97}},{"value":"/ `UCString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40395,"byte_end":40410,"line_start":244,"line_end":244,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40953,"byte_end":40971,"line_start":258,"line_end":258,"column_start":12,"column_end":30},"name":"from_ustr_with_nul","qualname":"<UCString<C>>::from_ustr_with_nul","value":"pub fn from_ustr_with_nul<impl AsRef<UStr<C>>: AsRef<UStr<C>>>(impl AsRef<UStr<C>>)\n-> Result<Self, MissingNulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from anything that can be converted to a `UStr` with a nul\n terminator.","sig":null,"attributes":[{"value":"/ Constructs a `UCString` from anything that can be converted to a `UStr` with a nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40554,"byte_end":40640,"line_start":249,"line_end":249,"column_start":5,"column_end":91}},{"value":"/ terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40645,"byte_end":40660,"line_start":250,"line_end":250,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40665,"byte_end":40668,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40673,"byte_end":40743,"line_start":252,"line_end":252,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40748,"byte_end":40751,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40756,"byte_end":40770,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40775,"byte_end":40778,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40783,"byte_end":40873,"line_start":256,"line_end":256,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":40878,"byte_end":40941,"line_start":257,"line_end":257,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41595,"byte_end":41623,"line_start":270,"line_end":270,"column_start":19,"column_end":47},"name":"from_ustr_with_nul_unchecked","qualname":"<UCString<C>>::from_ustr_with_nul_unchecked","value":"pub unsafe fn from_ustr_with_nul_unchecked<impl AsRef<UStr<C>>: AsRef<UStr<C>>>(impl AsRef<UStr<C>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from anything that can be converted to a `UStr` with a nul\n terminator, without checking the string for any invalid interior nul values.","sig":null,"attributes":[{"value":"/ Constructs a `UCString` from anything that can be converted to a `UStr` with a nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41104,"byte_end":41190,"line_start":262,"line_end":262,"column_start":5,"column_end":91}},{"value":"/ terminator, without checking the string for any invalid interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41195,"byte_end":41275,"line_start":263,"line_end":263,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41280,"byte_end":41283,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41288,"byte_end":41300,"line_start":265,"line_end":265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41305,"byte_end":41308,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_u16_str_with_nul` except that no runtime assertion is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41313,"byte_end":41405,"line_start":267,"line_end":267,"column_start":5,"column_end":97}},{"value":"/ made that `s` contains no nul values. Providing a vector with interior nul values or","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41410,"byte_end":41498,"line_start":268,"line_end":268,"column_start":5,"column_end":93}},{"value":"/ without a terminating nul value will result in an invalid `UCString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41503,"byte_end":41576,"line_start":269,"line_end":269,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42731,"byte_end":42743,"line_start":296,"line_end":296,"column_start":19,"column_end":31},"name":"from_ptr_str","qualname":"<UCString<C>>::from_ptr_str","value":"pub unsafe fn from_ptr_str(*const C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `UCString` copied from a nul-terminated string pointer.","sig":null,"attributes":[{"value":"/ Constructs a new `UCString` copied from a nul-terminated string pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41738,"byte_end":41814,"line_start":274,"line_end":274,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41819,"byte_end":41822,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This will scan for nul values beginning with `p`. The first nul value will be used as the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41827,"byte_end":41920,"line_start":276,"line_end":276,"column_start":5,"column_end":98}},{"value":"/ nul terminator for the string, similar to how libc string functions such as `strlen` work.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":41925,"byte_end":42019,"line_start":277,"line_end":277,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42024,"byte_end":42027,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42032,"byte_end":42044,"line_start":279,"line_end":279,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42049,"byte_end":42052,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid or has a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42057,"byte_end":42150,"line_start":281,"line_end":281,"column_start":5,"column_end":98}},{"value":"/ nul terminator, and the function could scan past the underlying buffer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42155,"byte_end":42230,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42235,"byte_end":42238,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ `p` must be non-null.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42243,"byte_end":42268,"line_start":284,"line_end":284,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42273,"byte_end":42276,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42281,"byte_end":42293,"line_start":286,"line_end":286,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42298,"byte_end":42301,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ This function panics if `p` is null.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42306,"byte_end":42346,"line_start":288,"line_end":288,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42351,"byte_end":42354,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Caveat","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42359,"byte_end":42371,"line_start":290,"line_end":290,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42376,"byte_end":42379,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ The lifetime for the returned string is inferred from its usage. To prevent accidental","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42384,"byte_end":42474,"line_start":292,"line_end":292,"column_start":5,"column_end":95}},{"value":"/ misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42479,"byte_end":42569,"line_start":293,"line_end":293,"column_start":5,"column_end":95}},{"value":"/ context, such as by providing a helper function taking the lifetime of a host value for the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42574,"byte_end":42669,"line_start":294,"line_end":294,"column_start":5,"column_end":100}},{"value":"/ string, or by explicit annotation.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":42674,"byte_end":42712,"line_start":295,"line_end":295,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43075,"byte_end":43083,"line_start":307,"line_end":307,"column_start":12,"column_end":20},"name":"as_ucstr","qualname":"<UCString<C>>::as_ucstr","value":"pub fn as_ucstr(&Self) -> &UCStr<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts to a `UCStr` reference.\n","sig":null,"attributes":[{"value":"/ Converts to a `UCStr` reference.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43027,"byte_end":43063,"line_start":306,"line_end":306,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43376,"byte_end":43384,"line_start":316,"line_end":316,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<UCString<C>>::into_vec","value":"pub fn into_vec(Self) -> Vec<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts the wide string into a `Vec` without a nul terminator, consuming the string in\n the process.","sig":null,"attributes":[{"value":"/ Converts the wide string into a `Vec` without a nul terminator, consuming the string in","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43130,"byte_end":43221,"line_start":311,"line_end":311,"column_start":5,"column_end":96}},{"value":"/ the process.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43226,"byte_end":43242,"line_start":312,"line_end":312,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43247,"byte_end":43250,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ The resulting vector will **not** contain a nul-terminator, and will contain no other nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43255,"byte_end":43348,"line_start":314,"line_end":314,"column_start":5,"column_end":98}},{"value":"/ values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43353,"byte_end":43364,"line_start":315,"line_end":315,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43677,"byte_end":43694,"line_start":325,"line_end":325,"column_start":12,"column_end":29},"name":"into_vec_with_nul","qualname":"<UCString<C>>::into_vec_with_nul","value":"pub fn into_vec_with_nul(Self) -> Vec<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts the wide string into a `Vec`, consuming the string in the process.","sig":null,"attributes":[{"value":"/ Converts the wide string into a `Vec`, consuming the string in the process.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43491,"byte_end":43570,"line_start":322,"line_end":322,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43575,"byte_end":43578,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ The resulting vector will contain a nul-terminator and no interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43583,"byte_end":43665,"line_start":324,"line_end":324,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44151,"byte_end":44159,"line_start":338,"line_end":338,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<UCString<C>>::into_raw","value":"pub fn into_raw(Self) -> *mut C","parent":null,"children":[],"decl_id":null,"docs":" Transfers ownership of the wide string to a C caller.","sig":null,"attributes":[{"value":"/ Transfers ownership of the wide string to a C caller.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43761,"byte_end":43818,"line_start":329,"line_end":329,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43823,"byte_end":43826,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43831,"byte_end":43843,"line_start":331,"line_end":331,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43848,"byte_end":43851,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ The pointer must be returned to Rust and reconstituted using `from_raw` to be properly","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43856,"byte_end":43946,"line_start":333,"line_end":333,"column_start":5,"column_end":95}},{"value":"/ deallocated. Specifically, one should _not_ use the standard C `free` function to","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":43951,"byte_end":44036,"line_start":334,"line_end":334,"column_start":5,"column_end":90}},{"value":"/ deallocate this string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44041,"byte_end":44068,"line_start":335,"line_end":335,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44073,"byte_end":44076,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Failure to call `from_raw` will lead to a memory leak.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44081,"byte_end":44139,"line_start":337,"line_end":337,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44570,"byte_end":44578,"line_start":349,"line_end":349,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<UCString<C>>::from_raw","value":"pub unsafe fn from_raw(*mut C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Retakes ownership of a `UCString` that was transferred to C.","sig":null,"attributes":[{"value":"/ Retakes ownership of a `UCString` that was transferred to C.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44240,"byte_end":44304,"line_start":342,"line_end":342,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44309,"byte_end":44312,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44317,"byte_end":44329,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44334,"byte_end":44337,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ This should only ever be called with a pointer that was earlier obtained by calling","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44342,"byte_end":44429,"line_start":346,"line_end":346,"column_start":5,"column_end":92}},{"value":"/ `into_raw` on a `UCString`. Additionally, the length of the string will be recalculated","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44434,"byte_end":44525,"line_start":347,"line_end":347,"column_start":5,"column_end":96}},{"value":"/ from the pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44530,"byte_end":44551,"line_start":348,"line_end":348,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45672,"byte_end":45688,"line_start":384,"line_end":384,"column_start":12,"column_end":28},"name":"into_boxed_ucstr","qualname":"<UCString<C>>::into_boxed_ucstr","value":"pub fn into_boxed_ucstr(Self) -> Box<UCStr<C>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this `UCString` into a boxed `UCStr`.","sig":null,"attributes":[{"value":"/ Converts this `UCString` into a boxed `UCStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44891,"byte_end":44941,"line_start":361,"line_end":361,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44946,"byte_end":44949,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44954,"byte_end":44968,"line_start":363,"line_end":363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44973,"byte_end":44976,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44981,"byte_end":44988,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"/ use widestring::{U16CString, U16CStr};","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":44993,"byte_end":45035,"line_start":366,"line_end":366,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45040,"byte_end":45043,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![102u16, 111u16, 111u16]; // \"foo\"","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45048,"byte_end":45102,"line_start":368,"line_end":368,"column_start":5,"column_end":59}},{"value":"/ let c_string = U16CString::new(v.clone()).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45107,"byte_end":45162,"line_start":369,"line_end":369,"column_start":5,"column_end":60}},{"value":"/ let boxed = c_string.into_boxed_ucstr();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45167,"byte_end":45211,"line_start":370,"line_end":370,"column_start":5,"column_end":49}},{"value":"/ v.push(0);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45216,"byte_end":45230,"line_start":371,"line_end":371,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(&*boxed, U16CStr::from_slice_with_nul(&v).unwrap());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45235,"byte_end":45302,"line_start":372,"line_end":372,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45307,"byte_end":45314,"line_start":373,"line_end":373,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45319,"byte_end":45322,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45327,"byte_end":45334,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ use widestring::{U32CString, U32CStr};","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45339,"byte_end":45381,"line_start":376,"line_end":376,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45386,"byte_end":45389,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![102u32, 111u32, 111u32]; // \"foo\"","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45394,"byte_end":45448,"line_start":378,"line_end":378,"column_start":5,"column_end":59}},{"value":"/ let c_string = U32CString::new(v.clone()).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45453,"byte_end":45508,"line_start":379,"line_end":379,"column_start":5,"column_end":60}},{"value":"/ let boxed = c_string.into_boxed_ucstr();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45513,"byte_end":45557,"line_start":380,"line_end":380,"column_start":5,"column_end":49}},{"value":"/ v.push(0);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45562,"byte_end":45576,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(&*boxed, U32CStr::from_slice_with_nul(&v).unwrap());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45581,"byte_end":45648,"line_start":382,"line_end":382,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":45653,"byte_end":45660,"line_start":383,"line_end":383,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47311,"byte_end":47319,"line_start":439,"line_end":439,"column_start":12,"column_end":20},"name":"from_str","qualname":"<UCString<u16>>::from_str","value":"pub fn from_str<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Result<Self, NulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from a `str`.","sig":null,"attributes":[{"value":"/ Constructs a `U16CString` from a `str`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46286,"byte_end":46329,"line_start":409,"line_end":409,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46334,"byte_end":46337,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ The string will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46342,"byte_end":46396,"line_start":411,"line_end":411,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46401,"byte_end":46404,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46409,"byte_end":46423,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46428,"byte_end":46431,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46436,"byte_end":46508,"line_start":415,"line_end":415,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain a `Vec<u16>` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46513,"byte_end":46603,"line_start":416,"line_end":416,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46608,"byte_end":46611,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46616,"byte_end":46630,"line_start":418,"line_end":418,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46635,"byte_end":46638,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46643,"byte_end":46654,"line_start":420,"line_end":420,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46659,"byte_end":46690,"line_start":421,"line_end":421,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46695,"byte_end":46718,"line_start":422,"line_end":422,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46723,"byte_end":46766,"line_start":423,"line_end":423,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U16CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46771,"byte_end":46820,"line_start":424,"line_end":424,"column_start":5,"column_end":54}},{"value":"/ # assert_eq!(wcstr.to_string_lossy(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46825,"byte_end":46870,"line_start":425,"line_end":425,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46875,"byte_end":46882,"line_start":426,"line_end":426,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46887,"byte_end":46890,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46895,"byte_end":46969,"line_start":428,"line_end":428,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46974,"byte_end":46977,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46982,"byte_end":46993,"line_start":430,"line_end":430,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46998,"byte_end":47029,"line_start":431,"line_end":431,"column_start":5,"column_end":36}},{"value":"/ let s = \"My\\u{0}String\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47034,"byte_end":47062,"line_start":432,"line_end":432,"column_start":5,"column_end":33}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47067,"byte_end":47110,"line_start":433,"line_end":433,"column_start":5,"column_end":48}},{"value":"/ let res = U16CString::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47115,"byte_end":47153,"line_start":434,"line_end":434,"column_start":5,"column_end":43}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47158,"byte_end":47184,"line_start":435,"line_end":435,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(res.err().unwrap().nul_position(), 2);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47189,"byte_end":47242,"line_start":436,"line_end":436,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47247,"byte_end":47254,"line_start":437,"line_end":437,"column_start":5,"column_end":12}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47259,"byte_end":47299,"line_start":438,"line_end":438,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48113,"byte_end":48131,"line_start":461,"line_end":461,"column_start":19,"column_end":37},"name":"from_str_unchecked","qualname":"<UCString<u16>>::from_str_unchecked","value":"pub unsafe fn from_str_unchecked<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from a `str`, without checking for interior nul values.","sig":null,"attributes":[{"value":"/ Constructs a `U16CString` from a `str`, without checking for interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47472,"byte_end":47557,"line_start":444,"line_end":444,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47562,"byte_end":47565,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47570,"byte_end":47582,"line_start":446,"line_end":446,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47587,"byte_end":47590,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_str` except that no runtime assertion is made that `s`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47595,"byte_end":47688,"line_start":448,"line_end":448,"column_start":5,"column_end":98}},{"value":"/ contains no nul values. Providing a string with nul values will result in an invalid","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47693,"byte_end":47781,"line_start":449,"line_end":449,"column_start":5,"column_end":93}},{"value":"/ `U16CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47786,"byte_end":47803,"line_start":450,"line_end":450,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47808,"byte_end":47811,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47816,"byte_end":47830,"line_start":452,"line_end":452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47835,"byte_end":47838,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47843,"byte_end":47854,"line_start":454,"line_end":454,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47859,"byte_end":47890,"line_start":455,"line_end":455,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47895,"byte_end":47918,"line_start":456,"line_end":456,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47923,"byte_end":47966,"line_start":457,"line_end":457,"column_start":5,"column_end":48}},{"value":"/ let wcstr = unsafe { U16CString::from_str_unchecked(s) };","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":47971,"byte_end":48032,"line_start":458,"line_end":458,"column_start":5,"column_end":66}},{"value":"/ # assert_eq!(wcstr.to_string_lossy(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48037,"byte_end":48082,"line_start":459,"line_end":459,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48087,"byte_end":48094,"line_start":460,"line_end":460,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49259,"byte_end":49276,"line_start":494,"line_end":494,"column_start":12,"column_end":29},"name":"from_str_with_nul","qualname":"<UCString<u16>>::from_str_with_nul","value":"pub fn from_str_with_nul<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Result<Self, MissingNulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from a `str` with a nul terminator.","sig":null,"attributes":[{"value":"/ Constructs a `U16CString` from a `str` with a nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48276,"byte_end":48341,"line_start":466,"line_end":466,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48346,"byte_end":48349,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48354,"byte_end":48424,"line_start":468,"line_end":468,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48429,"byte_end":48432,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48437,"byte_end":48451,"line_start":470,"line_end":470,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48456,"byte_end":48459,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48464,"byte_end":48554,"line_start":472,"line_end":472,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec<u16>`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48559,"byte_end":48627,"line_start":473,"line_end":473,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48632,"byte_end":48635,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48640,"byte_end":48654,"line_start":475,"line_end":475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48659,"byte_end":48662,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48667,"byte_end":48678,"line_start":477,"line_end":477,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48683,"byte_end":48714,"line_start":478,"line_end":478,"column_start":5,"column_end":36}},{"value":"/ let s = \"My\\u{0}String\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48719,"byte_end":48747,"line_start":479,"line_end":479,"column_start":5,"column_end":33}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48752,"byte_end":48795,"line_start":480,"line_end":480,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U16CString::from_str_with_nul(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48800,"byte_end":48858,"line_start":481,"line_end":481,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(wcstr.to_string_lossy(), \"My\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48863,"byte_end":48909,"line_start":482,"line_end":482,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48914,"byte_end":48921,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48926,"byte_end":48929,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from missing nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":48934,"byte_end":49016,"line_start":485,"line_end":485,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49021,"byte_end":49024,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49029,"byte_end":49040,"line_start":487,"line_end":487,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49045,"byte_end":49076,"line_start":488,"line_end":488,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49081,"byte_end":49104,"line_start":489,"line_end":489,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49109,"byte_end":49152,"line_start":490,"line_end":490,"column_start":5,"column_end":48}},{"value":"/ let res = U16CString::from_str_with_nul(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49157,"byte_end":49204,"line_start":491,"line_end":491,"column_start":5,"column_end":52}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49209,"byte_end":49235,"line_start":492,"line_end":492,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49240,"byte_end":49247,"line_start":493,"line_end":493,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50211,"byte_end":50238,"line_start":517,"line_end":517,"column_start":19,"column_end":46},"name":"from_str_with_nul_unchecked","qualname":"<UCString<u16>>::from_str_with_nul_unchecked","value":"pub unsafe fn from_str_with_nul_unchecked<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from str `str` that should have a terminating nul, but without\n checking for any nul values.","sig":null,"attributes":[{"value":"/ Constructs a `U16CString` from str `str` that should have a terminating nul, but without","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49450,"byte_end":49542,"line_start":499,"line_end":499,"column_start":5,"column_end":97}},{"value":"/ checking for any nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49547,"byte_end":49579,"line_start":500,"line_end":500,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49584,"byte_end":49587,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49592,"byte_end":49604,"line_start":502,"line_end":502,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49609,"byte_end":49612,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_str_with_nul` except that no runtime assertion is made","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49617,"byte_end":49710,"line_start":504,"line_end":504,"column_start":5,"column_end":98}},{"value":"/ that `s` contains no nul values. Providing a vector with interior nul values or without a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49715,"byte_end":49808,"line_start":505,"line_end":505,"column_start":5,"column_end":98}},{"value":"/ terminating nul value will result in an invalid `U16CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49813,"byte_end":49878,"line_start":506,"line_end":506,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49883,"byte_end":49886,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49891,"byte_end":49905,"line_start":508,"line_end":508,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49910,"byte_end":49913,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49918,"byte_end":49929,"line_start":510,"line_end":510,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49934,"byte_end":49965,"line_start":511,"line_end":511,"column_start":5,"column_end":36}},{"value":"/ let s = \"My String\\u{0}\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":49970,"byte_end":49999,"line_start":512,"line_end":512,"column_start":5,"column_end":34}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50004,"byte_end":50047,"line_start":513,"line_end":513,"column_start":5,"column_end":48}},{"value":"/ let wcstr = unsafe { U16CString::from_str_with_nul_unchecked(s) };","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50052,"byte_end":50122,"line_start":514,"line_end":514,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(wcstr.to_string_lossy(), \"My String\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50127,"byte_end":50180,"line_start":515,"line_end":515,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50185,"byte_end":50192,"line_start":516,"line_end":516,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51109,"byte_end":51117,"line_start":541,"line_end":541,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<UCString<u16>>::from_ptr","value":"pub unsafe fn from_ptr(*const u16, usize) -> Result<Self, NulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U16CString` copied from a `u16` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U16CString` copied from a `u16` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50392,"byte_end":50467,"line_start":522,"line_end":522,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50472,"byte_end":50475,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `u16` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50480,"byte_end":50564,"line_start":524,"line_end":524,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50569,"byte_end":50572,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ The string will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50577,"byte_end":50631,"line_start":526,"line_end":526,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50636,"byte_end":50639,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50644,"byte_end":50658,"line_start":528,"line_end":528,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50663,"byte_end":50666,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50671,"byte_end":50743,"line_start":530,"line_end":530,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain a `Vec<u16>` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50748,"byte_end":50838,"line_start":531,"line_end":531,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50843,"byte_end":50846,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50851,"byte_end":50863,"line_start":533,"line_end":533,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50868,"byte_end":50871,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50876,"byte_end":50970,"line_start":535,"line_end":535,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50975,"byte_end":50988,"line_start":536,"line_end":536,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":50993,"byte_end":50996,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51001,"byte_end":51013,"line_start":538,"line_end":538,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51018,"byte_end":51021,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51026,"byte_end":51090,"line_start":540,"line_end":540,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52051,"byte_end":52069,"line_start":565,"line_end":565,"column_start":19,"column_end":37},"name":"from_ptr_unchecked","qualname":"<UCString<u16>>::from_ptr_unchecked","value":"pub unsafe fn from_ptr_unchecked(*const u16, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U16CString` copied from a `u16` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U16CString` copied from a `u16` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51376,"byte_end":51451,"line_start":550,"line_end":550,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51456,"byte_end":51459,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `u16` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51464,"byte_end":51548,"line_start":552,"line_end":552,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51553,"byte_end":51556,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ The string will **not** be checked for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51561,"byte_end":51623,"line_start":554,"line_end":554,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51628,"byte_end":51631,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51636,"byte_end":51648,"line_start":556,"line_end":556,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51653,"byte_end":51656,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51661,"byte_end":51755,"line_start":558,"line_end":558,"column_start":5,"column_end":99}},{"value":"/ elements. In addition, no checking for invalid nul values is performed, so if any elements","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51760,"byte_end":51854,"line_start":559,"line_end":559,"column_start":5,"column_end":99}},{"value":"/ of `p` are a nul value, the resulting `U16CString` will be invalid.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51859,"byte_end":51930,"line_start":560,"line_end":560,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51935,"byte_end":51938,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51943,"byte_end":51955,"line_start":562,"line_end":562,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51960,"byte_end":51963,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":51968,"byte_end":52032,"line_start":564,"line_end":564,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53044,"byte_end":53061,"line_start":593,"line_end":593,"column_start":19,"column_end":36},"name":"from_ptr_with_nul","qualname":"<UCString<u16>>::from_ptr_with_nul","value":"pub unsafe fn from_ptr_with_nul(*const u16, usize)\n-> Result<Self, MissingNulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U16String` copied from a `u16` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U16String` copied from a `u16` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52316,"byte_end":52390,"line_start":574,"line_end":574,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52395,"byte_end":52398,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `u16` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52403,"byte_end":52487,"line_start":576,"line_end":576,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52492,"byte_end":52495,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52500,"byte_end":52570,"line_start":578,"line_end":578,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52575,"byte_end":52578,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52583,"byte_end":52597,"line_start":580,"line_end":580,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52602,"byte_end":52605,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52610,"byte_end":52700,"line_start":582,"line_end":582,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec<u16>`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52705,"byte_end":52773,"line_start":583,"line_end":583,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52778,"byte_end":52781,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52786,"byte_end":52798,"line_start":585,"line_end":585,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52803,"byte_end":52806,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52811,"byte_end":52905,"line_start":587,"line_end":587,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52910,"byte_end":52923,"line_start":588,"line_end":588,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52928,"byte_end":52931,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52936,"byte_end":52948,"line_start":590,"line_end":590,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52953,"byte_end":52956,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":52961,"byte_end":53025,"line_start":592,"line_end":592,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54211,"byte_end":54238,"line_start":622,"line_end":622,"column_start":19,"column_end":46},"name":"from_ptr_with_nul_unchecked","qualname":"<UCString<u16>>::from_ptr_with_nul_unchecked","value":"pub unsafe fn from_ptr_with_nul_unchecked(*const u16, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U16String` copied from a `u16` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U16String` copied from a `u16` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53364,"byte_end":53438,"line_start":605,"line_end":605,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53443,"byte_end":53446,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `u16` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53451,"byte_end":53535,"line_start":607,"line_end":607,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53540,"byte_end":53543,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ The data should end with a nul terminator, but no checking is done on whether the data","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53548,"byte_end":53638,"line_start":609,"line_end":609,"column_start":5,"column_end":95}},{"value":"/ actually ends with a nul terminator, or if the data contains any interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53643,"byte_end":53732,"line_start":610,"line_end":610,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53737,"byte_end":53740,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53745,"byte_end":53757,"line_start":612,"line_end":612,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53762,"byte_end":53765,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53770,"byte_end":53864,"line_start":614,"line_end":614,"column_start":5,"column_end":99}},{"value":"/ elements. In addition, no checking for nul values is performed, so if there data does not","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53869,"byte_end":53962,"line_start":615,"line_end":615,"column_start":5,"column_end":98}},{"value":"/ end with a nul terminator, or if there are any interior nul values, the resulting","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":53967,"byte_end":54052,"line_start":616,"line_end":616,"column_start":5,"column_end":90}},{"value":"/ `U16CString` will be invalid.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54057,"byte_end":54090,"line_start":617,"line_end":617,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54095,"byte_end":54098,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54103,"byte_end":54115,"line_start":619,"line_end":619,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54120,"byte_end":54123,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54128,"byte_end":54192,"line_start":621,"line_end":621,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55545,"byte_end":55556,"line_start":661,"line_end":661,"column_start":12,"column_end":23},"name":"from_os_str","qualname":"<UCString<u16>>::from_os_str","value":"pub fn from_os_str<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(impl AsRef<std::ffi::OsStr>)\n-> Result<Self, NulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from anything that can be converted to an `OsStr`.","sig":null,"attributes":[{"value":"/ Constructs a `U16CString` from anything that can be converted to an `OsStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54494,"byte_end":54574,"line_start":631,"line_end":631,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54579,"byte_end":54582,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ The string will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54587,"byte_end":54641,"line_start":633,"line_end":633,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54646,"byte_end":54649,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54654,"byte_end":54668,"line_start":635,"line_end":635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54673,"byte_end":54676,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54681,"byte_end":54753,"line_start":637,"line_end":637,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain a `Vec<u16>` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54758,"byte_end":54848,"line_start":638,"line_end":638,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54853,"byte_end":54856,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54861,"byte_end":54875,"line_start":640,"line_end":640,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54880,"byte_end":54883,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54888,"byte_end":54899,"line_start":642,"line_end":642,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54904,"byte_end":54935,"line_start":643,"line_end":643,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54940,"byte_end":54963,"line_start":644,"line_end":644,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":54968,"byte_end":55011,"line_start":645,"line_end":645,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U16CString::from_os_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55016,"byte_end":55068,"line_start":646,"line_end":646,"column_start":5,"column_end":57}},{"value":"/ # assert_eq!(wcstr.to_string_lossy(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55073,"byte_end":55118,"line_start":647,"line_end":647,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55123,"byte_end":55130,"line_start":648,"line_end":648,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55135,"byte_end":55138,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55143,"byte_end":55217,"line_start":650,"line_end":650,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55222,"byte_end":55225,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55230,"byte_end":55241,"line_start":652,"line_end":652,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55246,"byte_end":55277,"line_start":653,"line_end":653,"column_start":5,"column_end":36}},{"value":"/ let s = \"My\\u{0}String\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55282,"byte_end":55310,"line_start":654,"line_end":654,"column_start":5,"column_end":33}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55315,"byte_end":55358,"line_start":655,"line_end":655,"column_start":5,"column_end":48}},{"value":"/ let res = U16CString::from_os_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55363,"byte_end":55404,"line_start":656,"line_end":656,"column_start":5,"column_end":46}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55409,"byte_end":55435,"line_start":657,"line_end":657,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(res.err().unwrap().nul_position(), 2);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55440,"byte_end":55493,"line_start":658,"line_end":658,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55498,"byte_end":55505,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55510,"byte_end":55533,"line_start":660,"line_end":660,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56435,"byte_end":56456,"line_start":685,"line_end":685,"column_start":19,"column_end":40},"name":"from_os_str_unchecked","qualname":"<UCString<u16>>::from_os_str_unchecked","value":"pub unsafe fn from_os_str_unchecked<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(impl AsRef<std::ffi::OsStr>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from anything that can be converted to an `OsStr`, without\n checking for interior nul values.","sig":null,"attributes":[{"value":"/ Constructs a `U16CString` from anything that can be converted to an `OsStr`, without","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55715,"byte_end":55803,"line_start":666,"line_end":666,"column_start":5,"column_end":93}},{"value":"/ checking for interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55808,"byte_end":55845,"line_start":667,"line_end":667,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55850,"byte_end":55853,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55858,"byte_end":55870,"line_start":669,"line_end":669,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55875,"byte_end":55878,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_os_str` except that no runtime assertion is made that","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55883,"byte_end":55975,"line_start":671,"line_end":671,"column_start":5,"column_end":97}},{"value":"/ `s` contains no nul values. Providing a string with nul values will result in an invalid","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":55980,"byte_end":56072,"line_start":672,"line_end":672,"column_start":5,"column_end":97}},{"value":"/ `U16CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56077,"byte_end":56094,"line_start":673,"line_end":673,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56099,"byte_end":56102,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56107,"byte_end":56121,"line_start":675,"line_end":675,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56126,"byte_end":56129,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56134,"byte_end":56145,"line_start":677,"line_end":677,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56150,"byte_end":56181,"line_start":678,"line_end":678,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56186,"byte_end":56209,"line_start":679,"line_end":679,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56214,"byte_end":56257,"line_start":680,"line_end":680,"column_start":5,"column_end":48}},{"value":"/ let wcstr = unsafe { U16CString::from_os_str_unchecked(s) };","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56262,"byte_end":56326,"line_start":681,"line_end":681,"column_start":5,"column_end":69}},{"value":"/ # assert_eq!(wcstr.to_string_lossy(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56331,"byte_end":56376,"line_start":682,"line_end":682,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56381,"byte_end":56388,"line_start":683,"line_end":683,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56393,"byte_end":56416,"line_start":684,"line_end":684,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57669,"byte_end":57689,"line_start":720,"line_end":720,"column_start":12,"column_end":32},"name":"from_os_str_with_nul","qualname":"<UCString<u16>>::from_os_str_with_nul","value":"pub fn from_os_str_with_nul<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(impl AsRef<std::ffi::OsStr>)\n-> Result<Self, MissingNulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from anything that can be converted to an `OsStr` with a nul\n terminator.","sig":null,"attributes":[{"value":"/ Constructs a `U16CString` from anything that can be converted to an `OsStr` with a nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56607,"byte_end":56697,"line_start":690,"line_end":690,"column_start":5,"column_end":95}},{"value":"/ terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56702,"byte_end":56717,"line_start":691,"line_end":691,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56722,"byte_end":56725,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56730,"byte_end":56800,"line_start":693,"line_end":693,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56805,"byte_end":56808,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56813,"byte_end":56827,"line_start":695,"line_end":695,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56832,"byte_end":56835,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56840,"byte_end":56930,"line_start":697,"line_end":697,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec<u16>`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":56935,"byte_end":57003,"line_start":698,"line_end":698,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57008,"byte_end":57011,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57016,"byte_end":57030,"line_start":700,"line_end":700,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57035,"byte_end":57038,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57043,"byte_end":57054,"line_start":702,"line_end":702,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57059,"byte_end":57090,"line_start":703,"line_end":703,"column_start":5,"column_end":36}},{"value":"/ let s = \"My\\u{0}String\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57095,"byte_end":57123,"line_start":704,"line_end":704,"column_start":5,"column_end":33}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57128,"byte_end":57171,"line_start":705,"line_end":705,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U16CString::from_os_str_with_nul(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57176,"byte_end":57237,"line_start":706,"line_end":706,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(wcstr.to_string_lossy(), \"My\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57242,"byte_end":57288,"line_start":707,"line_end":707,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57293,"byte_end":57300,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57305,"byte_end":57308,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from missing nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57313,"byte_end":57395,"line_start":710,"line_end":710,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57400,"byte_end":57403,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57408,"byte_end":57419,"line_start":712,"line_end":712,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57424,"byte_end":57455,"line_start":713,"line_end":713,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57460,"byte_end":57483,"line_start":714,"line_end":714,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57488,"byte_end":57531,"line_start":715,"line_end":715,"column_start":5,"column_end":48}},{"value":"/ let res = U16CString::from_os_str_with_nul(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57536,"byte_end":57586,"line_start":716,"line_end":716,"column_start":5,"column_end":55}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57591,"byte_end":57617,"line_start":717,"line_end":717,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57622,"byte_end":57629,"line_start":718,"line_end":718,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57634,"byte_end":57657,"line_start":719,"line_end":719,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58714,"byte_end":58744,"line_start":746,"line_end":746,"column_start":19,"column_end":49},"name":"from_os_str_with_nul_unchecked","qualname":"<UCString<u16>>::from_os_str_with_nul_unchecked","value":"pub unsafe fn from_os_str_with_nul_unchecked<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(impl AsRef<std::ffi::OsStr>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from anything that can be converted to an `OsStr` that should\n have a terminating nul, but without checking for any nul values.","sig":null,"attributes":[{"value":"/ Constructs a `U16CString` from anything that can be converted to an `OsStr` that should","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57884,"byte_end":57975,"line_start":727,"line_end":727,"column_start":5,"column_end":96}},{"value":"/ have a terminating nul, but without checking for any nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":57980,"byte_end":58048,"line_start":728,"line_end":728,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58053,"byte_end":58056,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58061,"byte_end":58073,"line_start":730,"line_end":730,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58078,"byte_end":58081,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_os_str_with_nul` except that no runtime assertion is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58086,"byte_end":58177,"line_start":732,"line_end":732,"column_start":5,"column_end":96}},{"value":"/ made that `s` contains no nul values. Providing a vector with interior nul values or","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58182,"byte_end":58270,"line_start":733,"line_end":733,"column_start":5,"column_end":93}},{"value":"/ without a terminating nul value will result in an invalid `U16CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58275,"byte_end":58350,"line_start":734,"line_end":734,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58355,"byte_end":58358,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58363,"byte_end":58377,"line_start":736,"line_end":736,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58382,"byte_end":58385,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58390,"byte_end":58401,"line_start":738,"line_end":738,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58406,"byte_end":58437,"line_start":739,"line_end":739,"column_start":5,"column_end":36}},{"value":"/ let s = \"My String\\u{0}\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58442,"byte_end":58471,"line_start":740,"line_end":740,"column_start":5,"column_end":34}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58476,"byte_end":58519,"line_start":741,"line_end":741,"column_start":5,"column_end":48}},{"value":"/ let wcstr = unsafe { U16CString::from_os_str_with_nul_unchecked(s) };","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58524,"byte_end":58597,"line_start":742,"line_end":742,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(wcstr.to_string_lossy(), \"My String\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58602,"byte_end":58655,"line_start":743,"line_end":743,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58660,"byte_end":58667,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58672,"byte_end":58695,"line_start":745,"line_end":745,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60321,"byte_end":60331,"line_start":792,"line_end":792,"column_start":12,"column_end":22},"name":"from_chars","qualname":"<UCString<u32>>::from_chars","value":"pub fn from_chars(Vec<char>) -> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a container of wide character data.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from a container of wide character data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59080,"byte_end":59150,"line_start":761,"line_end":761,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59155,"byte_end":59158,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ This method will consume the provided data and use the underlying elements to construct a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59163,"byte_end":59256,"line_start":763,"line_end":763,"column_start":5,"column_end":98}},{"value":"/ new string. The data will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59261,"byte_end":59325,"line_start":764,"line_end":764,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59330,"byte_end":59333,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59338,"byte_end":59352,"line_start":766,"line_end":766,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59357,"byte_end":59360,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59365,"byte_end":59437,"line_start":768,"line_end":768,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain the `Vec<u32>` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59442,"byte_end":59534,"line_start":769,"line_end":769,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59539,"byte_end":59542,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59547,"byte_end":59561,"line_start":771,"line_end":771,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59566,"byte_end":59569,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59574,"byte_end":59585,"line_start":773,"line_end":773,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59590,"byte_end":59621,"line_start":774,"line_end":774,"column_start":5,"column_end":36}},{"value":"/ let v: Vec<char> = \"Test\".chars().collect();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59626,"byte_end":59674,"line_start":775,"line_end":775,"column_start":5,"column_end":53}},{"value":"/ # let cloned: Vec<u32> = v.iter().map(|&c| c as u32).collect();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59679,"byte_end":59746,"line_start":776,"line_end":776,"column_start":5,"column_end":72}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59751,"byte_end":59794,"line_start":777,"line_end":777,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U32CString::from_chars(v).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59799,"byte_end":59850,"line_start":778,"line_end":778,"column_start":5,"column_end":56}},{"value":"/ # assert_eq!(wcstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59855,"byte_end":59898,"line_start":779,"line_end":779,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59903,"byte_end":59910,"line_start":780,"line_end":780,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59915,"byte_end":59918,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59923,"byte_end":59997,"line_start":782,"line_end":782,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60002,"byte_end":60005,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60010,"byte_end":60021,"line_start":784,"line_end":784,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60026,"byte_end":60057,"line_start":785,"line_end":785,"column_start":5,"column_end":36}},{"value":"/ let v: Vec<char> = \"T\\u{0}est\".chars().collect();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60062,"byte_end":60115,"line_start":786,"line_end":786,"column_start":5,"column_end":58}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60120,"byte_end":60163,"line_start":787,"line_end":787,"column_start":5,"column_end":48}},{"value":"/ let res = U32CString::from_chars(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60168,"byte_end":60208,"line_start":788,"line_end":788,"column_start":5,"column_end":45}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60213,"byte_end":60239,"line_start":789,"line_end":789,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(res.err().unwrap().nul_position(), 1);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60244,"byte_end":60297,"line_start":790,"line_end":790,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60302,"byte_end":60309,"line_start":791,"line_end":791,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61695,"byte_end":61714,"line_start":826,"line_end":826,"column_start":12,"column_end":31},"name":"from_chars_with_nul","qualname":"<UCString<u32>>::from_chars_with_nul","value":"pub fn from_chars_with_nul(Vec<char>) -> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a nul-terminated container of UTF-32 data.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from a nul-terminated container of UTF-32 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60462,"byte_end":60539,"line_start":796,"line_end":796,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60544,"byte_end":60547,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ This method will consume the provided data and use the underlying elements to construct a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60552,"byte_end":60645,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ new string. The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60650,"byte_end":60732,"line_start":799,"line_end":799,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60737,"byte_end":60740,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60745,"byte_end":60759,"line_start":801,"line_end":801,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60764,"byte_end":60767,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60772,"byte_end":60862,"line_start":803,"line_end":803,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec<u32>`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60867,"byte_end":60935,"line_start":804,"line_end":804,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60940,"byte_end":60943,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60948,"byte_end":60962,"line_start":806,"line_end":806,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60967,"byte_end":60970,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60975,"byte_end":60986,"line_start":808,"line_end":808,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":60991,"byte_end":61022,"line_start":809,"line_end":809,"column_start":5,"column_end":36}},{"value":"/ let v: Vec<char> = \"Test\\u{0}\".chars().collect();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61027,"byte_end":61080,"line_start":810,"line_end":810,"column_start":5,"column_end":58}},{"value":"/ # let cloned: Vec<u32> = v[..4].iter().map(|&c| c as u32).collect();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61085,"byte_end":61157,"line_start":811,"line_end":811,"column_start":5,"column_end":77}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61162,"byte_end":61205,"line_start":812,"line_end":812,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U32CString::from_chars_with_nul(v).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61210,"byte_end":61270,"line_start":813,"line_end":813,"column_start":5,"column_end":65}},{"value":"/ # assert_eq!(wcstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61275,"byte_end":61318,"line_start":814,"line_end":814,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61323,"byte_end":61330,"line_start":815,"line_end":815,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61335,"byte_end":61338,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from missing nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61343,"byte_end":61425,"line_start":817,"line_end":817,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61430,"byte_end":61433,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61438,"byte_end":61449,"line_start":819,"line_end":819,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61454,"byte_end":61485,"line_start":820,"line_end":820,"column_start":5,"column_end":36}},{"value":"/ let v: Vec<char> = \"Test\".chars().collect();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61490,"byte_end":61538,"line_start":821,"line_end":821,"column_start":5,"column_end":53}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61543,"byte_end":61586,"line_start":822,"line_end":822,"column_start":5,"column_end":48}},{"value":"/ let res = U32CString::from_chars_with_nul(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61591,"byte_end":61640,"line_start":823,"line_end":823,"column_start":5,"column_end":54}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61645,"byte_end":61671,"line_start":824,"line_end":824,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61676,"byte_end":61683,"line_start":825,"line_end":825,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62347,"byte_end":62367,"line_start":841,"line_end":841,"column_start":19,"column_end":39},"name":"from_chars_unchecked","qualname":"<UCString<u32>>::from_chars_unchecked","value":"pub unsafe fn from_chars_unchecked(Vec<char>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `U32CString` from a vector without checking for interior nul values.","sig":null,"attributes":[{"value":"/ Creates a `U32CString` from a vector without checking for interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61885,"byte_end":61967,"line_start":831,"line_end":831,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61972,"byte_end":61975,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ A terminating nul value will be appended if the vector does not already have a terminating","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":61980,"byte_end":62074,"line_start":833,"line_end":833,"column_start":5,"column_end":99}},{"value":"/ nul.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62079,"byte_end":62087,"line_start":834,"line_end":834,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62092,"byte_end":62095,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62100,"byte_end":62112,"line_start":836,"line_end":836,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62117,"byte_end":62120,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `new` except that no runtime assertion is made that `v`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62125,"byte_end":62213,"line_start":838,"line_end":838,"column_start":5,"column_end":93}},{"value":"/ contains no nul values. Providing a vector with nul values will result in an invalid","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62218,"byte_end":62306,"line_start":839,"line_end":839,"column_start":5,"column_end":93}},{"value":"/ `U32CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62311,"byte_end":62328,"line_start":840,"line_end":840,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62947,"byte_end":62976,"line_start":854,"line_end":854,"column_start":19,"column_end":48},"name":"from_chars_with_nul_unchecked","qualname":"<UCString<u32>>::from_chars_with_nul_unchecked","value":"pub unsafe fn from_chars_with_nul_unchecked(Vec<char>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `U32CString` from a vector that should have a nul terminator, without checking\n for any nul values.","sig":null,"attributes":[{"value":"/ Creates a `U32CString` from a vector that should have a nul terminator, without checking","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62509,"byte_end":62601,"line_start":846,"line_end":846,"column_start":5,"column_end":97}},{"value":"/ for any nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62606,"byte_end":62629,"line_start":847,"line_end":847,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62634,"byte_end":62637,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62642,"byte_end":62654,"line_start":849,"line_end":849,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62659,"byte_end":62662,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_vec_with_nul` except that no runtime assertion is made","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62667,"byte_end":62760,"line_start":851,"line_end":851,"column_start":5,"column_end":98}},{"value":"/ that `v` contains no nul values. Providing a vector with interior nul values or without a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62765,"byte_end":62858,"line_start":852,"line_end":852,"column_start":5,"column_end":98}},{"value":"/ terminating nul value will result in an invalid `U32CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":62863,"byte_end":62928,"line_start":853,"line_end":853,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64152,"byte_end":64160,"line_start":889,"line_end":889,"column_start":12,"column_end":20},"name":"from_str","qualname":"<UCString<u32>>::from_str","value":"pub fn from_str<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a `str`.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from a `str`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63127,"byte_end":63170,"line_start":859,"line_end":859,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63175,"byte_end":63178,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ The string will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63183,"byte_end":63237,"line_start":861,"line_end":861,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63242,"byte_end":63245,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63250,"byte_end":63264,"line_start":863,"line_end":863,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63269,"byte_end":63272,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63277,"byte_end":63349,"line_start":865,"line_end":865,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain a `Vec<u32>` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63354,"byte_end":63444,"line_start":866,"line_end":866,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63449,"byte_end":63452,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63457,"byte_end":63471,"line_start":868,"line_end":868,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63476,"byte_end":63479,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63484,"byte_end":63495,"line_start":870,"line_end":870,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63500,"byte_end":63531,"line_start":871,"line_end":871,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63536,"byte_end":63559,"line_start":872,"line_end":872,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63564,"byte_end":63607,"line_start":873,"line_end":873,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U32CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63612,"byte_end":63661,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/ # assert_eq!(wcstr.to_string_lossy(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63666,"byte_end":63711,"line_start":875,"line_end":875,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63716,"byte_end":63723,"line_start":876,"line_end":876,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63728,"byte_end":63731,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63736,"byte_end":63810,"line_start":878,"line_end":878,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63815,"byte_end":63818,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63823,"byte_end":63834,"line_start":880,"line_end":880,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63839,"byte_end":63870,"line_start":881,"line_end":881,"column_start":5,"column_end":36}},{"value":"/ let s = \"My\\u{0}String\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63875,"byte_end":63903,"line_start":882,"line_end":882,"column_start":5,"column_end":33}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63908,"byte_end":63951,"line_start":883,"line_end":883,"column_start":5,"column_end":48}},{"value":"/ let res = U32CString::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63956,"byte_end":63994,"line_start":884,"line_end":884,"column_start":5,"column_end":43}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":63999,"byte_end":64025,"line_start":885,"line_end":885,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(res.err().unwrap().nul_position(), 2);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64030,"byte_end":64083,"line_start":886,"line_end":886,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64088,"byte_end":64095,"line_start":887,"line_end":887,"column_start":5,"column_end":12}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64100,"byte_end":64140,"line_start":888,"line_end":888,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64955,"byte_end":64973,"line_start":911,"line_end":911,"column_start":19,"column_end":37},"name":"from_str_unchecked","qualname":"<UCString<u32>>::from_str_unchecked","value":"pub unsafe fn from_str_unchecked<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a `str`, without checking for interior nul values.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from a `str`, without checking for interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64314,"byte_end":64399,"line_start":894,"line_end":894,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64404,"byte_end":64407,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64412,"byte_end":64424,"line_start":896,"line_end":896,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64429,"byte_end":64432,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_str` except that no runtime assertion is made that `s`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64437,"byte_end":64530,"line_start":898,"line_end":898,"column_start":5,"column_end":98}},{"value":"/ contains no nul values. Providing a string with nul values will result in an invalid","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64535,"byte_end":64623,"line_start":899,"line_end":899,"column_start":5,"column_end":93}},{"value":"/ `U32CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64628,"byte_end":64645,"line_start":900,"line_end":900,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64650,"byte_end":64653,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64658,"byte_end":64672,"line_start":902,"line_end":902,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64677,"byte_end":64680,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64685,"byte_end":64696,"line_start":904,"line_end":904,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64701,"byte_end":64732,"line_start":905,"line_end":905,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64737,"byte_end":64760,"line_start":906,"line_end":906,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64765,"byte_end":64808,"line_start":907,"line_end":907,"column_start":5,"column_end":48}},{"value":"/ let wcstr = unsafe { U32CString::from_str_unchecked(s) };","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64813,"byte_end":64874,"line_start":908,"line_end":908,"column_start":5,"column_end":66}},{"value":"/ # assert_eq!(wcstr.to_string_lossy(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64879,"byte_end":64924,"line_start":909,"line_end":909,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":64929,"byte_end":64936,"line_start":910,"line_end":910,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66097,"byte_end":66114,"line_start":944,"line_end":944,"column_start":12,"column_end":29},"name":"from_str_with_nul","qualname":"<UCString<u32>>::from_str_with_nul","value":"pub fn from_str_with_nul<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a `str` with a nul terminator.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from a `str` with a nul terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65114,"byte_end":65179,"line_start":916,"line_end":916,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65184,"byte_end":65187,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65192,"byte_end":65262,"line_start":918,"line_end":918,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65267,"byte_end":65270,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65275,"byte_end":65289,"line_start":920,"line_end":920,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65294,"byte_end":65297,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65302,"byte_end":65392,"line_start":922,"line_end":922,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec<u32>`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65397,"byte_end":65465,"line_start":923,"line_end":923,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65470,"byte_end":65473,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65478,"byte_end":65492,"line_start":925,"line_end":925,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65497,"byte_end":65500,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65505,"byte_end":65516,"line_start":927,"line_end":927,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65521,"byte_end":65552,"line_start":928,"line_end":928,"column_start":5,"column_end":36}},{"value":"/ let s = \"My\\u{0}String\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65557,"byte_end":65585,"line_start":929,"line_end":929,"column_start":5,"column_end":33}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65590,"byte_end":65633,"line_start":930,"line_end":930,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U32CString::from_str_with_nul(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65638,"byte_end":65696,"line_start":931,"line_end":931,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(wcstr.to_string_lossy(), \"My\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65701,"byte_end":65747,"line_start":932,"line_end":932,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65752,"byte_end":65759,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65764,"byte_end":65767,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from missing nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65772,"byte_end":65854,"line_start":935,"line_end":935,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65859,"byte_end":65862,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65867,"byte_end":65878,"line_start":937,"line_end":937,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65883,"byte_end":65914,"line_start":938,"line_end":938,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65919,"byte_end":65942,"line_start":939,"line_end":939,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65947,"byte_end":65990,"line_start":940,"line_end":940,"column_start":5,"column_end":48}},{"value":"/ let res = U32CString::from_str_with_nul(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":65995,"byte_end":66042,"line_start":941,"line_end":941,"column_start":5,"column_end":52}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66047,"byte_end":66073,"line_start":942,"line_end":942,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66078,"byte_end":66085,"line_start":943,"line_end":943,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67043,"byte_end":67070,"line_start":967,"line_end":967,"column_start":19,"column_end":46},"name":"from_str_with_nul_unchecked","qualname":"<UCString<u32>>::from_str_with_nul_unchecked","value":"pub unsafe fn from_str_with_nul_unchecked<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a `str` that should have a terminating nul, but without\n checking for any nul values.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from a `str` that should have a terminating nul, but without","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66284,"byte_end":66374,"line_start":949,"line_end":949,"column_start":5,"column_end":95}},{"value":"/ checking for any nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66379,"byte_end":66411,"line_start":950,"line_end":950,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66416,"byte_end":66419,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66424,"byte_end":66436,"line_start":952,"line_end":952,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66441,"byte_end":66444,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_str_with_nul` except that no runtime assertion is made","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66449,"byte_end":66542,"line_start":954,"line_end":954,"column_start":5,"column_end":98}},{"value":"/ that `s` contains no nul values. Providing a vector with interior nul values or without a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66547,"byte_end":66640,"line_start":955,"line_end":955,"column_start":5,"column_end":98}},{"value":"/ terminating nul value will result in an invalid `U32CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66645,"byte_end":66710,"line_start":956,"line_end":956,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66715,"byte_end":66718,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66723,"byte_end":66737,"line_start":958,"line_end":958,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66742,"byte_end":66745,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66750,"byte_end":66761,"line_start":960,"line_end":960,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66766,"byte_end":66797,"line_start":961,"line_end":961,"column_start":5,"column_end":36}},{"value":"/ let s = \"My String\\u{0}\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66802,"byte_end":66831,"line_start":962,"line_end":962,"column_start":5,"column_end":34}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66836,"byte_end":66879,"line_start":963,"line_end":963,"column_start":5,"column_end":48}},{"value":"/ let wcstr = unsafe { U32CString::from_str_with_nul_unchecked(s) };","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66884,"byte_end":66954,"line_start":964,"line_end":964,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(wcstr.to_string_lossy(), \"My String\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":66959,"byte_end":67012,"line_start":965,"line_end":965,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67017,"byte_end":67024,"line_start":966,"line_end":966,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67937,"byte_end":67945,"line_start":991,"line_end":991,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<UCString<u32>>::from_ptr","value":"pub unsafe fn from_ptr(*const u32, usize) -> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32CString` copied from a `u32` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U32CString` copied from a `u32` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67220,"byte_end":67295,"line_start":972,"line_end":972,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67300,"byte_end":67303,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `u32` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67308,"byte_end":67392,"line_start":974,"line_end":974,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67397,"byte_end":67400,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ The string will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67405,"byte_end":67459,"line_start":976,"line_end":976,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67464,"byte_end":67467,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67472,"byte_end":67486,"line_start":978,"line_end":978,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67491,"byte_end":67494,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67499,"byte_end":67571,"line_start":980,"line_end":980,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain a `Vec<u32>` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67576,"byte_end":67666,"line_start":981,"line_end":981,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67671,"byte_end":67674,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67679,"byte_end":67691,"line_start":983,"line_end":983,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67696,"byte_end":67699,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67704,"byte_end":67798,"line_start":985,"line_end":985,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67803,"byte_end":67816,"line_start":986,"line_end":986,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67821,"byte_end":67824,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67829,"byte_end":67841,"line_start":988,"line_end":988,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67846,"byte_end":67849,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":67854,"byte_end":67918,"line_start":990,"line_end":990,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68879,"byte_end":68897,"line_start":1015,"line_end":1015,"column_start":19,"column_end":37},"name":"from_ptr_unchecked","qualname":"<UCString<u32>>::from_ptr_unchecked","value":"pub unsafe fn from_ptr_unchecked(*const u32, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32CString` copied from a `u32` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U32CString` copied from a `u32` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68204,"byte_end":68279,"line_start":1000,"line_end":1000,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68284,"byte_end":68287,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `u32` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68292,"byte_end":68376,"line_start":1002,"line_end":1002,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68381,"byte_end":68384,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ The string will **not** be checked for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68389,"byte_end":68451,"line_start":1004,"line_end":1004,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68456,"byte_end":68459,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68464,"byte_end":68476,"line_start":1006,"line_end":1006,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68481,"byte_end":68484,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68489,"byte_end":68583,"line_start":1008,"line_end":1008,"column_start":5,"column_end":99}},{"value":"/ elements. In addition, no checking for invalid nul values is performed, so if any elements","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68588,"byte_end":68682,"line_start":1009,"line_end":1009,"column_start":5,"column_end":99}},{"value":"/ of `p` are a nul value, the resulting `U16CString` will be invalid.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68687,"byte_end":68758,"line_start":1010,"line_end":1010,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68763,"byte_end":68766,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68771,"byte_end":68783,"line_start":1012,"line_end":1012,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68788,"byte_end":68791,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":68796,"byte_end":68860,"line_start":1014,"line_end":1014,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69872,"byte_end":69889,"line_start":1043,"line_end":1043,"column_start":19,"column_end":36},"name":"from_ptr_with_nul","qualname":"<UCString<u32>>::from_ptr_with_nul","value":"pub unsafe fn from_ptr_with_nul(*const u32, usize)\n-> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32String` copied from a `u32` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U32String` copied from a `u32` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69144,"byte_end":69218,"line_start":1024,"line_end":1024,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69223,"byte_end":69226,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `u32` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69231,"byte_end":69315,"line_start":1026,"line_end":1026,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69320,"byte_end":69323,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69328,"byte_end":69398,"line_start":1028,"line_end":1028,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69403,"byte_end":69406,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69411,"byte_end":69425,"line_start":1030,"line_end":1030,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69430,"byte_end":69433,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69438,"byte_end":69528,"line_start":1032,"line_end":1032,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec<u32>`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69533,"byte_end":69601,"line_start":1033,"line_end":1033,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69606,"byte_end":69609,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69614,"byte_end":69626,"line_start":1035,"line_end":1035,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69631,"byte_end":69634,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69639,"byte_end":69733,"line_start":1037,"line_end":1037,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69738,"byte_end":69751,"line_start":1038,"line_end":1038,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69756,"byte_end":69759,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69764,"byte_end":69776,"line_start":1040,"line_end":1040,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69781,"byte_end":69784,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":69789,"byte_end":69853,"line_start":1042,"line_end":1042,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71039,"byte_end":71066,"line_start":1072,"line_end":1072,"column_start":19,"column_end":46},"name":"from_ptr_with_nul_unchecked","qualname":"<UCString<u32>>::from_ptr_with_nul_unchecked","value":"pub unsafe fn from_ptr_with_nul_unchecked(*const u32, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32String` copied from a `u32` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U32String` copied from a `u32` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70192,"byte_end":70266,"line_start":1055,"line_end":1055,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70271,"byte_end":70274,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `u32` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70279,"byte_end":70363,"line_start":1057,"line_end":1057,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70368,"byte_end":70371,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ The data should end with a nul terminator, but no checking is done on whether the data","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70376,"byte_end":70466,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ actually ends with a nul terminator, or if the data contains any interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70471,"byte_end":70560,"line_start":1060,"line_end":1060,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70565,"byte_end":70568,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70573,"byte_end":70585,"line_start":1062,"line_end":1062,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70590,"byte_end":70593,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70598,"byte_end":70692,"line_start":1064,"line_end":1064,"column_start":5,"column_end":99}},{"value":"/ elements. In addition, no checking for nul values is performed, so if there data does not","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70697,"byte_end":70790,"line_start":1065,"line_end":1065,"column_start":5,"column_end":98}},{"value":"/ end with a nul terminator, or if there are any interior nul values, the resulting","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70795,"byte_end":70880,"line_start":1066,"line_end":1066,"column_start":5,"column_end":90}},{"value":"/ `U32CString` will be invalid.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70885,"byte_end":70918,"line_start":1067,"line_end":1067,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70923,"byte_end":70926,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70931,"byte_end":70943,"line_start":1069,"line_end":1069,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70948,"byte_end":70951,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":70956,"byte_end":71020,"line_start":1071,"line_end":1071,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72041,"byte_end":72054,"line_start":1100,"line_end":1100,"column_start":19,"column_end":32},"name":"from_char_ptr","qualname":"<UCString<u32>>::from_char_ptr","value":"pub unsafe fn from_char_ptr(*const char, usize) -> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32CString` copied from a `char` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U32CString` copied from a `char` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71322,"byte_end":71398,"line_start":1081,"line_end":1081,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71403,"byte_end":71406,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `char` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71411,"byte_end":71496,"line_start":1083,"line_end":1083,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71501,"byte_end":71504,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ The string will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71509,"byte_end":71563,"line_start":1085,"line_end":1085,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71568,"byte_end":71571,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71576,"byte_end":71590,"line_start":1087,"line_end":1087,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71595,"byte_end":71598,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71603,"byte_end":71675,"line_start":1089,"line_end":1089,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain a `Vec<u32>` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71680,"byte_end":71770,"line_start":1090,"line_end":1090,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71775,"byte_end":71778,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71783,"byte_end":71795,"line_start":1092,"line_end":1092,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71800,"byte_end":71803,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71808,"byte_end":71902,"line_start":1094,"line_end":1094,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71907,"byte_end":71920,"line_start":1095,"line_end":1095,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71925,"byte_end":71928,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71933,"byte_end":71945,"line_start":1097,"line_end":1097,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71950,"byte_end":71953,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":71958,"byte_end":72022,"line_start":1099,"line_end":1099,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72860,"byte_end":72883,"line_start":1119,"line_end":1119,"column_start":19,"column_end":42},"name":"from_char_ptr_unchecked","qualname":"<UCString<u32>>::from_char_ptr_unchecked","value":"pub unsafe fn from_char_ptr_unchecked(*const char, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32CString` copied from a `char` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U32CString` copied from a `char` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72183,"byte_end":72259,"line_start":1104,"line_end":1104,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72264,"byte_end":72267,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `char` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72272,"byte_end":72357,"line_start":1106,"line_end":1106,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72362,"byte_end":72365,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ The string will **not** be checked for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72370,"byte_end":72432,"line_start":1108,"line_end":1108,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72437,"byte_end":72440,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72445,"byte_end":72457,"line_start":1110,"line_end":1110,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72462,"byte_end":72465,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72470,"byte_end":72564,"line_start":1112,"line_end":1112,"column_start":5,"column_end":99}},{"value":"/ elements. In addition, no checking for invalid nul values is performed, so if any elements","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72569,"byte_end":72663,"line_start":1113,"line_end":1113,"column_start":5,"column_end":99}},{"value":"/ of `p` are a nul value, the resulting `U32CString` will be invalid.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72668,"byte_end":72739,"line_start":1114,"line_end":1114,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72744,"byte_end":72747,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72752,"byte_end":72764,"line_start":1116,"line_end":1116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72769,"byte_end":72772,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72777,"byte_end":72841,"line_start":1118,"line_end":1118,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73729,"byte_end":73751,"line_start":1142,"line_end":1142,"column_start":19,"column_end":41},"name":"from_char_ptr_with_nul","qualname":"<UCString<u32>>::from_char_ptr_with_nul","value":"pub unsafe fn from_char_ptr_with_nul(*const char, usize)\n-> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32String` copied from a `char` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U32String` copied from a `char` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":72999,"byte_end":73074,"line_start":1123,"line_end":1123,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73079,"byte_end":73082,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `char` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73087,"byte_end":73172,"line_start":1125,"line_end":1125,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73177,"byte_end":73180,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73185,"byte_end":73255,"line_start":1127,"line_end":1127,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73260,"byte_end":73263,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73268,"byte_end":73282,"line_start":1129,"line_end":1129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73287,"byte_end":73290,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73295,"byte_end":73385,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec<u32>`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73390,"byte_end":73458,"line_start":1132,"line_end":1132,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73463,"byte_end":73466,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73471,"byte_end":73483,"line_start":1134,"line_end":1134,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73488,"byte_end":73491,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73496,"byte_end":73590,"line_start":1136,"line_end":1136,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73595,"byte_end":73608,"line_start":1137,"line_end":1137,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73613,"byte_end":73616,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73621,"byte_end":73633,"line_start":1139,"line_end":1139,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73638,"byte_end":73641,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73646,"byte_end":73710,"line_start":1141,"line_end":1141,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74768,"byte_end":74800,"line_start":1166,"line_end":1166,"column_start":19,"column_end":51},"name":"from_char_ptr_with_nul_unchecked","qualname":"<UCString<u32>>::from_char_ptr_with_nul_unchecked","value":"pub unsafe fn from_char_ptr_with_nul_unchecked(*const char, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32String` copied from a `char` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a new `U32String` copied from a `char` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73919,"byte_end":73994,"line_start":1149,"line_end":1149,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":73999,"byte_end":74002,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `char` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74007,"byte_end":74092,"line_start":1151,"line_end":1151,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74097,"byte_end":74100,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ The data should end with a nul terminator, but no checking is done on whether the data","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74105,"byte_end":74195,"line_start":1153,"line_end":1153,"column_start":5,"column_end":95}},{"value":"/ actually ends with a nul terminator, or if the data contains any interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74200,"byte_end":74289,"line_start":1154,"line_end":1154,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74294,"byte_end":74297,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74302,"byte_end":74314,"line_start":1156,"line_end":1156,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74319,"byte_end":74322,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74327,"byte_end":74421,"line_start":1158,"line_end":1158,"column_start":5,"column_end":99}},{"value":"/ elements. In addition, no checking for nul values is performed, so if there data does not","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74426,"byte_end":74519,"line_start":1159,"line_end":1159,"column_start":5,"column_end":98}},{"value":"/ end with a nul terminator, or if there are any interior nul values, the resulting","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74524,"byte_end":74609,"line_start":1160,"line_end":1160,"column_start":5,"column_end":90}},{"value":"/ `U32CString` will be invalid.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74614,"byte_end":74647,"line_start":1161,"line_end":1161,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74652,"byte_end":74655,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74660,"byte_end":74672,"line_start":1163,"line_end":1163,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74677,"byte_end":74680,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74685,"byte_end":74749,"line_start":1165,"line_end":1165,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75976,"byte_end":75987,"line_start":1200,"line_end":1200,"column_start":12,"column_end":23},"name":"from_os_str","qualname":"<UCString<u32>>::from_os_str","value":"pub fn from_os_str<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(impl AsRef<std::ffi::OsStr>)\n-> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from anything that can be converted to an `OsStr`.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from anything that can be converted to an `OsStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":74925,"byte_end":75005,"line_start":1170,"line_end":1170,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75010,"byte_end":75013,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ The string will be scanned for invalid nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75018,"byte_end":75072,"line_start":1172,"line_end":1172,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75077,"byte_end":75080,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75085,"byte_end":75099,"line_start":1174,"line_end":1174,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75104,"byte_end":75107,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data contains a nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75112,"byte_end":75184,"line_start":1176,"line_end":1176,"column_start":5,"column_end":77}},{"value":"/ The returned error will contain a `Vec<u16>` as well as the position of the nul value.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75189,"byte_end":75279,"line_start":1177,"line_end":1177,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75284,"byte_end":75287,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75292,"byte_end":75306,"line_start":1179,"line_end":1179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75311,"byte_end":75314,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75319,"byte_end":75330,"line_start":1181,"line_end":1181,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75335,"byte_end":75366,"line_start":1182,"line_end":1182,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75371,"byte_end":75394,"line_start":1183,"line_end":1183,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75399,"byte_end":75442,"line_start":1184,"line_end":1184,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U32CString::from_os_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75447,"byte_end":75499,"line_start":1185,"line_end":1185,"column_start":5,"column_end":57}},{"value":"/ # assert_eq!(wcstr.to_string_lossy(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75504,"byte_end":75549,"line_start":1186,"line_end":1186,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75554,"byte_end":75561,"line_start":1187,"line_end":1187,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75566,"byte_end":75569,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75574,"byte_end":75648,"line_start":1189,"line_end":1189,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75653,"byte_end":75656,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75661,"byte_end":75672,"line_start":1191,"line_end":1191,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75677,"byte_end":75708,"line_start":1192,"line_end":1192,"column_start":5,"column_end":36}},{"value":"/ let s = \"My\\u{0}String\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75713,"byte_end":75741,"line_start":1193,"line_end":1193,"column_start":5,"column_end":33}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75746,"byte_end":75789,"line_start":1194,"line_end":1194,"column_start":5,"column_end":48}},{"value":"/ let res = U32CString::from_os_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75794,"byte_end":75835,"line_start":1195,"line_end":1195,"column_start":5,"column_end":46}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75840,"byte_end":75866,"line_start":1196,"line_end":1196,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(res.err().unwrap().nul_position(), 2);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75871,"byte_end":75924,"line_start":1197,"line_end":1197,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75929,"byte_end":75936,"line_start":1198,"line_end":1198,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":75941,"byte_end":75964,"line_start":1199,"line_end":1199,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76891,"byte_end":76912,"line_start":1224,"line_end":1224,"column_start":19,"column_end":40},"name":"from_os_str_unchecked","qualname":"<UCString<u32>>::from_os_str_unchecked","value":"pub unsafe fn from_os_str_unchecked<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(impl AsRef<std::ffi::OsStr>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from anything that can be converted to an `OsStr`, without\n checking for interior nul values.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from anything that can be converted to an `OsStr`, without","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76171,"byte_end":76259,"line_start":1205,"line_end":1205,"column_start":5,"column_end":93}},{"value":"/ checking for interior nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76264,"byte_end":76301,"line_start":1206,"line_end":1206,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76306,"byte_end":76309,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76314,"byte_end":76326,"line_start":1208,"line_end":1208,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76331,"byte_end":76334,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_os_str` except that no runtime assertion is made that","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76339,"byte_end":76431,"line_start":1210,"line_end":1210,"column_start":5,"column_end":97}},{"value":"/ `s` contains no nul values. Providing a string with nul values will result in an invalid","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76436,"byte_end":76528,"line_start":1211,"line_end":1211,"column_start":5,"column_end":97}},{"value":"/ `U32CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76533,"byte_end":76550,"line_start":1212,"line_end":1212,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76555,"byte_end":76558,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76563,"byte_end":76577,"line_start":1214,"line_end":1214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76582,"byte_end":76585,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76590,"byte_end":76601,"line_start":1216,"line_end":1216,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76606,"byte_end":76637,"line_start":1217,"line_end":1217,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76642,"byte_end":76665,"line_start":1218,"line_end":1218,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76670,"byte_end":76713,"line_start":1219,"line_end":1219,"column_start":5,"column_end":48}},{"value":"/ let wcstr = unsafe { U32CString::from_os_str_unchecked(s) };","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76718,"byte_end":76782,"line_start":1220,"line_end":1220,"column_start":5,"column_end":69}},{"value":"/ # assert_eq!(wcstr.to_string_lossy(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76787,"byte_end":76832,"line_start":1221,"line_end":1221,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76837,"byte_end":76844,"line_start":1222,"line_end":1222,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":76849,"byte_end":76872,"line_start":1223,"line_end":1223,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78145,"byte_end":78165,"line_start":1259,"line_end":1259,"column_start":12,"column_end":32},"name":"from_os_str_with_nul","qualname":"<UCString<u32>>::from_os_str_with_nul","value":"pub fn from_os_str_with_nul<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(impl AsRef<std::ffi::OsStr>)\n-> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from anything that can be converted to an `OsStr` with a nul\n terminator.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from anything that can be converted to an `OsStr` with a nul","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77083,"byte_end":77173,"line_start":1229,"line_end":1229,"column_start":5,"column_end":95}},{"value":"/ terminator.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77178,"byte_end":77193,"line_start":1230,"line_end":1230,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77198,"byte_end":77201,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ The string will be truncated at the first nul value in the string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77206,"byte_end":77276,"line_start":1232,"line_end":1232,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77281,"byte_end":77284,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77289,"byte_end":77303,"line_start":1234,"line_end":1234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77308,"byte_end":77311,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if the data does not contain a nul to terminate the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77316,"byte_end":77406,"line_start":1236,"line_end":1236,"column_start":5,"column_end":95}},{"value":"/ string. The returned error will contain the consumed `Vec<u16>`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77411,"byte_end":77479,"line_start":1237,"line_end":1237,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77484,"byte_end":77487,"line_start":1238,"line_end":1238,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77492,"byte_end":77506,"line_start":1239,"line_end":1239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77511,"byte_end":77514,"line_start":1240,"line_end":1240,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77519,"byte_end":77530,"line_start":1241,"line_end":1241,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77535,"byte_end":77566,"line_start":1242,"line_end":1242,"column_start":5,"column_end":36}},{"value":"/ let s = \"My\\u{0}String\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77571,"byte_end":77599,"line_start":1243,"line_end":1243,"column_start":5,"column_end":33}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77604,"byte_end":77647,"line_start":1244,"line_end":1244,"column_start":5,"column_end":48}},{"value":"/ let wcstr = U32CString::from_os_str_with_nul(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77652,"byte_end":77713,"line_start":1245,"line_end":1245,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(wcstr.to_string_lossy(), \"My\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77718,"byte_end":77764,"line_start":1246,"line_end":1246,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77769,"byte_end":77776,"line_start":1247,"line_end":1247,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77781,"byte_end":77784,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ The following example demonstrates errors from missing nul values in a vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77789,"byte_end":77871,"line_start":1249,"line_end":1249,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77876,"byte_end":77879,"line_start":1250,"line_end":1250,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77884,"byte_end":77895,"line_start":1251,"line_end":1251,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77900,"byte_end":77931,"line_start":1252,"line_end":1252,"column_start":5,"column_end":36}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77936,"byte_end":77959,"line_start":1253,"line_end":1253,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":77964,"byte_end":78007,"line_start":1254,"line_end":1254,"column_start":5,"column_end":48}},{"value":"/ let res = U32CString::from_os_str_with_nul(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78012,"byte_end":78062,"line_start":1255,"line_end":1255,"column_start":5,"column_end":55}},{"value":"/ assert!(res.is_err());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78067,"byte_end":78093,"line_start":1256,"line_end":1256,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78098,"byte_end":78105,"line_start":1257,"line_end":1257,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78110,"byte_end":78133,"line_start":1258,"line_end":1258,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79210,"byte_end":79240,"line_start":1285,"line_end":1285,"column_start":19,"column_end":49},"name":"from_os_str_with_nul_unchecked","qualname":"<UCString<u32>>::from_os_str_with_nul_unchecked","value":"pub unsafe fn from_os_str_with_nul_unchecked<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(impl AsRef<std::ffi::OsStr>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from anything that can be converted to an `OsStr` that should\n have a terminating nul, but without checking for any nul values.","sig":null,"attributes":[{"value":"/ Constructs a `U32CString` from anything that can be converted to an `OsStr` that should","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78380,"byte_end":78471,"line_start":1266,"line_end":1266,"column_start":5,"column_end":96}},{"value":"/ have a terminating nul, but without checking for any nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78476,"byte_end":78544,"line_start":1267,"line_end":1267,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78549,"byte_end":78552,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78557,"byte_end":78569,"line_start":1269,"line_end":1269,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78574,"byte_end":78577,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ This method is equivalent to `from_os_str_with_nul` except that no runtime assertion is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78582,"byte_end":78673,"line_start":1271,"line_end":1271,"column_start":5,"column_end":96}},{"value":"/ made that `s` contains no nul values. Providing a vector with interior nul values or","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78678,"byte_end":78766,"line_start":1272,"line_end":1272,"column_start":5,"column_end":93}},{"value":"/ without a terminating nul value will result in an invalid `U32CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78771,"byte_end":78846,"line_start":1273,"line_end":1273,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78851,"byte_end":78854,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78859,"byte_end":78873,"line_start":1275,"line_end":1275,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78878,"byte_end":78881,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78886,"byte_end":78897,"line_start":1277,"line_end":1277,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78902,"byte_end":78933,"line_start":1278,"line_end":1278,"column_start":5,"column_end":36}},{"value":"/ let s = \"My String\\u{0}\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78938,"byte_end":78967,"line_start":1279,"line_end":1279,"column_start":5,"column_end":34}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":78972,"byte_end":79015,"line_start":1280,"line_end":1280,"column_start":5,"column_end":48}},{"value":"/ let wcstr = unsafe { U32CString::from_os_str_with_nul_unchecked(s) };","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79020,"byte_end":79093,"line_start":1281,"line_end":1281,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(wcstr.to_string_lossy(), \"My String\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79098,"byte_end":79151,"line_start":1282,"line_end":1282,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79156,"byte_end":79163,"line_start":1283,"line_end":1283,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79168,"byte_end":79191,"line_start":1284,"line_end":1284,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84660,"byte_end":84672,"line_start":1520,"line_end":1520,"column_start":12,"column_end":24},"name":"nul_position","qualname":"<NulError<C>>::nul_position","value":"pub fn nul_position(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the position of the nul value in the slice that was provided to `U16CString`.\n","sig":null,"attributes":[{"value":"/ Returns the position of the nul value in the slice that was provided to `U16CString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84559,"byte_end":84648,"line_start":1519,"line_end":1519,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84853,"byte_end":84861,"line_start":1526,"line_end":1526,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<NulError<C>>::into_vec","value":"pub fn into_vec(Self) -> Vec<C>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this error, returning the underlying vector of u16 values which generated the error\n in the first place.\n","sig":null,"attributes":[{"value":"/ Consumes this error, returning the underlying vector of u16 values which generated the error","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84717,"byte_end":84813,"line_start":1524,"line_end":1524,"column_start":5,"column_end":101}},{"value":"/ in the first place.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84818,"byte_end":84841,"line_start":1525,"line_end":1525,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86449,"byte_end":86459,"line_start":1574,"line_end":1574,"column_start":10,"column_end":20},"name":"U16CString","qualname":"::ucstring::U16CString","value":"UCString<u16>","parent":null,"children":[],"decl_id":null,"docs":" An owned, mutable C-style \"wide\" string for FFI that is nul-aware and nul-terminated.","sig":null,"attributes":[{"value":"/ An owned, mutable C-style \"wide\" string for FFI that is nul-aware and nul-terminated.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85355,"byte_end":85444,"line_start":1550,"line_end":1550,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85445,"byte_end":85448,"line_start":1551,"line_end":1551,"column_start":1,"column_end":4}},{"value":"/ `U16CString` is aware of nul values. Unless unchecked conversions are used, all `U16CString`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85449,"byte_end":85545,"line_start":1552,"line_end":1552,"column_start":1,"column_end":97}},{"value":"/ strings end with a nul-terminator in the underlying buffer and contain no internal nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85546,"byte_end":85644,"line_start":1553,"line_end":1553,"column_start":1,"column_end":99}},{"value":"/ The strings may still contain invalid or ill-formed UTF-16 data. These strings are intended to","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85645,"byte_end":85743,"line_start":1554,"line_end":1554,"column_start":1,"column_end":99}},{"value":"/ be used with FFI functions such as Windows API that may require nul-terminated strings.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85744,"byte_end":85835,"line_start":1555,"line_end":1555,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85836,"byte_end":85839,"line_start":1556,"line_end":1556,"column_start":1,"column_end":4}},{"value":"/ `U16CString` can be converted to and from many other string types, including `U16String`,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85840,"byte_end":85933,"line_start":1557,"line_end":1557,"column_start":1,"column_end":94}},{"value":"/ `OsString`, and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85934,"byte_end":86004,"line_start":1558,"line_end":1558,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86005,"byte_end":86008,"line_start":1559,"line_end":1559,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86009,"byte_end":86023,"line_start":1560,"line_end":1560,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86024,"byte_end":86027,"line_start":1561,"line_end":1561,"column_start":1,"column_end":4}},{"value":"/ The following example constructs a `U16CString` and shows how to convert a `U16CString` to a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86028,"byte_end":86124,"line_start":1562,"line_end":1562,"column_start":1,"column_end":97}},{"value":"/ regular Rust `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86125,"byte_end":86151,"line_start":1563,"line_end":1563,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86152,"byte_end":86155,"line_start":1564,"line_end":1564,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86156,"byte_end":86167,"line_start":1565,"line_end":1565,"column_start":1,"column_end":12}},{"value":"/ use widestring::U16CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86168,"byte_end":86199,"line_start":1566,"line_end":1566,"column_start":1,"column_end":32}},{"value":"/ let s = \"Test\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86200,"byte_end":86219,"line_start":1567,"line_end":1567,"column_start":1,"column_end":20}},{"value":"/ // Create a wide string from the rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86220,"byte_end":86268,"line_start":1568,"line_end":1568,"column_start":1,"column_end":49}},{"value":"/ let wstr = U16CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86269,"byte_end":86317,"line_start":1569,"line_end":1569,"column_start":1,"column_end":49}},{"value":"/ // Convert back to a rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86318,"byte_end":86354,"line_start":1570,"line_end":1570,"column_start":1,"column_end":37}},{"value":"/ let rust_str = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86355,"byte_end":86397,"line_start":1571,"line_end":1571,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(rust_str, \"Test\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86398,"byte_end":86431,"line_start":1572,"line_end":1572,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86432,"byte_end":86439,"line_start":1573,"line_end":1573,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87570,"byte_end":87580,"line_start":1600,"line_end":1600,"column_start":10,"column_end":20},"name":"U32CString","qualname":"::ucstring::U32CString","value":"UCString<u32>","parent":null,"children":[],"decl_id":null,"docs":" An owned, mutable C-style wide string for FFI that is nul-aware and nul-terminated.","sig":null,"attributes":[{"value":"/ An owned, mutable C-style wide string for FFI that is nul-aware and nul-terminated.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86478,"byte_end":86565,"line_start":1576,"line_end":1576,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86566,"byte_end":86569,"line_start":1577,"line_end":1577,"column_start":1,"column_end":4}},{"value":"/ `U32CString` is aware of nul values. Unless unchecked conversions are used, all `U32CString`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86570,"byte_end":86666,"line_start":1578,"line_end":1578,"column_start":1,"column_end":97}},{"value":"/ strings end with a nul-terminator in the underlying buffer and contain no internal nul values.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86667,"byte_end":86765,"line_start":1579,"line_end":1579,"column_start":1,"column_end":99}},{"value":"/ The strings may still contain invalid or ill-formed UTF-32 data. These strings are intended to","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86766,"byte_end":86864,"line_start":1580,"line_end":1580,"column_start":1,"column_end":99}},{"value":"/ be used with FFI functions such as Windows API that may require nul-terminated strings.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86865,"byte_end":86956,"line_start":1581,"line_end":1581,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86957,"byte_end":86960,"line_start":1582,"line_end":1582,"column_start":1,"column_end":4}},{"value":"/ `U32CString` can be converted to and from many other string types, including `U32String`,","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":86961,"byte_end":87054,"line_start":1583,"line_end":1583,"column_start":1,"column_end":94}},{"value":"/ `OsString`, and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87055,"byte_end":87125,"line_start":1584,"line_end":1584,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87126,"byte_end":87129,"line_start":1585,"line_end":1585,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87130,"byte_end":87144,"line_start":1586,"line_end":1586,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87145,"byte_end":87148,"line_start":1587,"line_end":1587,"column_start":1,"column_end":4}},{"value":"/ The following example constructs a `U32CString` and shows how to convert a `U32CString` to a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87149,"byte_end":87245,"line_start":1588,"line_end":1588,"column_start":1,"column_end":97}},{"value":"/ regular Rust `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87246,"byte_end":87272,"line_start":1589,"line_end":1589,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87273,"byte_end":87276,"line_start":1590,"line_end":1590,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87277,"byte_end":87288,"line_start":1591,"line_end":1591,"column_start":1,"column_end":12}},{"value":"/ use widestring::U32CString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87289,"byte_end":87320,"line_start":1592,"line_end":1592,"column_start":1,"column_end":32}},{"value":"/ let s = \"Test\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87321,"byte_end":87340,"line_start":1593,"line_end":1593,"column_start":1,"column_end":20}},{"value":"/ // Create a wide string from the rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87341,"byte_end":87389,"line_start":1594,"line_end":1594,"column_start":1,"column_end":49}},{"value":"/ let wstr = U32CString::from_str(s).unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87390,"byte_end":87438,"line_start":1595,"line_end":1595,"column_start":1,"column_end":49}},{"value":"/ // Convert back to a rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87439,"byte_end":87475,"line_start":1596,"line_end":1596,"column_start":1,"column_end":37}},{"value":"/ let rust_str = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87476,"byte_end":87518,"line_start":1597,"line_end":1597,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(rust_str, \"Test\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87519,"byte_end":87552,"line_start":1598,"line_end":1598,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87553,"byte_end":87560,"line_start":1599,"line_end":1599,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87728,"byte_end":87739,"line_start":1603,"line_end":1603,"column_start":10,"column_end":21},"name":"WideCString","qualname":"::ucstring::WideCString","value":"UCString<WideChar>","parent":null,"children":[],"decl_id":null,"docs":" Alias for `U16String` or `U32String` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"/ Alias for `U16String` or `U32String` depending on platform. Intended to match typical C `wchar_t` size on platform.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":87599,"byte_end":87718,"line_start":1602,"line_end":1602,"column_start":1,"column_end":120}}]},{"kind":"Struct","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88273,"byte_end":88287,"line_start":21,"line_end":21,"column_start":12,"column_end":26},"name":"FromUtf32Error","qualname":"::ustr::FromUtf32Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" A possible error value when converting a String from a UTF-32 byte slice.","sig":null,"attributes":[{"value":"/ A possible error value when converting a String from a UTF-32 byte slice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88063,"byte_end":88140,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88141,"byte_end":88144,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This type is the error type for the `to_string` method on `U32Str`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88145,"byte_end":88216,"line_start":19,"line_end":19,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89542,"byte_end":89546,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"UStr","qualname":"::ustr::UStr","value":"UStr {  }","parent":null,"children":[{"krate":0,"index":769}],"decl_id":null,"docs":" String slice reference for `U16String`.","sig":null,"attributes":[{"value":"/ String slice reference for `U16String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88641,"byte_end":88684,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88685,"byte_end":88688,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ `UStr` is to `UString` as `str` is to `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88689,"byte_end":88740,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88741,"byte_end":88744,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ `UStr` is not aware of nul values. Strings may or may not be nul-terminated, and may","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88745,"byte_end":88833,"line_start":40,"line_end":40,"column_start":1,"column_end":89}},{"value":"/ contain invalid and ill-formed UTF-16 or UTF-32 data. These strings are intended to be used","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88834,"byte_end":88929,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ with FFI functions that directly use string length, where the strings are known to have proper","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88930,"byte_end":89028,"line_start":42,"line_end":42,"column_start":1,"column_end":99}},{"value":"/ nul-termination already, or where strings are merely being passed through without modification.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89029,"byte_end":89128,"line_start":43,"line_end":43,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89129,"byte_end":89132,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ `UCStr` should be used instead of nul-aware strings are required.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89133,"byte_end":89202,"line_start":45,"line_end":45,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89203,"byte_end":89206,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ `UStr` can be converted to many other string types, including `OsString` and `String`, making","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89207,"byte_end":89304,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89305,"byte_end":89342,"line_start":48,"line_end":48,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89343,"byte_end":89346,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Please prefer using the type aliases `U16Str` or `U32Str` or `WideStr` to using this type","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89347,"byte_end":89440,"line_start":50,"line_end":50,"column_start":1,"column_end":94}},{"value":"/ directly.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89441,"byte_end":89454,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89510,"byte_end":89530,"line_start":53,"line_end":53,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89664,"byte_end":89667,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<UStr<C>>::new","value":"pub fn new<S: AsRef<Self> + ?Sized>(&S) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Coerces a value into a `UStr`.\n","sig":null,"attributes":[{"value":"/ Coerces a value into a `UStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89618,"byte_end":89652,"line_start":59,"line_end":59,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90497,"byte_end":90505,"line_start":83,"line_end":83,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<UStr<C>>::from_ptr","value":"pub unsafe fn from_ptr<'a>(*const C, usize) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UStr` from a pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a `UStr` from a pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89741,"byte_end":89793,"line_start":64,"line_end":64,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89798,"byte_end":89801,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89806,"byte_end":89884,"line_start":66,"line_end":66,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89889,"byte_end":89892,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89897,"byte_end":89909,"line_start":68,"line_end":68,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89914,"byte_end":89917,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89922,"byte_end":90016,"line_start":70,"line_end":70,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90021,"byte_end":90034,"line_start":71,"line_end":71,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90039,"byte_end":90042,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90047,"byte_end":90059,"line_start":73,"line_end":73,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90064,"byte_end":90067,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ This function panics if `p` is null.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90072,"byte_end":90112,"line_start":75,"line_end":75,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90117,"byte_end":90120,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Caveat","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90125,"byte_end":90137,"line_start":77,"line_end":77,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90142,"byte_end":90145,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ The lifetime for the returned string is inferred from its usage. To prevent accidental","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90150,"byte_end":90240,"line_start":79,"line_end":79,"column_start":5,"column_end":95}},{"value":"/ misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90245,"byte_end":90335,"line_start":80,"line_end":80,"column_start":5,"column_end":95}},{"value":"/ context, such as by providing a helper function taking the lifetime of a host value for the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90340,"byte_end":90435,"line_start":81,"line_end":81,"column_start":5,"column_end":100}},{"value":"/ string, or by explicit annotation.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90440,"byte_end":90478,"line_start":82,"line_end":82,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90808,"byte_end":90818,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<UStr<C>>::from_slice","value":"pub fn from_slice(&[C]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UStr` from a slice of code points.","sig":null,"attributes":[{"value":"/ Constructs a `UStr` from a slice of code points.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90690,"byte_end":90742,"line_start":89,"line_end":89,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90747,"byte_end":90750,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ No checks are performed on the slice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90755,"byte_end":90796,"line_start":91,"line_end":91,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91026,"byte_end":91036,"line_start":99,"line_end":99,"column_start":12,"column_end":22},"name":"to_ustring","qualname":"<UStr<C>>::to_ustring","value":"pub fn to_ustring(&Self) -> crate::UString<C>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a new owned `UString`.\n","sig":null,"attributes":[{"value":"/ Copies the wide string to a new owned `UString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90932,"byte_end":90984,"line_start":97,"line_end":97,"column_start":5,"column_end":57}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":90989,"byte_end":91014,"line_start":98,"line_end":98,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91179,"byte_end":91187,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<UStr<C>>::as_slice","value":"pub fn as_slice(&Self) -> &[C]","parent":null,"children":[],"decl_id":null,"docs":" Converts to a slice of the wide string.\n","sig":null,"attributes":[{"value":"/ Converts to a slice of the wide string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91124,"byte_end":91167,"line_start":103,"line_end":103,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91378,"byte_end":91384,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<UStr<C>>::as_ptr","value":"pub fn as_ptr(&Self) -> *const C","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the wide string.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the wide string.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91236,"byte_end":91281,"line_start":108,"line_end":108,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91286,"byte_end":91289,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ The pointer is valid only as long as the lifetime of this reference.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91294,"byte_end":91366,"line_start":110,"line_end":110,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91547,"byte_end":91550,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"len","qualname":"<UStr<C>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the wide string as number of elements (**not** number of bytes).\n","sig":null,"attributes":[{"value":"/ Returns the length of the wide string as number of elements (**not** number of bytes).","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91445,"byte_end":91535,"line_start":115,"line_end":115,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91671,"byte_end":91679,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<UStr<C>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this wide string contains no data.\n","sig":null,"attributes":[{"value":"/ Returns whether this wide string contains no data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91605,"byte_end":91659,"line_start":120,"line_end":120,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91854,"byte_end":91866,"line_start":127,"line_end":127,"column_start":12,"column_end":24},"name":"into_ustring","qualname":"<UStr<C>>::into_ustring","value":"pub fn into_ustring(Box<Self>) -> crate::UString<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<UStr>` into a `UString` without copying or allocating.\n","sig":null,"attributes":[{"value":"/ Converts a `Box<UStr>` into a `UString` without copying or allocating.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91738,"byte_end":91812,"line_start":125,"line_end":125,"column_start":5,"column_end":79}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":91817,"byte_end":91842,"line_start":126,"line_end":126,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92770,"byte_end":92782,"line_start":155,"line_end":155,"column_start":12,"column_end":24},"name":"to_os_string","qualname":"<UStr<u16>>::to_os_string","value":"pub fn to_os_string(&Self) -> std::ffi::OsString","parent":null,"children":[],"decl_id":null,"docs":" Decodes a wide string to an owned `OsString`.","sig":null,"attributes":[{"value":"/ Decodes a wide string to an owned `OsString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92088,"byte_end":92137,"line_start":136,"line_end":136,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92142,"byte_end":92145,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This makes a string copy of the `U16Str`. Since `U16Str` makes no guarantees that it is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92150,"byte_end":92241,"line_start":138,"line_end":138,"column_start":5,"column_end":96}},{"value":"/ valid UTF-16, there is no guarantee that the resulting `OsString` will be valid data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92246,"byte_end":92335,"line_start":139,"line_end":139,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92340,"byte_end":92343,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92348,"byte_end":92362,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92367,"byte_end":92370,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92375,"byte_end":92386,"line_start":143,"line_end":143,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92391,"byte_end":92421,"line_start":144,"line_end":144,"column_start":5,"column_end":35}},{"value":"/ use std::ffi::OsString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92426,"byte_end":92453,"line_start":145,"line_end":145,"column_start":5,"column_end":32}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92458,"byte_end":92481,"line_start":146,"line_end":146,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92486,"byte_end":92529,"line_start":147,"line_end":147,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92534,"byte_end":92572,"line_start":148,"line_end":148,"column_start":5,"column_end":43}},{"value":"/ // Create an OsString from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92577,"byte_end":92623,"line_start":149,"line_end":149,"column_start":5,"column_end":51}},{"value":"/ let osstr = wstr.to_os_string();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92628,"byte_end":92664,"line_start":150,"line_end":150,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92669,"byte_end":92672,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(osstr, OsString::from(s));","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92677,"byte_end":92718,"line_start":152,"line_end":152,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92723,"byte_end":92730,"line_start":153,"line_end":153,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92735,"byte_end":92758,"line_start":154,"line_end":154,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93452,"byte_end":93461,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"to_string","qualname":"<UStr<u16>>::to_string","value":"pub fn to_string(&Self) -> Result<String, FromUtf16Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String` if it contains valid UTF-16 data.","sig":null,"attributes":[{"value":"/ Copies the wide string to a `String` if it contains valid UTF-16 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92876,"byte_end":92950,"line_start":159,"line_end":159,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92955,"byte_end":92958,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92963,"byte_end":92977,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92982,"byte_end":92985,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the string contains any invalid UTF-16 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92990,"byte_end":93058,"line_start":163,"line_end":163,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93063,"byte_end":93066,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93071,"byte_end":93085,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93090,"byte_end":93093,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93098,"byte_end":93109,"line_start":167,"line_end":167,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93114,"byte_end":93144,"line_start":168,"line_end":168,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93149,"byte_end":93172,"line_start":169,"line_end":169,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93177,"byte_end":93220,"line_start":170,"line_end":170,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93225,"byte_end":93263,"line_start":171,"line_end":171,"column_start":5,"column_end":43}},{"value":"/ // Create a regular string from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93268,"byte_end":93319,"line_start":172,"line_end":172,"column_start":5,"column_end":56}},{"value":"/ let s2 = wstr.to_string().unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93324,"byte_end":93363,"line_start":173,"line_end":173,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93368,"byte_end":93371,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s2, s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93376,"byte_end":93398,"line_start":175,"line_end":175,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93403,"byte_end":93410,"line_start":176,"line_end":176,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93415,"byte_end":93440,"line_start":177,"line_end":177,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94086,"byte_end":94101,"line_start":199,"line_end":199,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<UStr<u16>>::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String`.","sig":null,"attributes":[{"value":"/ Copies the wide string to a `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93556,"byte_end":93597,"line_start":182,"line_end":182,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93602,"byte_end":93605,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Any non-Unicode sequences are replaced with *U+FFFD REPLACEMENT CHARACTER*.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93610,"byte_end":93689,"line_start":184,"line_end":184,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93694,"byte_end":93697,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93702,"byte_end":93716,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93721,"byte_end":93724,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93729,"byte_end":93740,"line_start":188,"line_end":188,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93745,"byte_end":93775,"line_start":189,"line_end":189,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93780,"byte_end":93803,"line_start":190,"line_end":190,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93808,"byte_end":93851,"line_start":191,"line_end":191,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93856,"byte_end":93894,"line_start":192,"line_end":192,"column_start":5,"column_end":43}},{"value":"/ // Create a regular string from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93899,"byte_end":93950,"line_start":193,"line_end":193,"column_start":5,"column_end":56}},{"value":"/ let lossy = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93955,"byte_end":93994,"line_start":194,"line_end":194,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":93999,"byte_end":94002,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lossy, s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94007,"byte_end":94032,"line_start":196,"line_end":196,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94037,"byte_end":94044,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94049,"byte_end":94074,"line_start":198,"line_end":198,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94969,"byte_end":94982,"line_start":224,"line_end":224,"column_start":19,"column_end":32},"name":"from_char_ptr","qualname":"<UStr<u32>>::from_char_ptr","value":"pub unsafe fn from_char_ptr<'a>(*const char, usize) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32Str` from a `char` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a `U32Str` from a `char` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94197,"byte_end":94258,"line_start":205,"line_end":205,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94263,"byte_end":94266,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `char` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94271,"byte_end":94356,"line_start":207,"line_end":207,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94361,"byte_end":94364,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94369,"byte_end":94381,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94386,"byte_end":94389,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94394,"byte_end":94488,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94493,"byte_end":94506,"line_start":212,"line_end":212,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94511,"byte_end":94514,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94519,"byte_end":94531,"line_start":214,"line_end":214,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94536,"byte_end":94539,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ This function panics if `p` is null.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94544,"byte_end":94584,"line_start":216,"line_end":216,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94589,"byte_end":94592,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Caveat","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94597,"byte_end":94609,"line_start":218,"line_end":218,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94614,"byte_end":94617,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The lifetime for the returned string is inferred from its usage. To prevent accidental","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94622,"byte_end":94712,"line_start":220,"line_end":220,"column_start":5,"column_end":95}},{"value":"/ misuse, it's suggested to tie the lifetime to whichever source lifetime is safe in the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94717,"byte_end":94807,"line_start":221,"line_end":221,"column_start":5,"column_end":95}},{"value":"/ context, such as by providing a helper function taking the lifetime of a host value for the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94812,"byte_end":94907,"line_start":222,"line_end":222,"column_start":5,"column_end":100}},{"value":"/ string, or by explicit annotation.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94912,"byte_end":94950,"line_start":223,"line_end":223,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95211,"byte_end":95226,"line_start":231,"line_end":231,"column_start":12,"column_end":27},"name":"from_char_slice","qualname":"<UStr<u32>>::from_char_slice","value":"pub fn from_char_slice(&[char]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32Str` from a slice of `u32` code points.","sig":null,"attributes":[{"value":"/ Constructs a `U32Str` from a slice of `u32` code points.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95085,"byte_end":95145,"line_start":228,"line_end":228,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95150,"byte_end":95153,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ No checks are performed on the slice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95158,"byte_end":95199,"line_start":230,"line_end":230,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96038,"byte_end":96050,"line_start":255,"line_end":255,"column_start":12,"column_end":24},"name":"to_os_string","qualname":"<UStr<u32>>::to_os_string","value":"pub fn to_os_string(&Self) -> std::ffi::OsString","parent":null,"children":[],"decl_id":null,"docs":" Decodes a wide string to an owned `OsString`.","sig":null,"attributes":[{"value":"/ Decodes a wide string to an owned `OsString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95356,"byte_end":95405,"line_start":236,"line_end":236,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95410,"byte_end":95413,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ This makes a string copy of the `U32Str`. Since `U32Str` makes no guarantees that it is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95418,"byte_end":95509,"line_start":238,"line_end":238,"column_start":5,"column_end":96}},{"value":"/ valid UTF-32, there is no guarantee that the resulting `OsString` will be valid data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95514,"byte_end":95603,"line_start":239,"line_end":239,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95608,"byte_end":95611,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95616,"byte_end":95630,"line_start":241,"line_end":241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95635,"byte_end":95638,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95643,"byte_end":95654,"line_start":243,"line_end":243,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95659,"byte_end":95689,"line_start":244,"line_end":244,"column_start":5,"column_end":35}},{"value":"/ use std::ffi::OsString;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95694,"byte_end":95721,"line_start":245,"line_end":245,"column_start":5,"column_end":32}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95726,"byte_end":95749,"line_start":246,"line_end":246,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95754,"byte_end":95797,"line_start":247,"line_end":247,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95802,"byte_end":95840,"line_start":248,"line_end":248,"column_start":5,"column_end":43}},{"value":"/ // Create an OsString from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95845,"byte_end":95891,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/ let osstr = wstr.to_os_string();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95896,"byte_end":95932,"line_start":250,"line_end":250,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95937,"byte_end":95940,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(osstr, OsString::from(s));","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95945,"byte_end":95986,"line_start":252,"line_end":252,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":95991,"byte_end":95998,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96003,"byte_end":96026,"line_start":254,"line_end":254,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96707,"byte_end":96716,"line_start":278,"line_end":278,"column_start":12,"column_end":21},"name":"to_string","qualname":"<UStr<u32>>::to_string","value":"pub fn to_string(&Self) -> Result<String, FromUtf32Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String` if it contains valid UTF-32 data.","sig":null,"attributes":[{"value":"/ Copies the wide string to a `String` if it contains valid UTF-32 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96131,"byte_end":96205,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96210,"byte_end":96213,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96218,"byte_end":96232,"line_start":261,"line_end":261,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96237,"byte_end":96240,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the string contains any invalid UTF-32 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96245,"byte_end":96313,"line_start":263,"line_end":263,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96318,"byte_end":96321,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96326,"byte_end":96340,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96345,"byte_end":96348,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96353,"byte_end":96364,"line_start":267,"line_end":267,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96369,"byte_end":96399,"line_start":268,"line_end":268,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96404,"byte_end":96427,"line_start":269,"line_end":269,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96432,"byte_end":96475,"line_start":270,"line_end":270,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96480,"byte_end":96518,"line_start":271,"line_end":271,"column_start":5,"column_end":43}},{"value":"/ // Create a regular string from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96523,"byte_end":96574,"line_start":272,"line_end":272,"column_start":5,"column_end":56}},{"value":"/ let s2 = wstr.to_string().unwrap();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96579,"byte_end":96618,"line_start":273,"line_end":273,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96623,"byte_end":96626,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s2, s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96631,"byte_end":96653,"line_start":275,"line_end":275,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96658,"byte_end":96665,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":96670,"byte_end":96695,"line_start":277,"line_end":277,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97874,"byte_end":97889,"line_start":311,"line_end":311,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<UStr<u32>>::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String`.","sig":null,"attributes":[{"value":"/ Copies the wide string to a `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97344,"byte_end":97385,"line_start":294,"line_end":294,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97390,"byte_end":97393,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ Any non-Unicode sequences are replaced with *U+FFFD REPLACEMENT CHARACTER*.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97398,"byte_end":97477,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97482,"byte_end":97485,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97490,"byte_end":97504,"line_start":298,"line_end":298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97509,"byte_end":97512,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97517,"byte_end":97528,"line_start":300,"line_end":300,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97533,"byte_end":97563,"line_start":301,"line_end":301,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97568,"byte_end":97591,"line_start":302,"line_end":302,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97596,"byte_end":97639,"line_start":303,"line_end":303,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97644,"byte_end":97682,"line_start":304,"line_end":304,"column_start":5,"column_end":43}},{"value":"/ // Create a regular string from the wide string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97687,"byte_end":97738,"line_start":305,"line_end":305,"column_start":5,"column_end":56}},{"value":"/ let lossy = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97743,"byte_end":97782,"line_start":306,"line_end":306,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97787,"byte_end":97790,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lossy, s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97795,"byte_end":97820,"line_start":308,"line_end":308,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97825,"byte_end":97832,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":97837,"byte_end":97862,"line_start":310,"line_end":310,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99139,"byte_end":99145,"line_start":342,"line_end":342,"column_start":10,"column_end":16},"name":"U16Str","qualname":"::ustr::U16Str","value":"UStr<u16>","parent":null,"children":[],"decl_id":null,"docs":" String slice reference for `U16String`.","sig":null,"attributes":[{"value":"/ String slice reference for `U16String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98427,"byte_end":98470,"line_start":329,"line_end":329,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98471,"byte_end":98474,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ `U16Str` is to `U16String` as `str` is to `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98475,"byte_end":98530,"line_start":331,"line_end":331,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98531,"byte_end":98534,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ `U16Str` is not aware of nul values. Strings may or may not be nul-terminated, and may","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98535,"byte_end":98625,"line_start":333,"line_end":333,"column_start":1,"column_end":91}},{"value":"/ contain invalid and ill-formed UTF-16 data. These strings are intended to be used with","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98626,"byte_end":98716,"line_start":334,"line_end":334,"column_start":1,"column_end":91}},{"value":"/ FFI functions that directly use string length, where the strings are known to have proper","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98717,"byte_end":98810,"line_start":335,"line_end":335,"column_start":1,"column_end":94}},{"value":"/ nul-termination already, or where strings are merely being passed through without modification.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98811,"byte_end":98910,"line_start":336,"line_end":336,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98911,"byte_end":98914,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ `WideCStr` should be used instead of nul-aware strings are required.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98915,"byte_end":98987,"line_start":338,"line_end":338,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98988,"byte_end":98991,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ `U16Str` can be converted to many other string types, including `OsString` and `String`, making","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":98992,"byte_end":99091,"line_start":340,"line_end":340,"column_start":1,"column_end":100}},{"value":"/ proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99092,"byte_end":99129,"line_start":341,"line_end":341,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99872,"byte_end":99878,"line_start":357,"line_end":357,"column_start":10,"column_end":16},"name":"U32Str","qualname":"::ustr::U32Str","value":"UStr<u32>","parent":null,"children":[],"decl_id":null,"docs":" String slice reference for `U32String`.","sig":null,"attributes":[{"value":"/ String slice reference for `U32String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99160,"byte_end":99203,"line_start":344,"line_end":344,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99204,"byte_end":99207,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ `U32Str` is to `U32String` as `str` is to `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99208,"byte_end":99263,"line_start":346,"line_end":346,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99264,"byte_end":99267,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ `U32Str` is not aware of nul values. Strings may or may not be nul-terminated, and may","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99268,"byte_end":99358,"line_start":348,"line_end":348,"column_start":1,"column_end":91}},{"value":"/ contain invalid and ill-formed UTF-32 data. These strings are intended to be used with","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99359,"byte_end":99449,"line_start":349,"line_end":349,"column_start":1,"column_end":91}},{"value":"/ FFI functions that directly use string length, where the strings are known to have proper","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99450,"byte_end":99543,"line_start":350,"line_end":350,"column_start":1,"column_end":94}},{"value":"/ nul-termination already, or where strings are merely being passed through without modification.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99544,"byte_end":99643,"line_start":351,"line_end":351,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99644,"byte_end":99647,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ `WideCStr` should be used instead of nul-aware strings are required.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99648,"byte_end":99720,"line_start":353,"line_end":353,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99721,"byte_end":99724,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ `U32Str` can be converted to many other string types, including `OsString` and `String`, making","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99725,"byte_end":99824,"line_start":355,"line_end":355,"column_start":1,"column_end":100}},{"value":"/ proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99825,"byte_end":99862,"line_start":356,"line_end":356,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":100016,"byte_end":100023,"line_start":360,"line_end":360,"column_start":10,"column_end":17},"name":"WideStr","qualname":"::ustr::WideStr","value":"UStr<WideChar>","parent":null,"children":[],"decl_id":null,"docs":" Alias for `U16Str` or `U32Str` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"/ Alias for `U16Str` or `U32Str` depending on platform. Intended to match typical C `wchar_t` size on platform.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":99893,"byte_end":100006,"line_start":359,"line_end":359,"column_start":1,"column_end":114}}]},{"kind":"Struct","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102165,"byte_end":102172,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"UString","qualname":"::ustring::UString","value":"UString {  }","parent":null,"children":[{"krate":0,"index":796}],"decl_id":null,"docs":" An owned, mutable \"wide\" string for FFI that is **not** nul-aware.","sig":null,"attributes":[{"value":"/ An owned, mutable \"wide\" string for FFI that is **not** nul-aware.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":100485,"byte_end":100555,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":100556,"byte_end":100559,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ `UString` is not aware of nul values. Strings may or may not be nul-terminated, and may","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":100560,"byte_end":100651,"line_start":25,"line_end":25,"column_start":1,"column_end":92}},{"value":"/ contain invalid and ill-formed UTF-16 or UTF-32 data. These strings are intended to be used","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":100652,"byte_end":100747,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ with FFI functions that directly use string length, where the strings are known to have proper","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":100748,"byte_end":100846,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ nul-termination already, or where strings are merely being passed through without modification.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":100847,"byte_end":100946,"line_start":28,"line_end":28,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":100947,"byte_end":100950,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `UCString` should be used instead if nul-aware strings are required.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":100951,"byte_end":101023,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101024,"byte_end":101027,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ `UString` can be converted to and from many other standard Rust string types, including","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101028,"byte_end":101119,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/ `OsString` and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101120,"byte_end":101189,"line_start":33,"line_end":33,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101190,"byte_end":101193,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Please prefer using the type aliases `U16String` or `U32String` or `WideString` to using this","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101194,"byte_end":101291,"line_start":35,"line_end":35,"column_start":1,"column_end":98}},{"value":"/ type directly.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101292,"byte_end":101310,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101311,"byte_end":101314,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101315,"byte_end":101329,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101330,"byte_end":101333,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The following example constructs a `U16String` and shows how to convert a `U16String` to a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101334,"byte_end":101428,"line_start":40,"line_end":40,"column_start":1,"column_end":95}},{"value":"/ regular Rust `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101429,"byte_end":101455,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101456,"byte_end":101459,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101460,"byte_end":101471,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101472,"byte_end":101502,"line_start":44,"line_end":44,"column_start":1,"column_end":31}},{"value":"/ let s = \"Test\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101503,"byte_end":101522,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/ // Create a wide string from the rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101523,"byte_end":101571,"line_start":46,"line_end":46,"column_start":1,"column_end":49}},{"value":"/ let wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101572,"byte_end":101610,"line_start":47,"line_end":47,"column_start":1,"column_end":39}},{"value":"/ // Convert back to a rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101611,"byte_end":101647,"line_start":48,"line_end":48,"column_start":1,"column_end":37}},{"value":"/ let rust_str = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101648,"byte_end":101690,"line_start":49,"line_end":49,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(rust_str, \"Test\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101691,"byte_end":101724,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101725,"byte_end":101732,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101733,"byte_end":101736,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The same example using `U32String` instead:","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101737,"byte_end":101784,"line_start":53,"line_end":53,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101785,"byte_end":101788,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101789,"byte_end":101800,"line_start":55,"line_end":55,"column_start":1,"column_end":12}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101801,"byte_end":101831,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"/ let s = \"Test\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101832,"byte_end":101851,"line_start":57,"line_end":57,"column_start":1,"column_end":20}},{"value":"/ // Create a wide string from the rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101852,"byte_end":101900,"line_start":58,"line_end":58,"column_start":1,"column_end":49}},{"value":"/ let wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101901,"byte_end":101939,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ // Convert back to a rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101940,"byte_end":101976,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/ let rust_str = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":101977,"byte_end":102019,"line_start":61,"line_end":61,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(rust_str, \"Test\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102020,"byte_end":102053,"line_start":62,"line_end":62,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102054,"byte_end":102061,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102133,"byte_end":102153,"line_start":65,"line_end":65,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102299,"byte_end":102302,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<UString<C>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new empty `UString`.\n","sig":null,"attributes":[{"value":"/ Constructs a new empty `UString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102250,"byte_end":102287,"line_start":71,"line_end":71,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103177,"byte_end":103185,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<UString<C>>::from_vec","value":"pub fn from_vec<impl Into<Vec<C>>: Into<Vec<C>>>(impl Into<Vec<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UString` from a vector of possibly invalid or ill-formed UTF-16 or UTF-32\n data.","sig":null,"attributes":[{"value":"/ Constructs a `UString` from a vector of possibly invalid or ill-formed UTF-16 or UTF-32","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102361,"byte_end":102452,"line_start":76,"line_end":76,"column_start":5,"column_end":96}},{"value":"/ data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102457,"byte_end":102466,"line_start":77,"line_end":77,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102471,"byte_end":102474,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ No checks are made on the contents of the vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102479,"byte_end":102532,"line_start":79,"line_end":79,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102537,"byte_end":102540,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102545,"byte_end":102559,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102564,"byte_end":102567,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102572,"byte_end":102583,"line_start":83,"line_end":83,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102588,"byte_end":102618,"line_start":84,"line_end":84,"column_start":5,"column_end":35}},{"value":"/ let v = vec![84u16, 104u16, 101u16]; // 'T' 'h' 'e'","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102623,"byte_end":102678,"line_start":85,"line_end":85,"column_start":5,"column_end":60}},{"value":"/ # let cloned = v.clone();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102683,"byte_end":102712,"line_start":86,"line_end":86,"column_start":5,"column_end":34}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102717,"byte_end":102760,"line_start":87,"line_end":87,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16String::from_vec(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102765,"byte_end":102803,"line_start":88,"line_end":88,"column_start":5,"column_end":43}},{"value":"/ # assert_eq!(wstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102808,"byte_end":102850,"line_start":89,"line_end":89,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102855,"byte_end":102862,"line_start":90,"line_end":90,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102867,"byte_end":102870,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102875,"byte_end":102886,"line_start":92,"line_end":92,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102891,"byte_end":102921,"line_start":93,"line_end":93,"column_start":5,"column_end":35}},{"value":"/ let v = vec![84u32, 104u32, 101u32]; // 'T' 'h' 'e'","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102926,"byte_end":102981,"line_start":94,"line_end":94,"column_start":5,"column_end":60}},{"value":"/ # let cloned = v.clone();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102986,"byte_end":103015,"line_start":95,"line_end":95,"column_start":5,"column_end":34}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103020,"byte_end":103063,"line_start":96,"line_end":96,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32String::from_vec(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103068,"byte_end":103106,"line_start":97,"line_end":97,"column_start":5,"column_end":43}},{"value":"/ # assert_eq!(wstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103111,"byte_end":103153,"line_start":98,"line_end":98,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103158,"byte_end":103165,"line_start":99,"line_end":99,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103683,"byte_end":103691,"line_start":116,"line_end":116,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<UString<C>>::from_ptr","value":"pub unsafe fn from_ptr(*const C, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UString` from a pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a `UString` from a pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103266,"byte_end":103321,"line_start":104,"line_end":104,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103326,"byte_end":103329,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103334,"byte_end":103412,"line_start":106,"line_end":106,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103417,"byte_end":103420,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103425,"byte_end":103437,"line_start":108,"line_end":108,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103442,"byte_end":103445,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103450,"byte_end":103544,"line_start":110,"line_end":110,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103549,"byte_end":103562,"line_start":111,"line_end":111,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103567,"byte_end":103570,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103575,"byte_end":103587,"line_start":113,"line_end":113,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103592,"byte_end":103595,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103600,"byte_end":103664,"line_start":115,"line_end":115,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104157,"byte_end":104170,"line_start":129,"line_end":129,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<UString<C>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `UString` with the given capacity.","sig":null,"attributes":[{"value":"/ Creates a `UString` with the given capacity.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103914,"byte_end":103962,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103967,"byte_end":103970,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The string will be able to hold exactly `capacity` partial code units without reallocating.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":103975,"byte_end":104070,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ If `capacity` is set to 0, the string will not initially allocate.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104075,"byte_end":104145,"line_start":128,"line_end":128,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104365,"byte_end":104373,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"capacity","qualname":"<UString<C>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity this `UString` can hold without reallocating.\n","sig":null,"attributes":[{"value":"/ Returns the capacity this `UString` can hold without reallocating.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104283,"byte_end":104353,"line_start":135,"line_end":135,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104487,"byte_end":104492,"line_start":141,"line_end":141,"column_start":12,"column_end":17},"name":"clear","qualname":"<UString<C>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `UString` to zero length.\n","sig":null,"attributes":[{"value":"/ Truncate the `UString` to zero length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104433,"byte_end":104475,"line_start":140,"line_end":140,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104742,"byte_end":104749,"line_start":149,"line_end":149,"column_start":12,"column_end":19},"name":"reserve","qualname":"<UString<C>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the capacity for at least `additional` more capacity to be inserted in the given\n `UString`.","sig":null,"attributes":[{"value":"/ Reserves the capacity for at least `additional` more capacity to be inserted in the given","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104544,"byte_end":104637,"line_start":145,"line_end":145,"column_start":5,"column_end":98}},{"value":"/ `UString`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104642,"byte_end":104656,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104661,"byte_end":104664,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ More space may be reserved to avoid frequent allocations.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104669,"byte_end":104730,"line_start":148,"line_end":148,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105220,"byte_end":105233,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<UString<C>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the\n given `UString`. Does nothing if the capcity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104832,"byte_end":104926,"line_start":153,"line_end":153,"column_start":5,"column_end":99}},{"value":"/ given `UString`. Does nothing if the capcity is already sufficient.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":104931,"byte_end":105002,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105007,"byte_end":105010,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give more space than is requested. Therefore capacity can not","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105015,"byte_end":105108,"line_start":156,"line_end":156,"column_start":5,"column_end":98}},{"value":"/ be relied upon to be precisely minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105113,"byte_end":105208,"line_start":157,"line_end":157,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105413,"byte_end":105421,"line_start":163,"line_end":163,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<UString<C>>::into_vec","value":"pub fn into_vec(Self) -> Vec<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts the wide string into a `Vec`, consuming the string in the process.\n","sig":null,"attributes":[{"value":"/ Converts the wide string into a `Vec`, consuming the string in the process.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105322,"byte_end":105401,"line_start":162,"line_end":162,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105517,"byte_end":105524,"line_start":168,"line_end":168,"column_start":12,"column_end":19},"name":"as_ustr","qualname":"<UString<C>>::as_ustr","value":"pub fn as_ustr(&Self) -> &UStr<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts to a `UStr` reference.\n","sig":null,"attributes":[{"value":"/ Converts to a `UStr` reference.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105470,"byte_end":105505,"line_start":167,"line_end":167,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106540,"byte_end":106544,"line_start":200,"line_end":200,"column_start":12,"column_end":16},"name":"push","qualname":"<UString<C>>::push","value":"pub fn push<impl AsRef<UStr<C>>: AsRef<UStr<C>>>(&mut Self,\nimpl AsRef<UStr<C>>)","parent":null,"children":[],"decl_id":null,"docs":" Extends the wide string with the given `&UStr`.","sig":null,"attributes":[{"value":"/ Extends the wide string with the given `&UStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105570,"byte_end":105621,"line_start":172,"line_end":172,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105626,"byte_end":105629,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ No checks are performed on the strings. It is possible to end up nul values inside the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105634,"byte_end":105724,"line_start":174,"line_end":174,"column_start":5,"column_end":95}},{"value":"/ string, and it is up to the caller to determine if that is acceptable.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105729,"byte_end":105803,"line_start":175,"line_end":175,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105808,"byte_end":105811,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105816,"byte_end":105830,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105835,"byte_end":105838,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105843,"byte_end":105854,"line_start":179,"line_end":179,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105859,"byte_end":105889,"line_start":180,"line_end":180,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105894,"byte_end":105917,"line_start":181,"line_end":181,"column_start":5,"column_end":28}},{"value":"/ let mut wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105922,"byte_end":105964,"line_start":182,"line_end":182,"column_start":5,"column_end":47}},{"value":"/ let cloned = wstr.clone();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":105969,"byte_end":105999,"line_start":183,"line_end":183,"column_start":5,"column_end":35}},{"value":"/ // Push the clone to the end, repeating the string twice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106004,"byte_end":106065,"line_start":184,"line_end":184,"column_start":5,"column_end":66}},{"value":"/ wstr.push(cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106070,"byte_end":106092,"line_start":185,"line_end":185,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106097,"byte_end":106100,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), \"MyStringMyString\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106105,"byte_end":106167,"line_start":187,"line_end":187,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106172,"byte_end":106179,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106184,"byte_end":106187,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106192,"byte_end":106203,"line_start":190,"line_end":190,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106208,"byte_end":106238,"line_start":191,"line_end":191,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106243,"byte_end":106266,"line_start":192,"line_end":192,"column_start":5,"column_end":28}},{"value":"/ let mut wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106271,"byte_end":106313,"line_start":193,"line_end":193,"column_start":5,"column_end":47}},{"value":"/ let cloned = wstr.clone();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106318,"byte_end":106348,"line_start":194,"line_end":194,"column_start":5,"column_end":35}},{"value":"/ // Push the clone to the end, repeating the string twice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106353,"byte_end":106414,"line_start":195,"line_end":195,"column_start":5,"column_end":66}},{"value":"/ wstr.push(cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106419,"byte_end":106441,"line_start":196,"line_end":196,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106446,"byte_end":106449,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), \"MyStringMyString\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106454,"byte_end":106516,"line_start":198,"line_end":198,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106521,"byte_end":106528,"line_start":199,"line_end":199,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107629,"byte_end":107639,"line_start":232,"line_end":232,"column_start":12,"column_end":22},"name":"push_slice","qualname":"<UString<C>>::push_slice","value":"pub fn push_slice<impl AsRef<[C]>: AsRef<[C]>>(&mut Self, impl AsRef<[C]>)","parent":null,"children":[],"decl_id":null,"docs":" Extends the wide string with the given slice.","sig":null,"attributes":[{"value":"/ Extends the wide string with the given slice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106649,"byte_end":106698,"line_start":204,"line_end":204,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106703,"byte_end":106706,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ No checks are performed on the strings. It is possible to end up nul values inside the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106711,"byte_end":106801,"line_start":206,"line_end":206,"column_start":5,"column_end":95}},{"value":"/ string, and it is up to the caller to determine if that is acceptable.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106806,"byte_end":106880,"line_start":207,"line_end":207,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106885,"byte_end":106888,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106893,"byte_end":106907,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106912,"byte_end":106915,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106920,"byte_end":106931,"line_start":211,"line_end":211,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106936,"byte_end":106966,"line_start":212,"line_end":212,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106971,"byte_end":106994,"line_start":213,"line_end":213,"column_start":5,"column_end":28}},{"value":"/ let mut wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":106999,"byte_end":107041,"line_start":214,"line_end":214,"column_start":5,"column_end":47}},{"value":"/ let cloned = wstr.clone();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107046,"byte_end":107076,"line_start":215,"line_end":215,"column_start":5,"column_end":35}},{"value":"/ // Push the clone to the end, repeating the string twice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107081,"byte_end":107142,"line_start":216,"line_end":216,"column_start":5,"column_end":66}},{"value":"/ wstr.push_slice(cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107147,"byte_end":107175,"line_start":217,"line_end":217,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107180,"byte_end":107183,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), \"MyStringMyString\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107188,"byte_end":107250,"line_start":219,"line_end":219,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107255,"byte_end":107262,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107267,"byte_end":107270,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107275,"byte_end":107286,"line_start":222,"line_end":222,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107291,"byte_end":107321,"line_start":223,"line_end":223,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107326,"byte_end":107349,"line_start":224,"line_end":224,"column_start":5,"column_end":28}},{"value":"/ let mut wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107354,"byte_end":107396,"line_start":225,"line_end":225,"column_start":5,"column_end":47}},{"value":"/ let cloned = wstr.clone();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107401,"byte_end":107431,"line_start":226,"line_end":226,"column_start":5,"column_end":35}},{"value":"/ // Push the clone to the end, repeating the string twice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107436,"byte_end":107497,"line_start":227,"line_end":227,"column_start":5,"column_end":66}},{"value":"/ wstr.push_slice(cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107502,"byte_end":107530,"line_start":228,"line_end":228,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107535,"byte_end":107538,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), \"MyStringMyString\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107543,"byte_end":107605,"line_start":230,"line_end":230,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107610,"byte_end":107617,"line_start":231,"line_end":231,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108373,"byte_end":108386,"line_start":263,"line_end":263,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<UString<C>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the `UString` to match its length.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the `UString` to match its length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107734,"byte_end":107796,"line_start":236,"line_end":236,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107801,"byte_end":107804,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107809,"byte_end":107823,"line_start":238,"line_end":238,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107828,"byte_end":107831,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107836,"byte_end":107847,"line_start":240,"line_end":240,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107852,"byte_end":107882,"line_start":241,"line_end":241,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107887,"byte_end":107890,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ let mut s = U16String::from_str(\"foo\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107895,"byte_end":107938,"line_start":243,"line_end":243,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107943,"byte_end":107946,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ s.reserve(100);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107951,"byte_end":107970,"line_start":245,"line_end":245,"column_start":5,"column_end":24}},{"value":"/ assert!(s.capacity() >= 100);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":107975,"byte_end":108008,"line_start":246,"line_end":246,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108013,"byte_end":108016,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ s.shrink_to_fit();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108021,"byte_end":108043,"line_start":248,"line_end":248,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(3, s.capacity());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108048,"byte_end":108080,"line_start":249,"line_end":249,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108085,"byte_end":108092,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108097,"byte_end":108100,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108105,"byte_end":108116,"line_start":252,"line_end":252,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108121,"byte_end":108151,"line_start":253,"line_end":253,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108156,"byte_end":108159,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let mut s = U32String::from_str(\"foo\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108164,"byte_end":108207,"line_start":255,"line_end":255,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108212,"byte_end":108215,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ s.reserve(100);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108220,"byte_end":108239,"line_start":257,"line_end":257,"column_start":5,"column_end":24}},{"value":"/ assert!(s.capacity() >= 100);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108244,"byte_end":108277,"line_start":258,"line_end":258,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108282,"byte_end":108285,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ s.shrink_to_fit();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108290,"byte_end":108312,"line_start":260,"line_end":260,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(3, s.capacity());","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108317,"byte_end":108349,"line_start":261,"line_end":261,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108354,"byte_end":108361,"line_start":262,"line_end":262,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108912,"byte_end":108927,"line_start":286,"line_end":286,"column_start":12,"column_end":27},"name":"into_boxed_ustr","qualname":"<UString<C>>::into_boxed_ustr","value":"pub fn into_boxed_ustr(Self) -> Box<UStr<C>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this `UString` into a boxed `UStr`.","sig":null,"attributes":[{"value":"/ Converts this `UString` into a boxed `UStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108447,"byte_end":108495,"line_start":267,"line_end":267,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108500,"byte_end":108503,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108508,"byte_end":108522,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108527,"byte_end":108530,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108535,"byte_end":108542,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"/ use widestring::{U16String, U16Str};","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108547,"byte_end":108587,"line_start":272,"line_end":272,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108592,"byte_end":108595,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ let s = U16String::from_str(\"hello\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108600,"byte_end":108641,"line_start":274,"line_end":274,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108646,"byte_end":108649,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let b: Box<U16Str> = s.into_boxed_ustr();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108654,"byte_end":108699,"line_start":276,"line_end":276,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108704,"byte_end":108711,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108716,"byte_end":108719,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108724,"byte_end":108731,"line_start":279,"line_end":279,"column_start":5,"column_end":12}},{"value":"/ use widestring::{U32String, U32Str};","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108736,"byte_end":108776,"line_start":280,"line_end":280,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108781,"byte_end":108784,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ let s = U32String::from_str(\"hello\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108789,"byte_end":108830,"line_start":282,"line_end":282,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108835,"byte_end":108838,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let b: Box<U32Str> = s.into_boxed_ustr();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108843,"byte_end":108888,"line_start":284,"line_end":284,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":108893,"byte_end":108900,"line_start":285,"line_end":285,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109791,"byte_end":109799,"line_start":317,"line_end":317,"column_start":12,"column_end":20},"name":"from_str","qualname":"<UString<u16>>::from_str","value":"pub fn from_str<S: AsRef<str> + ?Sized>(&S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encodes a `U16String` copy from a `str`.","sig":null,"attributes":[{"value":"/ Encodes a `U16String` copy from a `str`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109254,"byte_end":109298,"line_start":301,"line_end":301,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109303,"byte_end":109306,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This makes a wide string copy of the `str`. Since `str` will always be valid UTF-8, the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109311,"byte_end":109402,"line_start":303,"line_end":303,"column_start":5,"column_end":96}},{"value":"/ resulting `U16String` will also be valid UTF-16.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109407,"byte_end":109459,"line_start":304,"line_end":304,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109464,"byte_end":109467,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109472,"byte_end":109486,"line_start":306,"line_end":306,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109491,"byte_end":109494,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109499,"byte_end":109510,"line_start":308,"line_end":308,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109515,"byte_end":109545,"line_start":309,"line_end":309,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109550,"byte_end":109573,"line_start":310,"line_end":310,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109578,"byte_end":109621,"line_start":311,"line_end":311,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109626,"byte_end":109664,"line_start":312,"line_end":312,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109669,"byte_end":109672,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109677,"byte_end":109722,"line_start":314,"line_end":314,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109727,"byte_end":109734,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109739,"byte_end":109779,"line_start":316,"line_end":316,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110500,"byte_end":110511,"line_start":339,"line_end":339,"column_start":12,"column_end":23},"name":"from_os_str","qualname":"<UString<u16>>::from_os_str","value":"pub fn from_os_str<S: AsRef<std::ffi::OsStr> + ?Sized>(&S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encodes a `U16String` copy from an `OsStr`.","sig":null,"attributes":[{"value":"/ Encodes a `U16String` copy from an `OsStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109933,"byte_end":109980,"line_start":323,"line_end":323,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109985,"byte_end":109988,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ This makes a wide string copy of the `OsStr`. Since `OsStr` makes no guarantees that it is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109993,"byte_end":110087,"line_start":325,"line_end":325,"column_start":5,"column_end":99}},{"value":"/ valid data, there is no guarantee that the resulting `U16String` will be valid UTF-16.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110092,"byte_end":110182,"line_start":326,"line_end":326,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110187,"byte_end":110190,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110195,"byte_end":110209,"line_start":328,"line_end":328,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110214,"byte_end":110217,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110222,"byte_end":110233,"line_start":330,"line_end":330,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110238,"byte_end":110268,"line_start":331,"line_end":331,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110273,"byte_end":110296,"line_start":332,"line_end":332,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110301,"byte_end":110344,"line_start":333,"line_end":333,"column_start":5,"column_end":48}},{"value":"/ let wstr = U16String::from_os_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110349,"byte_end":110390,"line_start":334,"line_end":334,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110395,"byte_end":110398,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110403,"byte_end":110448,"line_start":336,"line_end":336,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110453,"byte_end":110460,"line_start":337,"line_end":337,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110465,"byte_end":110488,"line_start":338,"line_end":338,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111243,"byte_end":111251,"line_start":361,"line_end":361,"column_start":12,"column_end":20},"name":"push_str","qualname":"<UString<u16>>::push_str","value":"pub fn push_str<impl AsRef<str>: AsRef<str>>(&mut Self, impl AsRef<str>)","parent":null,"children":[],"decl_id":null,"docs":" Extends the string with the given `&str`.","sig":null,"attributes":[{"value":"/ Extends the string with the given `&str`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110661,"byte_end":110706,"line_start":345,"line_end":345,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110711,"byte_end":110714,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ No checks are performed on the strings. It is possible to end up nul values inside the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110719,"byte_end":110809,"line_start":347,"line_end":347,"column_start":5,"column_end":95}},{"value":"/ string, and it is up to the caller to determine if that is acceptable.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110814,"byte_end":110888,"line_start":348,"line_end":348,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110893,"byte_end":110896,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110901,"byte_end":110915,"line_start":350,"line_end":350,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110920,"byte_end":110923,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110928,"byte_end":110939,"line_start":352,"line_end":352,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110944,"byte_end":110974,"line_start":353,"line_end":353,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":110979,"byte_end":111002,"line_start":354,"line_end":354,"column_start":5,"column_end":28}},{"value":"/ let mut wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111007,"byte_end":111049,"line_start":355,"line_end":355,"column_start":5,"column_end":47}},{"value":"/ // Push the original to the end, repeating the string twice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111054,"byte_end":111118,"line_start":356,"line_end":356,"column_start":5,"column_end":69}},{"value":"/ wstr.push_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111123,"byte_end":111144,"line_start":357,"line_end":357,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111149,"byte_end":111152,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), \"MyStringMyString\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111157,"byte_end":111219,"line_start":359,"line_end":359,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111224,"byte_end":111231,"line_start":360,"line_end":360,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111964,"byte_end":111975,"line_start":382,"line_end":382,"column_start":12,"column_end":23},"name":"push_os_str","qualname":"<UString<u16>>::push_os_str","value":"pub fn push_os_str<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(&mut Self,\nimpl AsRef<std::ffi::OsStr>)","parent":null,"children":[],"decl_id":null,"docs":" Extends the string with the given `&OsStr`.","sig":null,"attributes":[{"value":"/ Extends the string with the given `&OsStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111349,"byte_end":111396,"line_start":365,"line_end":365,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111401,"byte_end":111404,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ No checks are performed on the strings. It is possible to end up nul values inside the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111409,"byte_end":111499,"line_start":367,"line_end":367,"column_start":5,"column_end":95}},{"value":"/ string, and it is up to the caller to determine if that is acceptable.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111504,"byte_end":111578,"line_start":368,"line_end":368,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111583,"byte_end":111586,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111591,"byte_end":111605,"line_start":370,"line_end":370,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111610,"byte_end":111613,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111618,"byte_end":111629,"line_start":372,"line_end":372,"column_start":5,"column_end":16}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111634,"byte_end":111664,"line_start":373,"line_end":373,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111669,"byte_end":111692,"line_start":374,"line_end":374,"column_start":5,"column_end":28}},{"value":"/ let mut wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111697,"byte_end":111739,"line_start":375,"line_end":375,"column_start":5,"column_end":47}},{"value":"/ // Push the original to the end, repeating the string twice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111744,"byte_end":111808,"line_start":376,"line_end":376,"column_start":5,"column_end":69}},{"value":"/ wstr.push_os_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111813,"byte_end":111837,"line_start":377,"line_end":377,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111842,"byte_end":111845,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), \"MyStringMyString\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111850,"byte_end":111912,"line_start":379,"line_end":379,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111917,"byte_end":111924,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":111929,"byte_end":111952,"line_start":381,"line_end":381,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112773,"byte_end":112783,"line_start":410,"line_end":410,"column_start":12,"column_end":22},"name":"from_chars","qualname":"<UString<u32>>::from_chars","value":"pub fn from_chars(Vec<char>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32String` from a vector of UTF-32 data.","sig":null,"attributes":[{"value":"/ Constructs a `U32String` from a vector of UTF-32 data.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112274,"byte_end":112332,"line_start":396,"line_end":396,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112337,"byte_end":112340,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ No checks are made on the contents of the vector.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112345,"byte_end":112398,"line_start":398,"line_end":398,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112403,"byte_end":112406,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112411,"byte_end":112425,"line_start":400,"line_end":400,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112430,"byte_end":112433,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112438,"byte_end":112449,"line_start":402,"line_end":402,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112454,"byte_end":112484,"line_start":403,"line_end":403,"column_start":5,"column_end":35}},{"value":"/ let v: Vec<char> = \"Test\".chars().collect();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112489,"byte_end":112537,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/ # let cloned: Vec<u32> = v.iter().map(|&c| c as u32).collect();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112542,"byte_end":112609,"line_start":405,"line_end":405,"column_start":5,"column_end":72}},{"value":"/ // Create a wide string from the vector","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112614,"byte_end":112657,"line_start":406,"line_end":406,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32String::from_chars(v);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112662,"byte_end":112702,"line_start":407,"line_end":407,"column_start":5,"column_end":45}},{"value":"/ # assert_eq!(wstr.into_vec(), cloned);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112707,"byte_end":112749,"line_start":408,"line_end":408,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112754,"byte_end":112761,"line_start":409,"line_end":409,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113457,"byte_end":113465,"line_start":432,"line_end":432,"column_start":12,"column_end":20},"name":"from_str","qualname":"<UString<u32>>::from_str","value":"pub fn from_str<S: AsRef<str> + ?Sized>(&S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encodes a `U32String` copy from a `str`.","sig":null,"attributes":[{"value":"/ Encodes a `U32String` copy from a `str`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112920,"byte_end":112964,"line_start":416,"line_end":416,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112969,"byte_end":112972,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ This makes a wide string copy of the `str`. Since `str` will always be valid UTF-8, the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112977,"byte_end":113068,"line_start":418,"line_end":418,"column_start":5,"column_end":96}},{"value":"/ resulting `U32String` will also be valid UTF-32.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113073,"byte_end":113125,"line_start":419,"line_end":419,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113130,"byte_end":113133,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113138,"byte_end":113152,"line_start":421,"line_end":421,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113157,"byte_end":113160,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113165,"byte_end":113176,"line_start":423,"line_end":423,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113181,"byte_end":113211,"line_start":424,"line_end":424,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113216,"byte_end":113239,"line_start":425,"line_end":425,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113244,"byte_end":113287,"line_start":426,"line_end":426,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113292,"byte_end":113330,"line_start":427,"line_end":427,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113335,"byte_end":113338,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113343,"byte_end":113388,"line_start":429,"line_end":429,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113393,"byte_end":113400,"line_start":430,"line_end":430,"column_start":5,"column_end":12}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113405,"byte_end":113445,"line_start":431,"line_end":431,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114173,"byte_end":114184,"line_start":453,"line_end":453,"column_start":12,"column_end":23},"name":"from_os_str","qualname":"<UString<u32>>::from_os_str","value":"pub fn from_os_str<S: AsRef<std::ffi::OsStr> + ?Sized>(&S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encodes a `U32String` copy from an `OsStr`.","sig":null,"attributes":[{"value":"/ Encodes a `U32String` copy from an `OsStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113606,"byte_end":113653,"line_start":437,"line_end":437,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113658,"byte_end":113661,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ This makes a wide string copy of the `OsStr`. Since `OsStr` makes no guarantees that it is","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113666,"byte_end":113760,"line_start":439,"line_end":439,"column_start":5,"column_end":99}},{"value":"/ valid data, there is no guarantee that the resulting `U32String` will be valid UTF-32.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113765,"byte_end":113855,"line_start":440,"line_end":440,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113860,"byte_end":113863,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113868,"byte_end":113882,"line_start":442,"line_end":442,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113887,"byte_end":113890,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113895,"byte_end":113906,"line_start":444,"line_end":444,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113911,"byte_end":113941,"line_start":445,"line_end":445,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113946,"byte_end":113969,"line_start":446,"line_end":446,"column_start":5,"column_end":28}},{"value":"/ // Create a wide string from the string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":113974,"byte_end":114017,"line_start":447,"line_end":447,"column_start":5,"column_end":48}},{"value":"/ let wstr = U32String::from_os_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114022,"byte_end":114063,"line_start":448,"line_end":448,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114068,"byte_end":114071,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114076,"byte_end":114121,"line_start":450,"line_end":450,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114126,"byte_end":114133,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114138,"byte_end":114161,"line_start":452,"line_end":452,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114788,"byte_end":114801,"line_start":470,"line_end":470,"column_start":19,"column_end":32},"name":"from_char_ptr","qualname":"<UString<u32>>::from_char_ptr","value":"pub unsafe fn from_char_ptr(*const char, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32String` from a `char` pointer and a length.","sig":null,"attributes":[{"value":"/ Constructs a `U32String` from a `char` pointer and a length.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114355,"byte_end":114419,"line_start":458,"line_end":458,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114424,"byte_end":114427,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ The `len` argument is the number of `char` elements, **not** the number of bytes.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114432,"byte_end":114517,"line_start":460,"line_end":460,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114522,"byte_end":114525,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114530,"byte_end":114542,"line_start":462,"line_end":462,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114547,"byte_end":114550,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe as there is no guarantee that the given pointer is valid for `len`","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114555,"byte_end":114649,"line_start":464,"line_end":464,"column_start":5,"column_end":99}},{"value":"/ elements.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114654,"byte_end":114667,"line_start":465,"line_end":465,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114672,"byte_end":114675,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114680,"byte_end":114692,"line_start":467,"line_end":467,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114697,"byte_end":114700,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Panics if `len` is greater than 0 but `p` is a null pointer.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114705,"byte_end":114769,"line_start":469,"line_end":469,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115481,"byte_end":115489,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"push_str","qualname":"<UString<u32>>::push_str","value":"pub fn push_str<impl AsRef<str>: AsRef<str>>(&mut Self, impl AsRef<str>)","parent":null,"children":[],"decl_id":null,"docs":" Extends the string with the given `&str`.","sig":null,"attributes":[{"value":"/ Extends the string with the given `&str`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114899,"byte_end":114944,"line_start":474,"line_end":474,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114949,"byte_end":114952,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ No checks are performed on the strings. It is possible to end up nul values inside the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":114957,"byte_end":115047,"line_start":476,"line_end":476,"column_start":5,"column_end":95}},{"value":"/ string, and it is up to the caller to determine if that is acceptable.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115052,"byte_end":115126,"line_start":477,"line_end":477,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115131,"byte_end":115134,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115139,"byte_end":115153,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115158,"byte_end":115161,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115166,"byte_end":115177,"line_start":481,"line_end":481,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115182,"byte_end":115212,"line_start":482,"line_end":482,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115217,"byte_end":115240,"line_start":483,"line_end":483,"column_start":5,"column_end":28}},{"value":"/ let mut wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115245,"byte_end":115287,"line_start":484,"line_end":484,"column_start":5,"column_end":47}},{"value":"/ // Push the original to the end, repeating the string twice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115292,"byte_end":115356,"line_start":485,"line_end":485,"column_start":5,"column_end":69}},{"value":"/ wstr.push_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115361,"byte_end":115382,"line_start":486,"line_end":486,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115387,"byte_end":115390,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), \"MyStringMyString\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115395,"byte_end":115457,"line_start":488,"line_end":488,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115462,"byte_end":115469,"line_start":489,"line_end":489,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116213,"byte_end":116224,"line_start":511,"line_end":511,"column_start":12,"column_end":23},"name":"push_os_str","qualname":"<UString<u32>>::push_os_str","value":"pub fn push_os_str<impl AsRef<std::ffi::OsStr>: AsRef<std::ffi::OsStr>>(&mut Self,\nimpl AsRef<std::ffi::OsStr>)","parent":null,"children":[],"decl_id":null,"docs":" Extends the string with the given `&OsStr`.","sig":null,"attributes":[{"value":"/ Extends the string with the given `&OsStr`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115598,"byte_end":115645,"line_start":494,"line_end":494,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115650,"byte_end":115653,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ No checks are performed on the strings. It is possible to end up nul values inside the","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115658,"byte_end":115748,"line_start":496,"line_end":496,"column_start":5,"column_end":95}},{"value":"/ string, and it is up to the caller to determine if that is acceptable.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115753,"byte_end":115827,"line_start":497,"line_end":497,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115832,"byte_end":115835,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115840,"byte_end":115854,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115859,"byte_end":115862,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115867,"byte_end":115878,"line_start":501,"line_end":501,"column_start":5,"column_end":16}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115883,"byte_end":115913,"line_start":502,"line_end":502,"column_start":5,"column_end":35}},{"value":"/ let s = \"MyString\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115918,"byte_end":115941,"line_start":503,"line_end":503,"column_start":5,"column_end":28}},{"value":"/ let mut wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115946,"byte_end":115988,"line_start":504,"line_end":504,"column_start":5,"column_end":47}},{"value":"/ // Push the original to the end, repeating the string twice.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":115993,"byte_end":116057,"line_start":505,"line_end":505,"column_start":5,"column_end":69}},{"value":"/ wstr.push_os_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116062,"byte_end":116086,"line_start":506,"line_end":506,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116091,"byte_end":116094,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(wstr.to_string().unwrap(), \"MyStringMyString\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116099,"byte_end":116161,"line_start":508,"line_end":508,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116166,"byte_end":116173,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116178,"byte_end":116201,"line_start":510,"line_end":510,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122675,"byte_end":122684,"line_start":786,"line_end":786,"column_start":10,"column_end":19},"name":"U16String","qualname":"::ustring::U16String","value":"UString<u16>","parent":null,"children":[],"decl_id":null,"docs":" An owned, mutable \"wide\" string for FFI that is **not** nul-aware.","sig":null,"attributes":[{"value":"/ An owned, mutable \"wide\" string for FFI that is **not** nul-aware.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121542,"byte_end":121612,"line_start":760,"line_end":760,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121613,"byte_end":121616,"line_start":761,"line_end":761,"column_start":1,"column_end":4}},{"value":"/ `U16String` is not aware of nul values. Strings may or may not be nul-terminated, and may","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121617,"byte_end":121710,"line_start":762,"line_end":762,"column_start":1,"column_end":94}},{"value":"/ contain invalid and ill-formed UTF-16 data. These strings are intended to be used with","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121711,"byte_end":121801,"line_start":763,"line_end":763,"column_start":1,"column_end":91}},{"value":"/ FFI functions that directly use string length, where the strings are known to have proper","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121802,"byte_end":121895,"line_start":764,"line_end":764,"column_start":1,"column_end":94}},{"value":"/ nul-termination already, or where strings are merely being passed through without modification.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121896,"byte_end":121995,"line_start":765,"line_end":765,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121996,"byte_end":121999,"line_start":766,"line_end":766,"column_start":1,"column_end":4}},{"value":"/ `WideCString` should be used instead if nul-aware strings are required.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122000,"byte_end":122075,"line_start":767,"line_end":767,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122076,"byte_end":122079,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ `U16String` can be converted to and from many other standard Rust string types, including","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122080,"byte_end":122173,"line_start":769,"line_end":769,"column_start":1,"column_end":94}},{"value":"/ `OsString` and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122174,"byte_end":122243,"line_start":770,"line_end":770,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122244,"byte_end":122247,"line_start":771,"line_end":771,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122248,"byte_end":122262,"line_start":772,"line_end":772,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122263,"byte_end":122266,"line_start":773,"line_end":773,"column_start":1,"column_end":4}},{"value":"/ The following example constructs a `U16String` and shows how to convert a `U16String` to a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122267,"byte_end":122361,"line_start":774,"line_end":774,"column_start":1,"column_end":95}},{"value":"/ regular Rust `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122362,"byte_end":122388,"line_start":775,"line_end":775,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122389,"byte_end":122392,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122393,"byte_end":122404,"line_start":777,"line_end":777,"column_start":1,"column_end":12}},{"value":"/ use widestring::U16String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122405,"byte_end":122435,"line_start":778,"line_end":778,"column_start":1,"column_end":31}},{"value":"/ let s = \"Test\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122436,"byte_end":122455,"line_start":779,"line_end":779,"column_start":1,"column_end":20}},{"value":"/ // Create a wide string from the rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122456,"byte_end":122504,"line_start":780,"line_end":780,"column_start":1,"column_end":49}},{"value":"/ let wstr = U16String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122505,"byte_end":122543,"line_start":781,"line_end":781,"column_start":1,"column_end":39}},{"value":"/ // Convert back to a rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122544,"byte_end":122580,"line_start":782,"line_end":782,"column_start":1,"column_end":37}},{"value":"/ let rust_str = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122581,"byte_end":122623,"line_start":783,"line_end":783,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(rust_str, \"Test\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122624,"byte_end":122657,"line_start":784,"line_end":784,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122658,"byte_end":122665,"line_start":785,"line_end":785,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123846,"byte_end":123855,"line_start":814,"line_end":814,"column_start":10,"column_end":19},"name":"U32String","qualname":"::ustring::U32String","value":"UString<u32>","parent":null,"children":[],"decl_id":null,"docs":" An owned, mutable 32-bit wide string for FFI that is **not** nul-aware.","sig":null,"attributes":[{"value":"/ An owned, mutable 32-bit wide string for FFI that is **not** nul-aware.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122702,"byte_end":122777,"line_start":788,"line_end":788,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122778,"byte_end":122781,"line_start":789,"line_end":789,"column_start":1,"column_end":4}},{"value":"/ `U32String` is not aware of nul values. Strings may or may not be nul-terminated, and may","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122782,"byte_end":122875,"line_start":790,"line_end":790,"column_start":1,"column_end":94}},{"value":"/ contain invalid and ill-formed UTF-32 data. These strings are intended to be used with","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122876,"byte_end":122966,"line_start":791,"line_end":791,"column_start":1,"column_end":91}},{"value":"/ FFI functions that directly use string length, where the strings are known to have proper","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":122967,"byte_end":123060,"line_start":792,"line_end":792,"column_start":1,"column_end":94}},{"value":"/ nul-termination already, or where strings are merely being passed through without modification.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123061,"byte_end":123160,"line_start":793,"line_end":793,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123161,"byte_end":123164,"line_start":794,"line_end":794,"column_start":1,"column_end":4}},{"value":"/ `U32CString` should be used instead if nul-aware 32-bit strings are required.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123165,"byte_end":123246,"line_start":795,"line_end":795,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123247,"byte_end":123250,"line_start":796,"line_end":796,"column_start":1,"column_end":4}},{"value":"/ `U32String` can be converted to and from many other standard Rust string types, including","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123251,"byte_end":123344,"line_start":797,"line_end":797,"column_start":1,"column_end":94}},{"value":"/ `OsString` and `String`, making proper Unicode FFI safe and easy.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123345,"byte_end":123414,"line_start":798,"line_end":798,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123415,"byte_end":123418,"line_start":799,"line_end":799,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123419,"byte_end":123433,"line_start":800,"line_end":800,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123434,"byte_end":123437,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ The following example constructs a `U32String` and shows how to convert a `U32String` to a","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123438,"byte_end":123532,"line_start":802,"line_end":802,"column_start":1,"column_end":95}},{"value":"/ regular Rust `String`.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123533,"byte_end":123559,"line_start":803,"line_end":803,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123560,"byte_end":123563,"line_start":804,"line_end":804,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123564,"byte_end":123575,"line_start":805,"line_end":805,"column_start":1,"column_end":12}},{"value":"/ use widestring::U32String;","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123576,"byte_end":123606,"line_start":806,"line_end":806,"column_start":1,"column_end":31}},{"value":"/ let s = \"Test\";","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123607,"byte_end":123626,"line_start":807,"line_end":807,"column_start":1,"column_end":20}},{"value":"/ // Create a wide string from the rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123627,"byte_end":123675,"line_start":808,"line_end":808,"column_start":1,"column_end":49}},{"value":"/ let wstr = U32String::from_str(s);","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123676,"byte_end":123714,"line_start":809,"line_end":809,"column_start":1,"column_end":39}},{"value":"/ // Convert back to a rust string","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123715,"byte_end":123751,"line_start":810,"line_end":810,"column_start":1,"column_end":37}},{"value":"/ let rust_str = wstr.to_string_lossy();","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123752,"byte_end":123794,"line_start":811,"line_end":811,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(rust_str, \"Test\");","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123795,"byte_end":123828,"line_start":812,"line_end":812,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123829,"byte_end":123836,"line_start":813,"line_end":813,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":124002,"byte_end":124012,"line_start":817,"line_end":817,"column_start":10,"column_end":20},"name":"WideString","qualname":"::ustring::WideString","value":"UString<WideChar>","parent":null,"children":[],"decl_id":null,"docs":" Alias for `U16String` or `U32String` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"/ Alias for `U16String` or `U32String` depending on platform. Intended to match typical C `wchar_t` size on platform.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":123873,"byte_end":123992,"line_start":816,"line_end":816,"column_start":1,"column_end":120}}]},{"kind":"Trait","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10751,"byte_end":10756,"line_start":217,"line_end":217,"column_start":11,"column_end":16},"name":"UChar","qualname":"::UChar","value":"UChar: Debug + Sized + Copy + Ord + Eq","parent":null,"children":[{"krate":0,"index":649}],"decl_id":null,"docs":" Marker trait for primitive types used to represent UTF character data. Should not be used\n directly.\n","sig":null,"attributes":[{"value":"/ Marker trait for primitive types used to represent UTF character data. Should not be used","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10633,"byte_end":10726,"line_start":215,"line_end":215,"column_start":1,"column_end":94}},{"value":"/ directly.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10727,"byte_end":10740,"line_start":216,"line_end":216,"column_start":1,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10830,"byte_end":10833,"line_start":219,"line_end":219,"column_start":11,"column_end":14},"name":"NUL","qualname":"::UChar::NUL","value":"Self","parent":{"krate":0,"index":648},"children":[],"decl_id":null,"docs":" NUL character value\n","sig":null,"attributes":[{"value":"/ NUL character value","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10796,"byte_end":10819,"line_start":218,"line_end":218,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":11228,"byte_end":11236,"line_start":236,"line_end":236,"column_start":10,"column_end":18},"name":"WideChar","qualname":"::WideChar","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" Alias for `u16` or `u32` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":11095,"byte_end":11110,"line_start":234,"line_end":234,"column_start":1,"column_end":16}},{"value":"/ Alias for `u16` or `u32` depending on platform. Intended to match typical C `wchar_t` size on platform.","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":11111,"byte_end":11218,"line_start":235,"line_end":235,"column_start":1,"column_end":108}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12451,"byte_end":12466,"line_start":31,"line_end":31,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12971,"byte_end":12986,"line_start":52,"line_end":52,"column_start":39,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13188,"byte_end":13203,"line_start":59,"line_end":59,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14134,"byte_end":14139,"line_start":83,"line_end":83,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21865,"byte_end":21870,"line_start":292,"line_end":292,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24073,"byte_end":24078,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33804,"byte_end":33812,"line_start":73,"line_end":73,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46125,"byte_end":46133,"line_start":400,"line_end":400,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46266,"byte_end":46274,"line_start":408,"line_end":408,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58919,"byte_end":58927,"line_start":752,"line_end":752,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59060,"byte_end":59068,"line_start":760,"line_end":760,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79450,"byte_end":79458,"line_start":1291,"line_end":1291,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79552,"byte_end":79560,"line_start":1297,"line_end":1297,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79727,"byte_end":79735,"line_start":1305,"line_end":1305,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79903,"byte_end":79911,"line_start":1313,"line_end":1313,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80077,"byte_end":80085,"line_start":1321,"line_end":1321,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80254,"byte_end":80262,"line_start":1329,"line_end":1329,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80434,"byte_end":80442,"line_start":1337,"line_end":1337,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80618,"byte_end":80621,"line_start":1345,"line_end":1345,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80759,"byte_end":80762,"line_start":1351,"line_end":1351,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80930,"byte_end":80938,"line_start":1358,"line_end":1358,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81092,"byte_end":81100,"line_start":1365,"line_end":1365,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81228,"byte_end":81235,"line_start":1371,"line_end":1371,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81371,"byte_end":81379,"line_start":1377,"line_end":1377,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81492,"byte_end":81500,"line_start":1383,"line_end":1383,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81676,"byte_end":81684,"line_start":1392,"line_end":1392,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82176,"byte_end":82184,"line_start":1415,"line_end":1415,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82322,"byte_end":82330,"line_start":1422,"line_end":1422,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82649,"byte_end":82657,"line_start":1432,"line_end":1432,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82833,"byte_end":82841,"line_start":1441,"line_end":1441,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82937,"byte_end":82942,"line_start":1447,"line_end":1447,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83088,"byte_end":83091,"line_start":1454,"line_end":1454,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83234,"byte_end":83237,"line_start":1460,"line_end":1460,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83381,"byte_end":83386,"line_start":1466,"line_end":1466,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83481,"byte_end":83489,"line_start":1472,"line_end":1472,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83583,"byte_end":83588,"line_start":1478,"line_end":1478,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83688,"byte_end":83696,"line_start":1484,"line_end":1484,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83808,"byte_end":83811,"line_start":1490,"line_end":1490,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84056,"byte_end":84064,"line_start":1497,"line_end":1497,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84196,"byte_end":84199,"line_start":1504,"line_end":1504,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84338,"byte_end":84341,"line_start":1511,"line_end":1511,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84541,"byte_end":84549,"line_start":1518,"line_end":1518,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84936,"byte_end":84944,"line_start":1531,"line_end":1531,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85051,"byte_end":85059,"line_start":1537,"line_end":1537,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85270,"byte_end":85278,"line_start":1544,"line_end":1544,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88320,"byte_end":88334,"line_start":23,"line_end":23,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88531,"byte_end":88545,"line_start":30,"line_end":30,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89604,"byte_end":89608,"line_start":58,"line_end":58,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92072,"byte_end":92076,"line_start":135,"line_end":135,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94181,"byte_end":94185,"line_start":204,"line_end":204,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102233,"byte_end":102240,"line_start":70,"line_end":70,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109094,"byte_end":109101,"line_start":292,"line_end":292,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109235,"byte_end":109242,"line_start":300,"line_end":300,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112114,"byte_end":112121,"line_start":387,"line_end":387,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112255,"byte_end":112262,"line_start":395,"line_end":395,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116406,"byte_end":116413,"line_start":517,"line_end":517,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116514,"byte_end":116517,"line_start":523,"line_end":523,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116637,"byte_end":116640,"line_start":529,"line_end":529,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116756,"byte_end":116759,"line_start":535,"line_end":535,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116872,"byte_end":116875,"line_start":541,"line_end":541,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116988,"byte_end":116991,"line_start":547,"line_end":547,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117101,"byte_end":117108,"line_start":553,"line_end":553,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117207,"byte_end":117214,"line_start":559,"line_end":559,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117314,"byte_end":117321,"line_start":565,"line_end":565,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117418,"byte_end":117425,"line_start":571,"line_end":571,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117525,"byte_end":117532,"line_start":577,"line_end":577,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117635,"byte_end":117642,"line_start":583,"line_end":583,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117777,"byte_end":117784,"line_start":590,"line_end":590,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117934,"byte_end":117941,"line_start":597,"line_end":597,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118095,"byte_end":118103,"line_start":604,"line_end":604,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118241,"byte_end":118249,"line_start":611,"line_end":611,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118388,"byte_end":118395,"line_start":617,"line_end":617,"column_start":64,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118510,"byte_end":118517,"line_start":623,"line_end":623,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118690,"byte_end":118697,"line_start":632,"line_end":632,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118844,"byte_end":118851,"line_start":641,"line_end":641,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118995,"byte_end":119002,"line_start":648,"line_end":648,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119189,"byte_end":119196,"line_start":655,"line_end":655,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119353,"byte_end":119360,"line_start":662,"line_end":662,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119557,"byte_end":119564,"line_start":669,"line_end":669,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119739,"byte_end":119746,"line_start":676,"line_end":676,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119940,"byte_end":119947,"line_start":683,"line_end":683,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120042,"byte_end":120046,"line_start":689,"line_end":689,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120188,"byte_end":120191,"line_start":696,"line_end":696,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120316,"byte_end":120319,"line_start":702,"line_end":702,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120445,"byte_end":120449,"line_start":708,"line_end":708,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120543,"byte_end":120550,"line_start":714,"line_end":714,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120643,"byte_end":120647,"line_start":720,"line_end":720,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120747,"byte_end":120754,"line_start":726,"line_end":726,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120865,"byte_end":120868,"line_start":732,"line_end":732,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121108,"byte_end":121115,"line_start":740,"line_end":740,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121238,"byte_end":121241,"line_start":746,"line_end":746,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121354,"byte_end":121357,"line_start":752,"line_end":752,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12451,"byte_end":12466,"line_start":31,"line_end":31,"column_start":16,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":12971,"byte_end":12986,"line_start":52,"line_end":52,"column_start":39,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":655},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":13188,"byte_end":13203,"line_start":59,"line_end":59,"column_start":38,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":655},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":14134,"byte_end":14139,"line_start":83,"line_end":83,"column_start":16,"column_end":21},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":21865,"byte_end":21870,"line_start":292,"line_end":292,"column_start":6,"column_end":11},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstr.rs","byte_start":24073,"byte_end":24078,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":33804,"byte_end":33812,"line_start":73,"line_end":73,"column_start":16,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46125,"byte_end":46133,"line_start":400,"line_end":400,"column_start":18,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":12195}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":46266,"byte_end":46274,"line_start":408,"line_end":408,"column_start":6,"column_end":14},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":58919,"byte_end":58927,"line_start":752,"line_end":752,"column_start":18,"column_end":26},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":12195}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":59060,"byte_end":59068,"line_start":760,"line_end":760,"column_start":6,"column_end":14},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79450,"byte_end":79458,"line_start":1291,"line_end":1291,"column_start":33,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2927}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79552,"byte_end":79560,"line_start":1297,"line_end":1297,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2937}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79727,"byte_end":79735,"line_start":1305,"line_end":1305,"column_start":26,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2937}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":79903,"byte_end":79911,"line_start":1313,"line_end":1313,"column_start":27,"column_end":35},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2937}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80077,"byte_end":80085,"line_start":1321,"line_end":1321,"column_start":27,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2937}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80254,"byte_end":80262,"line_start":1329,"line_end":1329,"column_start":30,"column_end":38},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2937}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80434,"byte_end":80442,"line_start":1337,"line_end":1337,"column_start":30,"column_end":38},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2937}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80618,"byte_end":80621,"line_start":1345,"line_end":1345,"column_start":34,"column_end":37},"kind":{"Impl":{"id":18}},"from":{"krate":5,"index":672},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80759,"byte_end":80762,"line_start":1351,"line_end":1351,"column_start":34,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":5,"index":672},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":80930,"byte_end":80938,"line_start":1358,"line_end":1358,"column_start":40,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":2952},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81092,"byte_end":81100,"line_start":1365,"line_end":1365,"column_start":40,"column_end":48},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":2952},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81228,"byte_end":81235,"line_start":1371,"line_end":1371,"column_start":38,"column_end":45},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81371,"byte_end":81379,"line_start":1377,"line_end":1377,"column_start":61,"column_end":69},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81492,"byte_end":81500,"line_start":1383,"line_end":1383,"column_start":37,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":3327}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":81676,"byte_end":81684,"line_start":1392,"line_end":1392,"column_start":26,"column_end":34},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":3242}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82176,"byte_end":82184,"line_start":1415,"line_end":1415,"column_start":18,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":3002}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82322,"byte_end":82330,"line_start":1422,"line_end":1422,"column_start":18,"column_end":26},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":3002}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82649,"byte_end":82657,"line_start":1432,"line_end":1432,"column_start":25,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":3266}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82833,"byte_end":82841,"line_start":1441,"line_end":1441,"column_start":37,"column_end":45},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2623}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":82937,"byte_end":82942,"line_start":1447,"line_end":1447,"column_start":28,"column_end":33},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":675},"to":{"krate":5,"index":663}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83088,"byte_end":83091,"line_start":1454,"line_end":1454,"column_start":35,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":5,"index":672},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83234,"byte_end":83237,"line_start":1460,"line_end":1460,"column_start":35,"column_end":38},"kind":{"Impl":{"id":32}},"from":{"krate":5,"index":672},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83381,"byte_end":83386,"line_start":1466,"line_end":1466,"column_start":36,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":675},"to":{"krate":2,"index":2921}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83481,"byte_end":83489,"line_start":1472,"line_end":1472,"column_start":36,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2921}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83583,"byte_end":83588,"line_start":1478,"line_end":1478,"column_start":31,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":675},"to":{"krate":2,"index":2921}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83688,"byte_end":83696,"line_start":1484,"line_end":1484,"column_start":31,"column_end":39},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2921}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":83808,"byte_end":83811,"line_start":1490,"line_end":1490,"column_start":43,"column_end":46},"kind":{"Impl":{"id":37}},"from":{"krate":5,"index":315},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84056,"byte_end":84064,"line_start":1497,"line_end":1497,"column_start":40,"column_end":48},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":702},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84196,"byte_end":84199,"line_start":1504,"line_end":1504,"column_start":38,"column_end":41},"kind":{"Impl":{"id":39}},"from":{"krate":5,"index":315},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84338,"byte_end":84341,"line_start":1511,"line_end":1511,"column_start":28,"column_end":31},"kind":{"Impl":{"id":40}},"from":{"krate":5,"index":315},"to":{"krate":2,"index":3002}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84541,"byte_end":84549,"line_start":1518,"line_end":1518,"column_start":16,"column_end":24},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":84936,"byte_end":84944,"line_start":1531,"line_end":1531,"column_start":33,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":732},"to":{"krate":2,"index":2927}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85051,"byte_end":85059,"line_start":1537,"line_end":1537,"column_start":39,"column_end":47},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":732},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ucstring.rs","byte_start":85270,"byte_end":85278,"line_start":1544,"line_end":1544,"column_start":38,"column_end":46},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":732},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88320,"byte_end":88334,"line_start":23,"line_end":23,"column_start":29,"column_end":43},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":754},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":88531,"byte_end":88545,"line_start":30,"line_end":30,"column_start":28,"column_end":42},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":754},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":89604,"byte_end":89608,"line_start":58,"line_end":58,"column_start":16,"column_end":20},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":92072,"byte_end":92076,"line_start":135,"line_end":135,"column_start":6,"column_end":10},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustr.rs","byte_start":94181,"byte_end":94185,"line_start":204,"line_end":204,"column_start":6,"column_end":10},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":102233,"byte_end":102240,"line_start":70,"line_end":70,"column_start":16,"column_end":23},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109094,"byte_end":109101,"line_start":292,"line_end":292,"column_start":18,"column_end":25},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":12195}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":109235,"byte_end":109242,"line_start":300,"line_end":300,"column_start":6,"column_end":13},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112114,"byte_end":112121,"line_start":387,"line_end":387,"column_start":18,"column_end":25},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":12195}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":112255,"byte_end":112262,"line_start":395,"line_end":395,"column_start":6,"column_end":13},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116406,"byte_end":116413,"line_start":517,"line_end":517,"column_start":33,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2927}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116514,"byte_end":116517,"line_start":523,"line_end":523,"column_start":33,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":5,"index":672},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116637,"byte_end":116640,"line_start":529,"line_end":529,"column_start":33,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":5,"index":672},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116756,"byte_end":116759,"line_start":535,"line_end":535,"column_start":29,"column_end":32},"kind":{"Impl":{"id":58}},"from":{"krate":5,"index":7089},"to":{"krate":2,"index":2927}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116872,"byte_end":116875,"line_start":541,"line_end":541,"column_start":29,"column_end":32},"kind":{"Impl":{"id":59}},"from":{"krate":5,"index":7089},"to":{"krate":2,"index":2927}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":116988,"byte_end":116991,"line_start":547,"line_end":547,"column_start":29,"column_end":32},"kind":{"Impl":{"id":60}},"from":{"krate":5,"index":7089},"to":{"krate":2,"index":2927}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117101,"byte_end":117108,"line_start":553,"line_end":553,"column_start":23,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117207,"byte_end":117214,"line_start":559,"line_end":559,"column_start":23,"column_end":30},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117314,"byte_end":117321,"line_start":565,"line_end":565,"column_start":24,"column_end":31},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117418,"byte_end":117425,"line_start":571,"line_end":571,"column_start":24,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117525,"byte_end":117532,"line_start":577,"line_end":577,"column_start":27,"column_end":34},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117635,"byte_end":117642,"line_start":583,"line_end":583,"column_start":27,"column_end":34},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117777,"byte_end":117784,"line_start":590,"line_end":590,"column_start":35,"column_end":42},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":117934,"byte_end":117941,"line_start":597,"line_end":597,"column_start":35,"column_end":42},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118095,"byte_end":118103,"line_start":604,"line_end":604,"column_start":39,"column_end":47},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":2952},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118241,"byte_end":118249,"line_start":611,"line_end":611,"column_start":39,"column_end":47},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":2952},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118388,"byte_end":118395,"line_start":617,"line_end":617,"column_start":64,"column_end":71},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118510,"byte_end":118517,"line_start":623,"line_end":623,"column_start":37,"column_end":44},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":3327}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118690,"byte_end":118697,"line_start":632,"line_end":632,"column_start":26,"column_end":33},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":3242}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118844,"byte_end":118851,"line_start":641,"line_end":641,"column_start":39,"column_end":46},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2675}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":118995,"byte_end":119002,"line_start":648,"line_end":648,"column_start":40,"column_end":47},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2722}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119189,"byte_end":119196,"line_start":655,"line_end":655,"column_start":47,"column_end":54},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2675}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119353,"byte_end":119360,"line_start":662,"line_end":662,"column_start":48,"column_end":55},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2722}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119557,"byte_end":119564,"line_start":669,"line_end":669,"column_start":52,"column_end":59},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2675}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119739,"byte_end":119746,"line_start":676,"line_end":676,"column_start":53,"column_end":60},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2722}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":119940,"byte_end":119947,"line_start":683,"line_end":683,"column_start":36,"column_end":43},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2623}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120042,"byte_end":120046,"line_start":689,"line_end":689,"column_start":28,"column_end":32},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":767},"to":{"krate":5,"index":663}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120188,"byte_end":120191,"line_start":696,"line_end":696,"column_start":34,"column_end":37},"kind":{"Impl":{"id":82}},"from":{"krate":5,"index":672},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120316,"byte_end":120319,"line_start":702,"line_end":702,"column_start":34,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":5,"index":672},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120445,"byte_end":120449,"line_start":708,"line_end":708,"column_start":35,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":767},"to":{"krate":2,"index":2921}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120543,"byte_end":120550,"line_start":714,"line_end":714,"column_start":35,"column_end":42},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2921}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120643,"byte_end":120647,"line_start":720,"line_end":720,"column_start":31,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":767},"to":{"krate":2,"index":2921}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120747,"byte_end":120754,"line_start":726,"line_end":726,"column_start":31,"column_end":38},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2921}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":120865,"byte_end":120868,"line_start":732,"line_end":732,"column_start":42,"column_end":45},"kind":{"Impl":{"id":88}},"from":{"krate":5,"index":315},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121108,"byte_end":121115,"line_start":740,"line_end":740,"column_start":39,"column_end":46},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121238,"byte_end":121241,"line_start":746,"line_end":746,"column_start":37,"column_end":40},"kind":{"Impl":{"id":90}},"from":{"krate":5,"index":315},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\ustring.rs","byte_start":121354,"byte_end":121357,"line_start":752,"line_end":752,"column_start":28,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":5,"index":315},"to":{"krate":2,"index":3002}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10758,"byte_end":10763,"line_start":217,"line_end":217,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":9602},"to":{"krate":0,"index":648}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10766,"byte_end":10771,"line_start":217,"line_end":217,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":648}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10774,"byte_end":10778,"line_start":217,"line_end":217,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":648}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10781,"byte_end":10784,"line_start":217,"line_end":217,"column_start":41,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":2711},"to":{"krate":0,"index":648}},{"span":{"file_name":"C:\\Users\\hunte\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utfx-0.1.0\\src\\lib.rs","byte_start":10787,"byte_end":10789,"line_start":217,"line_end":217,"column_start":47,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":2680},"to":{"krate":0,"index":648}}]}